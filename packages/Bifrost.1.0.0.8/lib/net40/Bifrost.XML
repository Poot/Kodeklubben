<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Bifrost</name>
    </assembly>
    <members>
        <member name="T:Bifrost.CodeGeneration.CodeGenerator">
            <summary>
            Represents an implementation for <see cref="T:Bifrost.CodeGeneration.ICodeGenerator"/>
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.ICodeGenerator">
            <summary>
            Defines a code generator
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.ICodeGenerator.GenerateFrom(Bifrost.CodeGeneration.ILanguageElement)">
            <summary>
            Generates the code from a given <see cref="T:Bifrost.CodeGeneration.ILanguageElement"/>
            </summary>
            <param name="languageElement"><see cref="T:Bifrost.CodeGeneration.ILanguageElement"/> to generate the code from</param>
            <returns><see cref="T:System.String"/> containing the generated code</returns>
        </member>
        <member name="T:Bifrost.CodeGeneration.CodeWriter">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.CodeGeneration.ICodeWriter"/>
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.ICodeWriter">
            <summary>
            Defines a writer for writing code to, typically used by <see cref="T:Bifrost.CodeGeneration.ILanguageElement">language elements</see>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.ICodeWriter.Indent">
            <summary>
            Increase indentation
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.ICodeWriter.Unindent">
            <summary>
            Decrease indentation
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.ICodeWriter.WriteWithIndentation(System.String,System.Object[])">
            <summary>
            Write string with indentation applied
            </summary>
            <param name="format"><see cref="T:System.String"/> format</param>
            <param name="args">Args used by the format string</param>
        </member>
        <member name="M:Bifrost.CodeGeneration.ICodeWriter.Write(System.String,System.Object[])">
            <summary>
            Write string without indentation applied
            </summary>
            <param name="format"><see cref="T:System.String"/> format</param>
            <param name="args">Args used by the format string</param>
        </member>
        <member name="M:Bifrost.CodeGeneration.ICodeWriter.Newline">
            <summary>
            Add a newline 
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.ILanguageElement">
            <summary>
            Defines the contract of a language element
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.ILanguageElement.AddChild(Bifrost.CodeGeneration.ILanguageElement)">
            <summary>
            Add a child <see cref="T:Bifrost.CodeGeneration.ILanguageElement"/> to this
            </summary>
            <param name="element"><see cref="T:Bifrost.CodeGeneration.ILanguageElement"/> to add</param>
        </member>
        <member name="M:Bifrost.CodeGeneration.ILanguageElement.Write(Bifrost.CodeGeneration.ICodeWriter)">
            <summary>
            Writes code to the <see cref="T:Bifrost.CodeGeneration.ICodeWriter"/>
            </summary>
            <param name="writer"><see cref="T:Bifrost.CodeGeneration.ICodeWriter"/> to write to</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.ILanguageElement.Parent">
            <summary>
            Gets or sets the parent <see cref="T:Bifrost.CodeGeneration.ILanguageElement"/>
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Accessor">
            <summary>
            Represents an accessor
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.LanguageElement">
            <summary>
            Represents an abstract of a <see cref="T:Bifrost.CodeGeneration.ILanguageElement"/>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.LanguageElement.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.LanguageElement"/>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.LanguageElement.WriteChildren(Bifrost.CodeGeneration.ICodeWriter)">
            <summary>
            Write all children to the given <see cref="T:Bifrost.CodeGeneration.ICodeWriter"/>
            </summary>
            <param name="writer"><see cref="T:Bifrost.CodeGeneration.ICodeWriter"/> to use for writing the children</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.LanguageElement.Children">
            <summary>
            Gets the <see cref="T:Bifrost.CodeGeneration.ILanguageElement">children</see>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.Accessor.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.Accessor"/>
            </summary>
            <param name="name">Name of accessor</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Accessor.Name">
            <summary>
            Gets the name of the <see cref="T:Bifrost.CodeGeneration.JavaScript.Accessor"/>
            </summary>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Accessor.Child">
            <summary>
            Gets or sets any child of the <see cref="T:Bifrost.CodeGeneration.JavaScript.Accessor"/>
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.AccessorExtensions">
            <summary>
            Provides methods for working with accessors
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AccessorExtensions.WithFunctionCall(Bifrost.CodeGeneration.JavaScript.Accessor,System.Action{Bifrost.CodeGeneration.JavaScript.FunctionCall})">
            <summary>
            Call function on an accessor
            </summary>
            <param name="accessor"><see cref="T:Bifrost.CodeGeneration.JavaScript.Accessor"/> perform call on</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called to build the functioncall</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Assignment">
            <summary>
            Represents an assignment - a base for any assignments
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.Assignment.#ctor(System.String,Bifrost.CodeGeneration.ILanguageElement)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/>
            </summary>
            <param name="name">Name of the assignment</param>
            <param name="value"><see cref="T:Bifrost.CodeGeneration.ILanguageElement">Value</see> to assign</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Assignment.Name">
            <summary>
            Gets or sets the name of the assignment
            </summary>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Assignment.Value">
            <summary>
            Gets or sets the <see cref="T:Bifrost.CodeGeneration.ILanguageElement">value</see> to assign
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions">
            <summary>
            Provides methods for working with assignment
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.Assign(Bifrost.CodeGeneration.JavaScript.ObjectLiteral,System.String)">
            <summary>
            Assign a key within an <see cref="T:Bifrost.CodeGeneration.JavaScript.ObjectLiteral"/>
            </summary>
            <param name="objectLiteral"><see cref="T:Bifrost.CodeGeneration.JavaScript.ObjectLiteral"/> to assign to</param>
            <param name="name">Name of key</param>
            <returns><see cref="T:Bifrost.CodeGeneration.JavaScript.KeyAssignment"/> to build</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithThis(Bifrost.CodeGeneration.JavaScript.Assignment)">
            <summary>
            Assign "this" to an <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/>
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithLiteral(Bifrost.CodeGeneration.JavaScript.Assignment,System.Object)">
            <summary>
            Assign a literal
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="literal">Literal to assign</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithString(Bifrost.CodeGeneration.JavaScript.Assignment,System.String)">
            <summary>
            Assign a string
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="theString">String to assign</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithType(Bifrost.CodeGeneration.JavaScript.Assignment,System.Action{Bifrost.CodeGeneration.JavaScript.TypeExtension})">
            <summary>
            Assign a type
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called to build the type</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithFunction(Bifrost.CodeGeneration.JavaScript.Assignment,System.Action{Bifrost.CodeGeneration.JavaScript.Function},System.String[])">
            <summary>
            Assign a function
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called to build the function</param>
            <param name="parameters">Optional parameters for the function</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithFunctionCall(Bifrost.CodeGeneration.JavaScript.Assignment,System.Action{Bifrost.CodeGeneration.JavaScript.FunctionCall})">
            <summary>
            Assign a function call
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called to build the functioncall</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithObservable(Bifrost.CodeGeneration.JavaScript.Assignment,System.String)">
            <summary>
            Assign an observable
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="defaultValue">Optional default value</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithDefaultValue(Bifrost.CodeGeneration.JavaScript.Assignment,System.Type)">
            <summary>
            Assign the default value of a given Type
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="type">The type of which to create a default for</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithDefaultNumericValue(Bifrost.CodeGeneration.JavaScript.Assignment,System.Type)">
            <summary>
            Assign the default value of a given Type
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="type">The type of which to create a default for</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithObservableArray(Bifrost.CodeGeneration.JavaScript.Assignment)">
            <summary>
            Assign an observable array
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithObjectLiteral(Bifrost.CodeGeneration.JavaScript.Assignment,System.Action{Bifrost.CodeGeneration.JavaScript.ObjectLiteral})">
            <summary>
            Assign an object literal
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called to build the object literal</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AssignmentExtensions.WithEmptyArray(Bifrost.CodeGeneration.JavaScript.Assignment)">
            <summary>
            Assign an empty Array
            </summary>
            <param name="assignment"><see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to assign to</param>
            <returns>The <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/> to build on</returns>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.CodeGeneratorExtensions">
            <summary>
            Provides methods for working with the <see cref="T:Bifrost.CodeGeneration.ICodeGenerator"/>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.CodeGeneratorExtensions.Namespace(Bifrost.CodeGeneration.ICodeGenerator,System.String,System.Action{Bifrost.CodeGeneration.JavaScript.ObjectLiteral})">
            <summary>
            Start a Bifrost namespace
            </summary>
            <param name="generator"><see cref="T:Bifrost.CodeGeneration.ICodeGenerator"/> to create from</param>
            <param name="name">Name of namespace</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called to build the object literal for the namespace</param>
            <returns><see cref="M:Bifrost.CodeGeneration.JavaScript.CodeGeneratorExtensions.Namespace(Bifrost.CodeGeneration.ICodeGenerator,System.String,System.Action{Bifrost.CodeGeneration.JavaScript.ObjectLiteral})"/> that is built</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.CodeGeneratorExtensions.Global(Bifrost.CodeGeneration.ICodeGenerator)">
            <summary>
            Start a container for Global namespace
            </summary>
            <param name="generator"><see cref="T:Bifrost.CodeGeneration.ICodeGenerator"/> to create from</param>
            <returns><see cref="M:Bifrost.CodeGeneration.JavaScript.CodeGeneratorExtensions.Global(Bifrost.CodeGeneration.ICodeGenerator)"/> namespace to build from</returns>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Container">
            <summary>
            Represents the abstract of a container like <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> or <see cref="T:Bifrost.CodeGeneration.JavaScript.ObjectLiteral"/>
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.ContainerExtensions">
            <summary>
            Provides methods for working with <see cref="T:Bifrost.CodeGeneration.JavaScript.Container"/>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.ContainerExtensions.WithObservablePropertiesFrom(Bifrost.CodeGeneration.JavaScript.Container,System.Type,System.Type,System.Action{Bifrost.CodeGeneration.JavaScript.Assignment})">
            <summary>
            Adds properties as observables from a given type and optionally exluding properties from a given type that is found in the inheritance chain
            </summary>
            <param name="container"><see cref="T:Bifrost.CodeGeneration.JavaScript.Container"/> to add properties to</param>
            <param name="type"><see cref="T:System.Type"/> to get properties from</param>
            <param name="excludePropertiesFrom">Optional <see cref="T:System.Type"/> to use as basis for excluding properties</param>
            <param name="assignmentVisitor">Optional <see cref="T:System.Action`1">visitor</see> that gets called for every assignment for any property</param>
            <returns><see cref="T:Bifrost.CodeGeneration.JavaScript.Container"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.ContainerExtensions.WithPropertiesFrom(Bifrost.CodeGeneration.JavaScript.Container,System.Type,System.Type,System.Action{Bifrost.CodeGeneration.JavaScript.Assignment})">
            <summary>
            Adds properties from a given type and optionally exluding properties from a given type that is found in the inheritance chain
            </summary>
            <param name="container"><see cref="T:Bifrost.CodeGeneration.JavaScript.Container"/> to add properties to</param>
            <param name="type"><see cref="T:System.Type"/> to get properties from</param>
            <param name="excludePropertiesFrom">Optional <see cref="T:System.Type"/> to use as basis for excluding properties</param>
            <param name="assignmentVisitor">Optional <see cref="T:System.Action`1">visitor</see> that gets called for every assignment for any property</param>
            <returns><see cref="T:Bifrost.CodeGeneration.JavaScript.Container"/> to keep building on</returns>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.AccessorAssignment">
            <summary>
            Represents a accessor assignment
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.AccessorAssignment.#ctor(System.String,Bifrost.CodeGeneration.ILanguageElement)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.VariantAssignment"/>
            </summary>
            <param name="name">Name of the accessor</param>
            <param name="value"><see cref="T:Bifrost.CodeGeneration.ILanguageElement">value</see> to assign</param>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Global">
            <summary>
            Represents the global scope
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.FunctionBody">
            <summary>
            Represents a body of a <see cref="T:Bifrost.CodeGeneration.JavaScript.Function"/>
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Return">
            <summary>
            Represents a return statement
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.Return.#ctor(Bifrost.CodeGeneration.LanguageElement)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.Literal"/>
            </summary>
            <param name="returnValue"><see cref="T:Bifrost.CodeGeneration.LanguageElement"/> representing the content - the actual literal</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Return.ReturnValue">
            <summary>
            Gets or sets the representation of the literal
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Function">
            <summary>
            Represents a function
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.Function.#ctor(System.String[])">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.Function"/>
            </summary>
            <param name="parameters">Optional parameters for the function</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Function.Parameters">
            <summary>
            Gets or sets the parameters for the function
            </summary>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Function.Body">
            <summary>
            Gets the <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/>
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.FunctionCall">
            <summary>
            Represents a call to a function
            </summary>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.FunctionCall.Function">
            <summary>
            Gets or sets the name of the function to call
            </summary>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.FunctionCall.Parameters">
            <summary>
            Gets or sets the parameters
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.FunctionExtensions">
            <summary>
            Provides methods for working with <see cref="T:Bifrost.CodeGeneration.JavaScript.Function"/> and related objects
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.WithParameters(Bifrost.CodeGeneration.JavaScript.Function,System.String[])">
            <summary>
            Specify parameters for a function
            </summary>
            <param name="function"><see cref="T:Bifrost.CodeGeneration.JavaScript.Function"/> to specify for</param>
            <param name="parameters">Parameters for the function</param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.Function"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.Access(Bifrost.CodeGeneration.JavaScript.FunctionBody,System.String,System.Action{Bifrost.CodeGeneration.JavaScript.Accessor})">
            <summary>
            Add a accessor accessing an object
            </summary>
            <param name="functionBody"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to add to</param>
            <param name="name">Name of variant</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called for working with the <see cref="T:Bifrost.CodeGeneration.JavaScript.Accessor"/></param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.Property(Bifrost.CodeGeneration.JavaScript.FunctionBody,System.String,System.Action{Bifrost.CodeGeneration.JavaScript.PropertyAssignment})">
            <summary>
            Add a property to a <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/>
            </summary>
            <param name="functionBody"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to add to</param>
            <param name="name">Name of the property to add</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called for working with the <see cref="T:Bifrost.CodeGeneration.JavaScript.PropertyAssignment"/></param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.AssignAccessor(Bifrost.CodeGeneration.JavaScript.FunctionBody,System.String,System.Action{Bifrost.CodeGeneration.JavaScript.AccessorAssignment})">
            <summary>
            Add a <see cref="T:Bifrost.CodeGeneration.JavaScript.AccessorAssignment"/> to the <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/>
            </summary>
            <param name="functionBody"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to add to</param>
            <param name="name">Name of the property to add</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called for working with the <see cref="T:Bifrost.CodeGeneration.JavaScript.AccessorAssignment"/></param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.Variant(Bifrost.CodeGeneration.JavaScript.FunctionBody,System.String,System.Action{Bifrost.CodeGeneration.JavaScript.VariantAssignment})">
            <summary>
            Add a variant to a <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/>
            </summary>
            <param name="functionBody"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to add to</param>
            <param name="name">Name of variant</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called for working with the <see cref="T:Bifrost.CodeGeneration.JavaScript.VariantAssignment"/></param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.Scope(Bifrost.CodeGeneration.JavaScript.FunctionBody,System.String,System.Action{Bifrost.CodeGeneration.JavaScript.Scope})">
            <summary>
            Add a scope - such as "self", typically used together with an <see cref="T:Bifrost.CodeGeneration.JavaScript.Assignment"/>
            </summary>
            <param name="functionBody"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to add to</param>
            <param name="name">Name of the scope, e.g. "self"</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called for working with the <see cref="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.Scope(Bifrost.CodeGeneration.JavaScript.FunctionBody,System.String,System.Action{Bifrost.CodeGeneration.JavaScript.Scope})"/></param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.Return(Bifrost.CodeGeneration.JavaScript.FunctionBody,Bifrost.CodeGeneration.LanguageElement)">
            <summary>
            Add a return statement
            </summary>
            <param name="functionBody"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to add to</param>
            <param name="returnValue"><see cref="T:Bifrost.CodeGeneration.LanguageElement"/> representing the returnvalue</param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionBody"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.WithParameters(Bifrost.CodeGeneration.JavaScript.FunctionCall,System.String[])">
            <summary>
            Set the parameters for a <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/> based on strings
            </summary>
            <param name="functionCall"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/> to set for</param>
            <param name="parameters">Parameters to set</param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.WithParameters(Bifrost.CodeGeneration.JavaScript.FunctionCall,Bifrost.CodeGeneration.LanguageElement[])">
            <summary>
            Set the parameters for a <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/> 
            </summary>
            <param name="functionCall"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/> to set for</param>
            <param name="parameters">Parameters to set</param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/> to keep building on</returns>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.FunctionExtensions.WithName(Bifrost.CodeGeneration.JavaScript.FunctionCall,System.String)">
            <summary>
            Specify a name for the <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/>
            </summary>
            <param name="functionCall"><see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/> to set name for</param>
            <param name="name">Name of the <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/></param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.FunctionCall"/> to keep building on</returns>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.KeyAssignment">
            <summary>
            Represents an assignment of a key to an <see cref="T:Bifrost.CodeGeneration.JavaScript.ObjectLiteral"/>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.KeyAssignment.#ctor(System.String,Bifrost.CodeGeneration.ILanguageElement)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.KeyAssignment"/>
            </summary>
            <param name="key">Key to assign a value</param>
            <param name="value"><see cref="T:Bifrost.CodeGeneration.ILanguageElement"></see></param>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Literal">
            <summary>
            Represents a literal
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.Literal.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.Literal"/>
            </summary>
            <param name="content"><see cref="T:System.Object"/> representing the content - the actual literal</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Literal.Content">
            <summary>
            Gets or sets the representation of the literal
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Namespace">
            <summary>
            Represents a namespace, a Bifrost specific construct
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.Namespace.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.Namespace"/>
            </summary>
            <param name="name">Name of the namespace</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Namespace.Name">
            <summary>
            Gets or sets the name of the namespace
            </summary>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Namespace.Content">
            <summary>
            Gets the <see cref="T:Bifrost.CodeGeneration.JavaScript.ObjectLiteral"/> representing the content of the namespace
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.ObjectLiteral">
            <summary>
            Represents an object literal
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.PropertyAssignment">
            <summary>
            Represents an assignment of a property
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.PropertyAssignment.#ctor(System.String,Bifrost.CodeGeneration.ILanguageElement)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.PropertyAssignment"/>
            </summary>
            <param name="name">Name of property to assign</param>
            <param name="value"><see cref="T:Bifrost.CodeGeneration.ILanguageElement">value</see> to assign</param>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.Scope">
            <summary>
            Represents a scope, typically used when you want to assign something within a scope
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.Scope.#ctor(System.String)">
            <summary>
            Initializes a new instance of a <see cref="T:Bifrost.CodeGeneration.JavaScript.Scope"/>
            </summary>
            <param name="name">Name of scope</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.Scope.Name">
            <summary>
            Gets or sets the name of the scope
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.ScopeExtensions">
            <summary>
            Provide methods for working with <see cref="T:Bifrost.CodeGeneration.JavaScript.Scope"/>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.ScopeExtensions.FunctionCall(Bifrost.CodeGeneration.JavaScript.Scope,System.Action{Bifrost.CodeGeneration.JavaScript.FunctionCall})">
            <summary>
            Specify a <see cref="M:Bifrost.CodeGeneration.JavaScript.ScopeExtensions.FunctionCall(Bifrost.CodeGeneration.JavaScript.Scope,System.Action{Bifrost.CodeGeneration.JavaScript.FunctionCall})"/> for the <see cref="T:Bifrost.CodeGeneration.JavaScript.Scope"/>
            </summary>
            <param name="scope"><see cref="T:Bifrost.CodeGeneration.JavaScript.Scope"/> to specify for</param>
            <param name="callback"><see cref="T:System.Action`1"/> that gets called for setting up the <see cref="M:Bifrost.CodeGeneration.JavaScript.ScopeExtensions.FunctionCall(Bifrost.CodeGeneration.JavaScript.Scope,System.Action{Bifrost.CodeGeneration.JavaScript.FunctionCall})"/></param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.Scope"/> to keep building on</returns>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.This">
            <summary>
            Represents this
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.TypeExtension">
            <summary>
            Represents a Bifrost specific Type extension
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.TypeExtension.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.TypeExtension"/>
            </summary>
            <param name="superType">Super type that is being extended, default is "Bifrost.Type"</param>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.TypeExtension.SuperType">
            <summary>
            Gets or sets the type being extended
            </summary>
        </member>
        <member name="P:Bifrost.CodeGeneration.JavaScript.TypeExtension.Function">
            <summary>
            Gets the function representing the type
            </summary>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.TypeExtensionExtensions">
            <summary>
            Provides methods for working with <see cref="T:Bifrost.CodeGeneration.JavaScript.TypeExtension"/>
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.TypeExtensionExtensions.WithSuper(Bifrost.CodeGeneration.JavaScript.TypeExtension,System.String)">
            <summary>
            Specifiy the super type for the <see cref="T:Bifrost.CodeGeneration.JavaScript.TypeExtension"/>
            </summary>
            <param name="typeExtension"><see cref="T:Bifrost.CodeGeneration.JavaScript.TypeExtension"/> to set the super for</param>
            <param name="super">Super to set</param>
            <returns>Chained <see cref="T:Bifrost.CodeGeneration.JavaScript.TypeExtension"/> to keep building on</returns>
        </member>
        <member name="T:Bifrost.CodeGeneration.JavaScript.VariantAssignment">
            <summary>
            Represents a variant assignment
            </summary>
        </member>
        <member name="M:Bifrost.CodeGeneration.JavaScript.VariantAssignment.#ctor(System.String,Bifrost.CodeGeneration.ILanguageElement)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.CodeGeneration.JavaScript.VariantAssignment"/>
            </summary>
            <param name="name">Name of the variant</param>
            <param name="value"><see cref="T:Bifrost.CodeGeneration.ILanguageElement">value</see> to assign</param>
        </member>
        <member name="T:Bifrost.Commands.AmbiguousCommandException">
            <summary>
            The exception that is thrown if two commands have the same type name
            </summary>
        </member>
        <member name="M:Bifrost.Commands.AmbiguousCommandException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.AmbiguousCommandException"/>
            </summary>
            <param name="first">The existing command - first discovered</param>
            <param name="second">The second command discovered that has the same name</param>
        </member>
        <member name="T:Bifrost.Commands.Command">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommand"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommand">
            <summary>
            Defines the basic command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.ICommand.Id">
            <summary>
            Gets or sets the Id of the object the command will apply to
            </summary>
        </member>
        <member name="M:Bifrost.Commands.Command.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.Command"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.CommandContextFactory">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandContextFactory"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandContextFactory">
            <summary>
            Creates <see cref="!:IComamndContext"/> for <see cref="T:Bifrost.Commands.ICommand"/>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextFactory.Build(Bifrost.Commands.ICommand)">
            <summary>
            Creates an <see cref="T:Bifrost.Commands.ICommandContext"/> for a specific <see cref="T:Bifrost.Commands.ICommand"/>
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand"/> to create a context for.</param>
            <returns>An <see cref="T:Bifrost.Commands.ICommandContext"/> for the specified <see cref="T:Bifrost.Commands.ICommand"/></returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextFactory.Build(Bifrost.Sagas.ISaga,Bifrost.Commands.ICommand)">
            <summary>
            Creates an <see cref="T:Bifrost.Commands.ICommandContext"/> for a specific <see cref="T:Bifrost.Commands.ICommand"/> with the context of an <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> that the context is created in.</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand"/> to create a context for.</param>
            <returns>An <see cref="T:Bifrost.Commands.ICommandContext"/> for the specified <see cref="T:Bifrost.Commands.ICommand"/> in the specified <see cref="T:Bifrost.Sagas.ISaga"/> context</returns>
        </member>
        <member name="M:Bifrost.Commands.CommandContextFactory.#ctor(Bifrost.Events.IUncommittedEventStreamCoordinator,Bifrost.Sagas.ISagaLibrarian,Bifrost.Events.IProcessMethodInvoker,Bifrost.Execution.IExecutionContextManager,Bifrost.Events.IEventStore)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.CommandContextFactory">CommandContextFactory</see>
            </summary>
            <param name="uncommittedEventStreamCoordinator">A <see cref="T:Bifrost.Events.IUncommittedEventStreamCoordinator"/> to use for coordinator an <see cref="T:Bifrost.Events.UncommittedEventStream"/></param>
            <param name="sagaLibrarian">A <see cref="T:Bifrost.Sagas.ISagaLibrarian"/> for saving sagas to</param>
            <param name="processMethodInvoker">A <see cref="T:Bifrost.Events.IProcessMethodInvoker"/> for processing events</param>
            <param name="executionContextManager">A <see cref="T:Bifrost.Execution.IExecutionContextManager"/> for getting execution context from</param>
            <param name="eventStore">A <see cref="T:Bifrost.Events.IEventStore"/> that will receive any events generated</param>
        </member>
        <member name="T:Bifrost.Commands.CommandDescriptor">
            <summary>
            Represents a descriptor for a <see cref="T:Bifrost.Commands.ICommand"/>
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandDescriptor.Id">
            <summary>
            Gets or sets the Id of the command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandDescriptor.Name">
            <summary>
            Name of command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandDescriptor.Command">
            <summary>
            Command content
            </summary>
        </member>
        <member name="T:Bifrost.Commands.CommandSecurityTarget">
            <summary>
            Represents a specific <see cref="T:Bifrost.Security.ISecurityTarget"/> for <see cref="T:Bifrost.Commands.ICommand">commands</see>
            </summary>
        </member>
        <member name="T:Bifrost.Security.SecurityTarget">
            <summary>
            Represents a base class for any <see cref="T:Bifrost.Security.ISecurityTarget">security targets</see>
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurityTarget">
            <summary>
            Defines a <see cref="T:Bifrost.Security.ISecurityTarget"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.ISecurityTarget.AddSecurable(Bifrost.Security.ISecurable)">
            <summary>
            Add a <see cref="T:Bifrost.Security.ISecurable"/> 
            </summary>
            <param name="securable"><see cref="T:Bifrost.Security.ISecurityActor"/> to add</param>
        </member>
        <member name="M:Bifrost.Security.ISecurityTarget.CanAuthorize(System.Object)">
            <summary>
            Indicates whether this target can authorize the instance of this action
            </summary>
            <param name="actionToAuthorize">An instance of the action to authorize</param>
            <returns>True if the <see cref="T:Bifrost.Security.ISecurityTarget"/> can authorize this action, False otherwise</returns>
        </member>
        <member name="M:Bifrost.Security.ISecurityTarget.Authorize(System.Object)">
            <summary>
            Authorizes this <see cref="T:Bifrost.Security.ISecurityTarget"/> for the instance of the action
            </summary>
            <param name="actionToAuthorize">Instance of an action to be authorized</param>
            <returns>An <see cref="T:Bifrost.Security.AuthorizeTargetResult"/> that indicates if the action was authorized or not</returns>
        </member>
        <member name="P:Bifrost.Security.ISecurityTarget.Securables">
            <summary>
            Get all <see cref="T:Bifrost.Security.ISecurable">securables</see>
            </summary>
        </member>
        <member name="P:Bifrost.Security.ISecurityTarget.Description">
            <summary>
            Gets a description of the SecurityTarget.
            </summary>
        </member>
        <member name="M:Bifrost.Security.SecurityTarget.#ctor(System.String)">
            <summary>
            Instantiats an instance of <see cref="T:Bifrost.Security.SecurityTarget"/>
            </summary>
            <param name="description">A description for this <see cref="T:Bifrost.Security.SecurityTarget"/></param>
        </member>
        <member name="M:Bifrost.Commands.CommandSecurityTarget.#ctor">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Commands.CommandSecurityTarget"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.CommandSecurityExtensions">
            <summary>
            Extensions for building a security descriptor specific for <see cref="T:Bifrost.Commands.ICommand">commands</see>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandSecurityExtensions.Handling(Bifrost.Security.ISecurityDescriptorBuilder)">
            <summary>
            Add a <see cref="!:HandleCommandSecurityAction"/> to describe the handling of <see cref="T:Bifrost.Commands.ICommand">commands</see>
            </summary>
            <param name="descriptorBuilder"><see cref="T:Bifrost.Security.ISecurityDescriptorBuilder"/> to extend</param>
            <returns><see cref="!:HandleCommandSecurityAction"/> for describing the action</returns>
        </member>
        <member name="M:Bifrost.Commands.CommandSecurityExtensions.Commands(Bifrost.Commands.HandleCommand)">
            <summary>
            Add a <see cref="!:CommandSecurable"/> to the <see cref="!:HandleCommandSecurityAction"/>
            </summary>
            <returns><see cref="!:CommandSecurable"/></returns>
        </member>
        <member name="M:Bifrost.Commands.CommandSecurityExtensions.InNamespace(Bifrost.Commands.CommandSecurityTarget,System.String,System.Action{Bifrost.Security.NamespaceSecurable})">
            <summary>
            Add a <see cref="T:Bifrost.Security.NamespaceSecurable"/> to the <see cref="T:Bifrost.Commands.CommandSecurityTarget"/> for a given namespace
            </summary>
            <param name="target"><see cref="T:Bifrost.Commands.CommandSecurityTarget"/> to add to</param>
            <param name="namespace">Namespace to secure</param>
            <param name="continueWith">Callback for continuing the fluent interface</param>
            <returns><see cref="T:Bifrost.Security.NamespaceSecurable"/> for the specific namespace</returns>
        </member>
        <member name="M:Bifrost.Commands.CommandSecurityExtensions.InstanceOf``1(Bifrost.Commands.CommandSecurityTarget,System.Action{Bifrost.Security.TypeSecurable})">
            <summary>
            Add a <see cref="T:Bifrost.Security.TypeSecurable"/> to the <see cref="T:Bifrost.Commands.CommandSecurityTarget"/> for a given type
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Commands.ICommand"/> to secure</typeparam>
            <param name="target"><see cref="T:Bifrost.Commands.CommandSecurityTarget"/> to add to</param>
            <param name="continueWith">Callback for continuing the fluent interface</param>
            <returns><see cref="T:Bifrost.Security.TypeSecurable"/> for the specific type</returns>
        </member>
        <member name="T:Bifrost.Commands.CommandSecurityManager">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Commands.ICommandSecurityManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandSecurityManager">
            <summary>
            Defines a manager for dealing with security for <see cref="T:Bifrost.Commands.ICommand">commands</see>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandSecurityManager.Authorize(Bifrost.Commands.ICommand)">
            <summary>
            Decides wether or not in the current context wether or not we can handle a command
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand"/> to ask for</param>
            <returns>true if it is allowed to go on and be handler, false if not</returns>
        </member>
        <member name="M:Bifrost.Commands.CommandSecurityManager.#ctor(Bifrost.Security.ISecurityManager)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.CommandSecurityManager"/>
            </summary>
            <param name="securityManager"><see cref="T:Bifrost.Security.ISecurityManager"/> for forwarding requests related to security to</param>
        </member>
        <member name="T:Bifrost.Commands.ExpressionNotMethodCallException">
            <summary>
            The exception that is thrown when an expression is not a method call
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ExpressionNotMethodCallException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.ExpressionNotMethodCallException"/>
            </summary>
            <param name="message">Message with details for the exception</param>
        </member>
        <member name="T:Bifrost.Commands.HandleCommand">
            <summary>
            Represents a <see cref="T:Bifrost.Security.ISecurityAction"/> for handling <see cref="T:Bifrost.Commands.ICommand">commands</see>
            </summary>
        </member>
        <member name="T:Bifrost.Security.SecurityAction">
            <summary>
            Represents a base for any <see cref="T:Bifrost.Security.ISecurityAction"/>
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurityAction">
            <summary>
            Defines an action that is subject to security
            </summary>
        </member>
        <member name="M:Bifrost.Security.ISecurityAction.AddTarget(Bifrost.Security.ISecurityTarget)">
            <summary>
            Add a <see cref="T:Bifrost.Security.ISecurityTarget"/> 
            </summary>
            <param name="securityTarget"><see cref="T:Bifrost.Security.ISecurityTarget"/> to add</param>
        </member>
        <member name="M:Bifrost.Security.ISecurityAction.CanAuthorize(System.Object)">
            <summary>
            Indicates whether this action can authorize the instance of the action
            </summary>
            <param name="actionToAuthorize">An instance of the action to authorize</param>
            <returns>True if the <see cref="T:Bifrost.Security.ISecurityAction"/> can authorize this action, False otherwise</returns>
        </member>
        <member name="M:Bifrost.Security.ISecurityAction.Authorize(System.Object)">
            <summary>
            Authorizes this <see cref="T:Bifrost.Security.ISecurityAction"/> for the instance of the action
            </summary>
            <param name="actionToAuthorize">Instance of an action to be authorized</param>
            <returns>An <see cref="T:Bifrost.Security.AuthorizeActionResult"/> that indicates if the action was authorized or not</returns>
        </member>
        <member name="P:Bifrost.Security.ISecurityAction.Targets">
            <summary>
            Get all <see cref="!:ISecurityTargets">security targets</see>
            </summary>
        </member>
        <member name="P:Bifrost.Security.ISecurityAction.ActionType">
            <summary>
            Returns a string description of this <see cref="T:Bifrost.Security.ISecurityAction"/>
            </summary>
        </member>
        <member name="T:Bifrost.Concepts.ConceptAs`1">
            <summary>
            Expresses a Concept as a another type, usually a primitive such as Guid, Int or String
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bifrost.Concepts.ConceptAs`1.Value">
            <summary>
            The underlying primitive value of this concept
            </summary>
        </member>
        <member name="T:Bifrost.Concepts.ConceptExtensions">
            <summary>
            Provides extensions related to <see cref="T:System.Type">types</see> and others related to <see cref="T:Bifrost.Concepts.ConceptAs`1"/>
            </summary>
        </member>
        <member name="M:Bifrost.Concepts.ConceptExtensions.IsConcept(System.Type)">
            <summary>
            Check if a type is a concept or not
            </summary>
            <param name="objectType"><see cref="T:System.Type"/> to check</param>
            <returns>True if type is a concept, false if not</returns>
        </member>
        <member name="M:Bifrost.Concepts.ConceptExtensions.GetConceptValueType(System.Type)">
            <summary>
            Get the type of the value inside a <see cref="T:Bifrost.Concepts.ConceptAs`1"/>
            </summary>
            <param name="type"><see cref="T:System.Type"/> to get value type from</param>
            <returns>The type of the <see cref="T:Bifrost.Concepts.ConceptAs`1"/> value</returns>
        </member>
        <member name="T:Bifrost.Concepts.ConceptFactory">
            <summary>
            Factory to create an instance of an<see cref="!:ConceptAs"/> from the Type and Underlying value.
            </summary>
        </member>
        <member name="M:Bifrost.Concepts.ConceptFactory.CreateConceptInstance(System.Type,System.Object)">
            <summary>
            Creates an instance of a <see cref="!:ConceptAs"/> given the type and underlying value.
            </summary>
            <param name="type">Type of the ConceptAs to create</param>
            <param name="value">Value to give to this instance</param>
            <returns>An instance of a ConceptAs with the specified value</returns>
        </member>
        <member name="T:Bifrost.Concepts.Value`1">
            <summary>
            A base class for providing value object equality semantics.  A Value Object does not have an identity and its value comes from its properties.
            </summary>
            <typeparam name="T">The specific type to provide value object equality semantics to.</typeparam>
        </member>
        <member name="M:Bifrost.Concepts.Value`1.Equals(System.Object)">
            <summary>
            Checks for Equality between this instance and the obj
            </summary>
            <param name="obj">An istance of an object to check equality with</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Bifrost.Concepts.Value`1.GetHashCode">
            <summary>
            Gets a Hash Code to identify this instance
            </summary>
            <returns>Hashcode value</returns>
        </member>
        <member name="M:Bifrost.Concepts.Value`1.Equals(`0)">
            <summary>
            Checks for Equality between this instance and the Other
            </summary>
            <param name="other">Another instance of type T to check equality with</param>
            <returns>True if equal, false otherwise</returns>
        </member>
        <member name="M:Bifrost.Concepts.Value`1.op_Equality(Bifrost.Concepts.Value{`0},Bifrost.Concepts.Value{`0})">
            <summary>
            Equates two objects to check that they are equal
            </summary>
            <param name="x">First Value</param>
            <param name="y">Second value</param>
            <returns>True if the objects are equal, false is they are not</returns>
        </member>
        <member name="M:Bifrost.Concepts.Value`1.op_Inequality(Bifrost.Concepts.Value{`0},Bifrost.Concepts.Value{`0})">
            <summary>
            Equates two objects to check that they are not equal
            </summary>
            <param name="x">First Value</param>
            <param name="y">Second value</param>
            <returns>True if the objects are not equal, false is they are</returns>
        </member>
        <member name="M:Bifrost.Concepts.Value`1.ToString">
            <summary>
            Converts this Value into a string representation.
            </summary>
            <returns>A string containing each property name and its corresponding value</returns>
        </member>
        <member name="T:Bifrost.Concurrency.IScheduler">
            <summary>
            Defines a scheduler for scheduling operations
            </summary>
        </member>
        <member name="M:Bifrost.Concurrency.IScheduler.Start(System.Action,System.Action)">
            <summary>
            Start an <see cref="T:System.Action"/> on a seperate thread
            </summary>
            <param name="action"><see cref="T:System.Action"/> to perform</param>
            <param name="actionDone">Optional <see cref="T:System.Action"/> to call when it is done</param>
        </member>
        <member name="M:Bifrost.Concurrency.IScheduler.Start``1(System.Action{``0},``0,System.Action{``0})">
            <summary>
            Start an <see cref="T:System.Action`1"/> on a seperate thread with state passed along to the <see cref="T:System.Action`1"/>
            </summary>
            <param name="action"><see cref="T:System.Action`1"/> to perform</param>
            <param name="objectState">State to pass along to the action</param>
            <param name="actionDone">Optional <see cref="T:System.Action`1"/> to call when it is done</param>
        </member>
        <member name="M:Bifrost.Concurrency.IScheduler.Stop(System.Guid)">
            <summary>
            Stop a scheduled <see cref="T:System.Action"/>
            </summary>
            <param name="id"></param>
        </member>
        <member name="T:Bifrost.Concurrency.Scheduler">
            <summary>
            Represents a <see cref="T:Bifrost.Concurrency.IScheduler"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.AmbiguousContainerCreationException">
            <summary>
            The exception that is thrown when a ambiguous match is found when discovering implementations of <see cref="T:Bifrost.Configuration.ICanCreateContainer"/>
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.AmbiguousContainerCreationException.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Configuration.AmbiguousContainerCreationException"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.CallContextConfiguration">
            <summary>
            Represents the configuration for <see cref="T:Bifrost.Execution.ICallContext"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ICallContextConfiguration">
            <summary>
            Defines the configuration for call context
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IConfigurationElement">
            <summary>
            Interface for all configuration elements
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.IConfigurationElement.Initialize(Bifrost.Execution.IContainer)">
            <summary>
            Initialization of the deriving ConfigurationElement instance
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.ICallContextConfiguration.CallContextType">
            <summary>
            Gets or sets the type of <see cref="T:Bifrost.Execution.ICallContext"/> to use
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.CallContextConfiguration.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Configuration.CallContextConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ConfigurationStorageElement">
            <summary>
            Base class for configuration elements that require specifc storage
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IHaveStorage">
            <summary>
            Marker interface that to indicate the need of storage configuration
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IHaveStorage.EntityContextConfiguration">
            <summary>
            Gets or sets the entity context configuration
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationStorageElement.Initialize(Bifrost.Execution.IContainer)">
            <summary>
            Base method that initializes the connection on the entity context connection
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.ConfigurationStorageElement.EntityContextConfiguration">
            <summary>
            The specific EntityContextConfiguration type that will be bound against
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.CanCreateContainerNotFoundException">
            <summary>
            The exception that is thrown when a type is missing a default constructor and one is required
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.CanCreateContainerNotFoundException.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Configuration.CanCreateContainerNotFoundException"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.DefaultStorageConfiguration">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.IDefaultStorageConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IDefaultStorageConfiguration">
            <summary>
            Defines configuration for default storage
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ExecutionContextConfiguration">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.IExecutionContextConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IExecutionContextConfiguration">
            <summary>
            Defines the configuration related to <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.FrontendConfiguration">
            <summary>
            Represents an implementation of a <see cref="T:Bifrost.Configuration.IFrontendConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IFrontendConfiguration">
            <summary>
            Defines the frontend specific configuration
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IFrontendConfiguration.Target">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Configuration.IFrontendTargetConfiguration"/> to use for configuring the frontend
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ICanConfigure">
            <summary>
            Represents an interface for configuring Bifrost
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.ICanConfigure.Configure(Bifrost.Configuration.IConfigure)">
            <summary>
            Gets called when the application can configure Bifrost
            </summary>
            <param name="configure"><see cref="T:Bifrost.Configuration.IConfigure"/> to configure</param>
        </member>
        <member name="T:Bifrost.Configuration.ICanCreateContainer">
            <summary>
            Defines an interface that is used to create a container instance
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.ICanCreateContainer.CreateContainer">
            <summary>
            Creates an instance of the container that will be used throughout the application
            </summary>
            <returns>An instance of a <see cref="T:Bifrost.Execution.IContainer"/> implementation</returns>
        </member>
        <member name="T:Bifrost.Configuration.IFrontendTargetConfiguration">
            <summary>
            Defines the configuration element for a target frontend
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ISecurityConfiguration">
            <summary>
            Defines the configuration for security
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.ISecurityConfiguration.PrincipalResolverType">
            <summary>
            Gets or sets the resolver that is used to resolve the principal
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ITasksConfiguration">
            <summary>
            Defines the configuration for events
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.MissingDefaultConstructorException">
            <summary>
            The exception that is thrown when a type is missing a default constructor and one is required
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.MissingDefaultConstructorException.#ctor(System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Configuration.MissingDefaultConstructorException"/>
            </summary>
            <param name="type">The <see cref="T:System.Type"/> that is missing a constructor</param>
        </member>
        <member name="T:Bifrost.Configuration.SecurityConfiguration">
            <summary>
            Represents the configuration for security
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.SecurityConfiguration.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Bifrost.Configuration.SecurityConfiguration"/> 
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.TasksConfiguration">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.ITasksConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ViewsConfiguration">
            <summary>
            Represents an <see cref="T:Bifrost.Configuration.IViewsConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IViewsConfiguration">
            <summary>
            Defines the configuration for views
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IConfigure">
            <summary>
            Defines the configuration for Bifrost
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.IConfigure.Initialize">
            <summary>
            Initializes Bifrost after configuration
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Container">
            <summary>
            Gets the container that is used
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.SystemName">
            <summary>
            Gets or sets the name of the currently running system
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.EntryAssembly">
            <summary>
            Gets the entry assembly for the application
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Commands">
            <summary>
            Gets the configuration for commands
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Events">
            <summary>
            Gets the configuration for events.
            Supports specific storage
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Tasks">
            <summary>
            Gets the configuration for <see cref="T:Bifrost.Tasks.Task">Tasks</see>
            Supports specific storage
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Views">
            <summary>
            Gets the configuration for views
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.ConventionManager">
            <summary>
            Gets the convention manager for bindings
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Sagas">
            <summary>
            Gets the configuration for sagas
            Supports specific storage
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Serialization">
            <summary>
            Gets the configureation for serialization
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.DefaultStorage">
            <summary>
            Gets the configureation for the applications default storage
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Frontend">
            <summary>
            Gets the configuration for the frontend part of the application
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.CallContext">
            <summary>
            Gets the configuration for <see cref="T:Bifrost.Execution.ICallContext"/>
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.ExecutionContext">
            <summary>
            Gets the configuration for the <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Security">
            <summary>
            Gets the configuration for security
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.Culture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo">culture</see> to use in Bifrost
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.UICulture">
            <summary>
            Gets or sets the <see cref="T:System.Globalization.CultureInfo">UI culture</see> to use in Bifrost
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IConfigure.DefaultLifecycle">
            <summary>
            Gets or sets the default <see cref="!:BindingLifeCycle"/> for objects when created/managed by the <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ISagasConfiguration">
            <summary>
            Defines the configuration for sagas
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.ISagasConfiguration.LibrarianType">
            <summary>
            Gets or sets the type of librarian to use for sagas
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.SagasConfiguration">
            <summary>
            Represents a <see cref="T:Bifrost.Configuration.ISagasConfiguration"/> implementation
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.SagasConfiguration.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Configuration.SagasConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Dynamic.DynamicHelpers">
            <summary>
            Provides a set of extension methods for working with dynamic types
            </summary>
        </member>
        <member name="M:Bifrost.Dynamic.DynamicHelpers.Populate(System.Object,System.Object)">
            <summary>
            Populate a dynamic object, typically something like a <see cref="T:System.Dynamic.ExpandoObject"/>
            </summary>
            <param name="target">Target object that will receive all properties and values from source</param>
            <param name="source">Source object containing all properties with values - this can in fact be any type, including an anonymous one</param>
        </member>
        <member name="T:Bifrost.Events.AsynchronousUncommittedEventStreamCoordinator">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IUncommittedEventStreamCoordinator"/> that commits asynchronously
            </summary>
        </member>
        <member name="T:Bifrost.Events.IUncommittedEventStreamCoordinator">
            <summary>
            Defines a coordinator for dealing with <see cref="T:Bifrost.Events.UncommittedEventStream"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IUncommittedEventStreamCoordinator.Commit(Bifrost.Events.UncommittedEventStream)">
            <summary>
            Commit a <see cref="T:Bifrost.Events.UncommittedEventStream"/>
            </summary>
            <param name="eventStream"><see cref="T:Bifrost.Events.UncommittedEventStream"/> to commit</param>
        </member>
        <member name="M:Bifrost.Events.AsynchronousUncommittedEventStreamCoordinator.#ctor(Bifrost.Events.UncommittedEventStreamCoordinator,Bifrost.Concurrency.IScheduler)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.AsynchronousUncommittedEventStreamCoordinator"/>
            </summary>
            <param name="actualCoordinator">The actual <see cref="T:Bifrost.Events.UncommittedEventStreamCoordinator"/> to be used</param>
            <param name="scheduler"><see cref="T:Bifrost.Concurrency.IScheduler"/> to use for scheduling asynchronous tasks</param>
        </member>
        <member name="T:Bifrost.Events.EventExtensions">
            <summary>
            Extensions for an enumerable of <see cref="T:Bifrost.Events.IEvent">Events</see> 
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventExtensions.MarkEventsWithCommandDetails(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent},Bifrost.Commands.ICommand)">
            <summary>
            Populates each <see cref="T:Bifrost.Events.IEvent">Event</see> with the name of the command that caused the event.
            </summary>
            <param name="events">Enumerable of <see cref="T:Bifrost.Events.IEvent">events</see> to be extended</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command</see> that caused the events to be generated</param>
        </member>
        <member name="M:Bifrost.Events.EventExtensions.ExpandExecutionContext(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent},Bifrost.Execution.IExecutionContext)">
            <summary>
            Populates each <see cref="T:Bifrost.Events.IEvent">Event</see> with elements from the <see cref="T:Bifrost.Execution.IExecutionContext">ExecutionContext</see>
            </summary>
            <param name="events">Enumerable of <see cref="T:Bifrost.Events.IEvent">events</see> to be extended</param>
            <param name="executionContext"><see cref="T:Bifrost.Execution.IExecutionContext">Execution Context</see> under which the <see cref="T:Bifrost.Events.IEvent">events</see> were generated</param>
        </member>
        <member name="T:Bifrost.Events.EventStoreChangeManager">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventStoreChangeManager">EventStoreChangeManager</see>
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventStoreChangeManager">
            <summary>
            Defines a manager for notifying changes to registered notifiers
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventStoreChangeManager.Register(System.Type)">
            <summary>
            Register a <see cref="T:Bifrost.Events.IEventStoreChangeNotifier"/> that can be notified when changes occur in an event store
            </summary>
            <param name="type">Type of notifier to register, it must however implement the <see cref="T:Bifrost.Events.IEventStoreChangeNotifier"/> interface</param>
        </member>
        <member name="M:Bifrost.Events.IEventStoreChangeManager.NotifyChanges(Bifrost.Events.IEventStore,Bifrost.Events.EventStream)">
            <summary>
            Notify changes for a given <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventStoreChangeManager.#ctor(Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventStoreChangeManager">EventStoreChangeManager</see>
            </summary>
            <param name="container">An instance of the <see cref="T:Bifrost.Execution.IContainer">Container</see> for dependency resolution</param>
        </member>
        <member name="T:Bifrost.Events.EventSubscription">
            <summary>
            Represents a subscription for a specific <see cref="T:Bifrost.Events.IProcessEvents"/> and method on it that can receive a method
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSubscription.ShouldProcess(Bifrost.Events.IEvent)">
            <summary>
            Check wether or not subscription should process the event
            </summary>
            <param name="event">Event to check</param>
            <returns>True if it should process, false if not</returns>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.Id">
            <summary>
            Gets or sets the id of the <see cref="T:Bifrost.Events.EventSubscription"/>
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.Owner">
            <summary>
            Gets or sets the owner of the subscriber method that subscribes to the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.Method">
            <summary>
            Gets or sets the method that is subscribing to the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.EventType">
            <summary>
            Gets or sets the actual event type that the subscriber handles
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.EventName">
            <summary>
            Gets or sets the actual event name that the subscriber handles
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscription.LastEventId">
            <summary>
            Gets or sets the last event id the subscriber has processed
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSubscriptionManager">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Events.IEventSubscriptionManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventSubscriptionManager">
            <summary>
            Defines a manager for dealing with <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.GetAllSubscriptions">
            <summary>
            Get all <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see>
            </summary>
            <returns>All available <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see></returns>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.GetAvailableSubscriptions">
            <summary>
            Get all available <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see>
            </summary>
            <returns>All available <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see></returns>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.Process(Bifrost.Events.EventSubscription,System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Process a set of <see cref="T:Bifrost.Events.IEvent">Events</see> for a specific subscription
            </summary>
            <param name="subscription"><see cref="T:Bifrost.Events.EventSubscription"/> to process events for</param>
            <param name="events"><see cref="T:Bifrost.Events.IEvent">Events</see> to process</param>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.Process(Bifrost.Events.EventSubscription,Bifrost.Events.IEvent)">
            <summary>
            Process a single <see cref="T:Bifrost.Events.IEvent"/> for a specific subscription
            </summary>
            <param name="subscription"><see cref="T:Bifrost.Events.EventSubscription"/> to process event for</param>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> to process</param>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.Process(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Process a set of <see cref="T:Bifrost.Events.IEvent">Events</see>
            </summary>
            <param name="events"><see cref="T:Bifrost.Events.IEvent">Events</see> to process</param>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptionManager.Process(Bifrost.Events.IEvent)">
            <summary>
            Process a single <see cref="T:Bifrost.Events.IEvent"/>
            </summary>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> to process</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriptionManager.#ctor(Bifrost.Events.IEventSubscriptions,Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer,Bifrost.Globalization.ILocalizer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventSubscriptionManager"/>
            </summary>
            <param name="subscriptions">A <see cref="T:Bifrost.Events.IEventSubscriptions"/> that will be used to maintain subscriptions from a datasource</param>
            <param name="typeDiscoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer"/> for discovering <see cref="T:Bifrost.Events.IProcessEvents"/>s in current process</param>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> for creating instances of objects/services</param>
            <param name="localizer">A <see cref="T:Bifrost.Globalization.ILocalizer"/> for controlling localization while executing subscriptions</param>
        </member>
        <member name="T:Bifrost.Events.IEventStoreChangeListener">
            <summary>
            Defines a listener for changes occuring on a <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventStoreChangeNotifier">
            <summary>
            Defines a notifier for notifying when changes occur on an <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventStoreChangeNotifier.Notify(Bifrost.Events.IEventStore,Bifrost.Events.EventStream)">
            <summary>
            Notify changes for a <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
            <param name="eventStore"><see cref="T:Bifrost.Events.IEventStore"/> to notify for</param>
            <param name="streamOfEvents"><see cref="T:Bifrost.Events.EventStream"/> with events to notify for</param>
        </member>
        <member name="T:Bifrost.Events.IEventSubscriptions">
            <summary>
            Defines a system for working with <see cref="!:IEventSubscription">Event Subscriptions</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptions.GetAll">
            <summary>
            Get all subscriptions available
            </summary>
            <returns>All available <see cref="T:Bifrost.Events.EventSubscription">EventSubscriptions</see> </returns>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptions.Save(Bifrost.Events.EventSubscription)">
            <summary>
            Save the state of an event subscription
            </summary>
            <param name="subscription"><see cref="T:Bifrost.Events.EventSubscription"/> to save</param>
        </member>
        <member name="M:Bifrost.Events.IEventSubscriptions.ResetLastEventForAllSubscriptions">
            <summary>
            Reset last event id for all subscriptions
            </summary>
        </member>
        <member name="T:Bifrost.Events.InvalidFastForwardException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Events.IEventSource">EventSource</see> is stateful 
            but there has been an attempt to retrieve it without restoring state by replaying events (fast-forwarding)
            </summary>
        </member>
        <member name="M:Bifrost.Events.InvalidFastForwardException.#ctor">
            <summary>
            Initializes an <see cref="T:Bifrost.Events.InvalidFastForwardException">InvalidFastForwardException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.InvalidFastForwardException.#ctor(System.String)">
            <summary>
            Initializes an <see cref="T:Bifrost.Events.InvalidFastForwardException">InvalidFastForwardException</see>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.InvalidFastForwardException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an <see cref="T:Bifrost.Events.InvalidFastForwardException">InvalidFastForwardException</see>
            </summary>
            <param name="message">Error Message</param>
            <param name="inner">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.InvalidFastForwardException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an <see cref="T:Bifrost.Events.InvalidFastForwardException">InvalidFastForwardException</see> for serialization
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Events.IProcessMethodInvoker">
            <summary>
            Defines an invoker for handle methods - it should recognize methods called Handle and be able to 
            call them
            </summary>
            <remarks>
            This is a convention were a type implementing methods called Handle taking specific commands in.
            </remarks>
        </member>
        <member name="M:Bifrost.Events.IProcessMethodInvoker.TryProcess(System.Object,Bifrost.Events.IEvent)">
            <summary>
            Try to call handle method for a specific command
            </summary>
            <param name="instance">Instance to try to call Handle method on</param>
            <param name="event">The <see cref="T:Bifrost.Events.IEvent"/> that the Process method should take</param>
            <returns>True if it called the Handle method, false if not</returns>
        </member>
        <member name="M:Bifrost.Events.IProcessMethodInvoker.Register(System.Type)">
            <summary>
            Register a type that should have Handle method(s) in it
            </summary>
            <param name="typeWithProcessMethods">Type to register</param>
        </member>
        <member name="T:Bifrost.Events.NullEventStore">
            <summary>
            Represents a null implementation of <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEventStore">
            <summary>
            Defines a repository that holds events generated
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventStore.GetForEventSource(Bifrost.Events.EventSource,System.Guid)">
            <summary>
            Get a <see cref="T:Bifrost.Events.CommittedEventStream"/> with events for specific given <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.EventSource"/> to get <see cref="T:Bifrost.Events.IEvent">events</see> for</param>
            <param name="eventSourceId"><see cref="T:System.Guid">Id</see> of the specific <see cref="T:Bifrost.Events.EventSource"/></param>
            <returns>All events for the aggregated root in an Event Stream</returns>
        </member>
        <member name="M:Bifrost.Events.IEventStore.Commit(Bifrost.Events.UncommittedEventStream)">
            <summary>
            Save events for a specific aggregated root
            </summary>
            <param name="eventsToSave"><see cref="T:Bifrost.Events.UncommittedEventStream"></see><see cref="T:Bifrost.Events.IEvent"/> to save as an Event Stream</param>
            <returns>The <see cref="T:Bifrost.Events.CommittedEventStream"/> with all the events that was committed with their updated Ids</returns>
        </member>
        <member name="M:Bifrost.Events.IEventStore.GetLastCommittedVersion(Bifrost.Events.EventSource,System.Guid)">
            <summary>
            Returns the last committed <see cref="T:Bifrost.Events.EventSourceVersion">Event Source Version</see> for the <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.EventSource"/> to get <see cref="T:Bifrost.Events.EventSourceVersion">version</see> for</param>
            <param name="eventSourceId"><see cref="T:System.Guid">Id</see> of the specific <see cref="T:Bifrost.Events.EventSource"/></param>
            <returns>The last committed <see cref="T:Bifrost.Events.EventSourceVersion">version</see></returns>
        </member>
        <member name="M:Bifrost.Events.IEventStore.GetBatch(System.Int32,System.Int32)">
            <summary>
            Get a batch of <see cref="T:Bifrost.Events.IEvent">events</see> in the form of a 
            <see cref="T:Bifrost.Events.CommittedEventStream">stream of events</see> 
            </summary>
            <param name="batchesToSkip">Number of batches to skip</param>
            <param name="batchSize">Size of each batch</param>
            <returns>A batch of <see cref="T:Bifrost.Events.IEvent">events</see></returns>
        </member>
        <member name="M:Bifrost.Events.IEventStore.GetAll">
            <summary>
            Get all <see cref="T:Bifrost.Events.IEvent">events</see> in the <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
            <returns>A collection of <see cref="T:Bifrost.Events.IEvent">events</see></returns>
        </member>
        <member name="T:Bifrost.Events.NullEventSubscriptions">
            <summary>
            Represents a null implementation of <see cref="T:Bifrost.Events.IEventSubscriptions"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.NullUncommittedEventStreamCoordinator">
            <summary>
            A null implementation for <see cref="T:Bifrost.Events.IUncommittedEventStreamCoordinator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.ProcessMethodInvoker">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Events.IProcessMethodInvoker"/>
            </summary>
        </member>
        <member name="F:Bifrost.Events.ProcessMethodInvoker.ProcessMethodName">
            <summary>
            Name of method that any event subscriber needs to be called in order to be recognized by the convention
            </summary>
        </member>
        <member name="T:Bifrost.Events.UncommittedEventStreamCoordinator">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IUncommittedEventStreamCoordinator"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.UncommittedEventStreamCoordinator.#ctor(Bifrost.Events.IEventStore,Bifrost.Events.IEventStoreChangeManager,Bifrost.Events.IEventSubscriptionManager)">
            <summary>
            Initializes an instance of a <see cref="T:Bifrost.Events.UncommittedEventStreamCoordinator"/>
            </summary>
            <param name="eventStore"><see cref="T:Bifrost.Events.IEventStore"/> to use for saving the events</param>
            <param name="eventStoreChangeManager"><see cref="T:Bifrost.Events.IEventStoreChangeManager"/> to notify about changes</param>
            <param name="eventSubscriptionManager"><see cref="T:Bifrost.Events.IEventSubscriptionManager"/> to process subscriptions</param>
        </member>
        <member name="T:Bifrost.Execution.AssemblyComparer">
            <summary>
            Represents a comparer for comparing assemblies, typically used in Distinct() 
            </summary>
        </member>
        <member name="T:Bifrost.Execution.DefaultCallContext">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.ICallContext"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.ICallContext">
            <summary>
            Defines a thread safe context for the current callpath
            </summary>
        </member>
        <member name="M:Bifrost.Execution.ICallContext.HasData(System.String)">
            <summary>
            Check if data exists for a given key
            </summary>
            <param name="key">Key to check if data exists for</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="M:Bifrost.Execution.ICallContext.GetData``1(System.String)">
            <summary>
            Get data with a specific key
            </summary>
            <typeparam name="T">Type of data you're getting</typeparam>
            <param name="key">Key representing the data</param>
            <returns>An instance of the data, if any</returns>
        </member>
        <member name="M:Bifrost.Execution.ICallContext.SetData(System.String,System.Object)">
            <summary>
            Set data for a given key
            </summary>
            <param name="key">Key to set for</param>
            <param name="data">Data to set</param>
        </member>
        <member name="T:Bifrost.Execution.ExecutionContext">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IExecutionContext">
            <summary>
            Defines the execution context in which things are within
            For instance, any commands coming into the system will be in the context of an execution context
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContext.Principal">
            <summary>
            Gets the <see cref="T:System.Security.Principal.IPrincipal"/> for the execution context
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContext.Culture">
            <summary>
            Gets the <see cref="T:System.Globalization.CultureInfo"/> for the execution context
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContext.System">
            <summary>
            Gets the string identifying the currently executing system
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContext.Tenant">
            <summary>
            Gets the tenant for the current execution context
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContext.Details">
            <summary>
            Gets the details for the execution context
            </summary>
            <remarks>
            This object is a write once object, meaning that you can't write to it at will.
            It can be populated by implementing a <see cref="T:Bifrost.Execution.ICanPopulateExecutionContextDetails"/>
            </remarks>
        </member>
        <member name="M:Bifrost.Execution.ExecutionContext.#ctor(System.Security.Principal.IPrincipal,System.Globalization.CultureInfo,Bifrost.Execution.ExecutionContextPopulator,System.String)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Execution.ExecutionContext"/>
            </summary>
            <param name="principal"><see cref="T:System.Security.Principal.IPrincipal"/> to populate with</param>
            <param name="cultureInfo"><see cref="T:System.Globalization.CultureInfo"/> for the <see cref="T:Bifrost.Execution.ExecutionContext"/></param>
            <param name="detailsPopulator">Callback that gets called for populating the details of the <see cref="T:Bifrost.Execution.ExecutionContext"/></param>
            <param name="system">Name of the system that is running</param>
        </member>
        <member name="T:Bifrost.Execution.ExecutionContextDetailsPopulator">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IExecutionContextDetailsPopulator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IExecutionContextDetailsPopulator">
            <summary>
            Defines a system for populating a <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IExecutionContextDetailsPopulator.Populate(Bifrost.Execution.IExecutionContext,System.Object)">
            <summary>
            Populate <see cref="T:Bifrost.Execution.IExecutionContext"/> and its details
            </summary>
            <param name="executionContext"><see cref="T:Bifrost.Execution.IExecutionContext"/> that is populated</param>
            <param name="details">Details for the <see cref="T:Bifrost.Execution.IExecutionContext"/> to populate</param>
        </member>
        <member name="M:Bifrost.Execution.ExecutionContextDetailsPopulator.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Execution.ExecutionContextDetailsPopulator"/>
            </summary>
            <param name="typeDiscoverer"><see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to use for discovering implementations of <see cref="T:Bifrost.Execution.ICanPopulateExecutionContextDetails"/></param>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to use for instantiating types</param>
        </member>
        <member name="T:Bifrost.Execution.ExecutionContextFactory">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IExecutionContextFactory"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IExecutionContextFactory">
            <summary>
            Defines a factory for creating <see cref="T:Bifrost.Execution.IExecutionContext"/> instances
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IExecutionContextFactory.Create">
            <summary>
            Create a new <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
            <returns>A <see cref="T:Bifrost.Execution.IExecutionContext"/></returns>
        </member>
        <member name="M:Bifrost.Execution.ExecutionContextFactory.#ctor(Bifrost.Security.ICanResolvePrincipal,Bifrost.Execution.IExecutionContextDetailsPopulator,Bifrost.Configuration.IConfigure,Bifrost.Tenancy.ITenantManager)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.ExecutionContextFactory"/>
            </summary>
            <param name="principalResolver"><see cref="T:Bifrost.Security.ICanResolvePrincipal"/> for resolving the identity</param>
            <param name="detailsPopulator">A <see cref="T:Bifrost.Execution.IExecutionContextDetailsPopulator"/> to use for populating any <see cref="T:Bifrost.Execution.IExecutionContext"/> being created</param>
            <param name="configure">A <see cref="T:Bifrost.Configuration.IConfigure"/> instance holding all configuration</param>
            <param name="tenantManager">A <see cref="T:Bifrost.Tenancy.ITenantManager"/> to get <see cref="T:Bifrost.Tenancy.ITenant">tenants</see> from</param>
        </member>
        <member name="T:Bifrost.Execution.ExecutionContextManager">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IExecutionContextManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IExecutionContextManager">
            <summary>
            Defines a manager for managing <see cref="T:Bifrost.Execution.IExecutionContext">ExecutionContexts</see>
            </summary>
        </member>
        <member name="P:Bifrost.Execution.IExecutionContextManager.Current">
            <summary>
            Get the current <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
        </member>
        <member name="F:Bifrost.Execution.ExecutionContextManager.ExecutionContextKey">
            <summary>
            Key identifying the current <see cref="!:IExectionContext"/> in a <see cref="T:Bifrost.Execution.ICallContext"/>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.ExecutionContextManager.#ctor(Bifrost.Execution.IExecutionContextFactory,Bifrost.Execution.ICallContext)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.ExecutionContextManager"/>
            </summary>
            <param name="executionContextFactory"><see cref="T:Bifrost.Execution.IExecutionContextFactory"/> for creating <see cref="T:Bifrost.Execution.IExecutionContext">Exection Contexts</see></param>
            <param name="callContext"><see cref="T:Bifrost.Execution.ICallContext"/> to use for key/value store for holding current <see cref="T:Bifrost.Execution.IExecutionContext"/></param>
        </member>
        <member name="T:Bifrost.Execution.ExecutionContextPopulator">
            <summary>
            Represents the method that gets called when an <see cref="T:Bifrost.Execution.IExecutionContext"/> can be populated
            </summary>
            <param name="context"></param>
            <param name="details"></param>
        </member>
        <member name="T:Bifrost.Execution.HashCodeHelper">
            <summary>
            Provides useful methods for dealing with HashCodes
            </summary>
        </member>
        <member name="M:Bifrost.Execution.HashCodeHelper.Generate(System.Object[])">
            <summary>
            Encapsulates an algorithm for generating a hashcode from a series of parameters
            </summary>
            <param name="parameters">Properties to generate the HashCode from.</param>
            <returns>Hash Code</returns>
        </member>
        <member name="T:Bifrost.Execution.ICanPopulateExecutionContextDetails">
            <summary>
            Defines a visitor that takes part in populating all the details for the <see cref="T:Bifrost.Execution.IExecutionContext"/>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.ICanPopulateExecutionContextDetails.Populate(Bifrost.Execution.IExecutionContext,System.Object)">
            <summary>
            Method that gets called when the <see cref="T:Bifrost.Execution.IExecutionContext"/> is being set up
            </summary>
            <param name="executionContext"><see cref="T:Bifrost.Execution.IExecutionContext"/> that is populated</param>
            <param name="details">Details for the <see cref="T:Bifrost.Execution.IExecutionContext"/> to populate</param>
        </member>
        <member name="T:Bifrost.Execution.IgnoreDefaultConventionAttribute">
            <summary>
            Indicates that a class is Singleton and should be treated as such
            for any factory creating an instance of a class marked with this
            </summary>
        </member>
        <member name="T:Bifrost.Execution.ReadOnlyObjectException">
            <summary>
            The exception that is thrown when an object is read only and one is writing to it
            </summary>
        </member>
        <member name="T:Bifrost.Execution.WriteOnceExpandoObject">
            <summary>
            Represents an ExpandoObject that can only have values assigned to during creation.
            Similar to <see cref="T:System.Dynamic.ExpandoObject"/>, members are dynamic and can be added on the fly
            </summary>
        </member>
        <member name="M:Bifrost.Execution.WriteOnceExpandoObject.#ctor(System.Action{System.Object})">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.WriteOnceExpandoObject"/>
            </summary>
            <param name="populate">Action that gets called during creation for populate the object</param>
        </member>
        <member name="T:Bifrost.Extensions.CollectionsExtensions">
            <summary>
            Provides a set of extension methods for different collection and enumerable types
            </summary>
        </member>
        <member name="M:Bifrost.Extensions.CollectionsExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Enumerate an enumerable and call the given Action for each item
            </summary>
            <typeparam name="T">Item type</typeparam>
            <param name="enumerable"><see cref="T:System.Collections.Generic.IEnumerable`1"/> to enumerate</param>
            <param name="action"><see cref="T:System.Action`1"/> to call for each item</param>
        </member>
        <member name="T:Bifrost.Extensions.ITypeInfo">
            <summary>
            Defines information for types
            </summary>
        </member>
        <member name="P:Bifrost.Extensions.ITypeInfo.HasDefaultConstructor">
            <summary>
            Gets a boolean indicating wether or not the type has a default constructor that takes no arguments
            </summary>
        </member>
        <member name="T:Bifrost.Extensions.StringExtensions">
            <summary>
            Provides a set of extension methods to <see cref="T:System.String"/>
            </summary>
        </member>
        <member name="M:Bifrost.Extensions.StringExtensions.ToCamelCase(System.String)">
            <summary>
            Convert a string into a camel cased string
            </summary>
            <param name="str">string to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Bifrost.Extensions.StringExtensions.ToPascalCase(System.String)">
            <summary>
            Convert a string into a pascal cased string
            </summary>
            <param name="str">string to convert</param>
            <returns>Converted string</returns>
        </member>
        <member name="M:Bifrost.Extensions.StringExtensions.ParseTo(System.String,System.Type)">
            <summary>
            Convert a string into the desired type
            </summary>
            <param name="input">the string to parse</param>
            <param name="type">the desired type</param>
            <returns>value as the desired type</returns>
        </member>
        <member name="T:Bifrost.Extensions.TypeInfo`1">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Extensions.ITypeInfo"/>
            </summary>
            <typeparam name="T">Type it holds info for</typeparam>
        </member>
        <member name="F:Bifrost.Extensions.TypeInfo`1.Instance">
            <summary>
            Gets a singleton instance of the TypeInfo
            </summary>
        </member>
        <member name="T:Bifrost.Principal.CurrentPrincipal">
            <summary>
            Represents the current principal.
            Thread.CurrentPrincipal substituted for explicit Principal for testing purposes.
            </summary>
        </member>
        <member name="F:Bifrost.Principal.CurrentPrincipal.MinimumTime">
            <summary>
            Gets the minimum time supported by the <see cref="!:SystemClock"/>
            </summary>
        </member>
        <member name="M:Bifrost.Principal.CurrentPrincipal.Get">
            <summary>
            Retrieves the current principal
            </summary>
            <returns>Principal</returns>
        </member>
        <member name="M:Bifrost.Principal.CurrentPrincipal.SetPrincipalTo(System.Security.Principal.IPrincipal)">
            <summary>
            Allows the current principal to be set to an explicit value.  SOLELY FOR TESTING PURPOSES.
            Use within a "using" block within your spec so that the current principal is reset on exiting..
            </summary>
            <param name="principal">The explicit principal that you wish to set within the spec</param>
            <returns>A new instance of  CurrentPrincipal </returns>
        </member>
        <member name="M:Bifrost.Principal.CurrentPrincipal.Dispose">
            <summary>
            Will remove any explicitly set current time,
            </summary>
        </member>
        <member name="T:Bifrost.Read.IQueryFor`1">
            <summary>
            Defines a query for a specified type, typically a ReadModel
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:Bifrost.Read.IQueryFor`1.Query">
            <summary>
            Gets the query that will be executed
            </summary>
        </member>
        <member name="T:Bifrost.Read.IReadModelOf`1">
            <summary>
            Defines a way of retrieving single <see cref="T:Bifrost.Read.IReadModel"/>
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Read.IReadModel"/> it retrieves</typeparam>
        </member>
        <member name="M:Bifrost.Read.IReadModelOf`1.InstanceMatching(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}}[])">
            <summary>
            Filter by properties
            </summary>
            <param name="propertyExpressions">Property filter expressions to use</param>
            <returns>An instance or default / null of the <see cref="T:Bifrost.Read.IReadModel"/>, throws an exception if there is not a unique match</returns>
        </member>
        <member name="T:Bifrost.Read.ReadModelOf`1">
            <summary>
            Represents an implementation of <see cref="!:IReadModel&lt;T&gt;"/> for dealing with fetching of single <see cref="T:Bifrost.Read.IReadModel"/> instances
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Read.IReadModel"/></typeparam>
        </member>
        <member name="M:Bifrost.Read.ReadModelOf`1.#ctor(Bifrost.Read.IReadModelRepositoryFor{`0})">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Read.ReadModelOf`1"/>
            </summary>
            <param name="repository">Repository to use getting instances</param>
        </member>
        <member name="T:Bifrost.Read.ReadModelRepositoryFor`1">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Read.IReadModelRepositoryFor`1"/>
            </summary>
            <typeparam name="T">Type of ReadModel the repository represents</typeparam>
        </member>
        <member name="T:Bifrost.Read.IReadModelRepositoryFor`1">
            <summary>
            Defines a repository for dealing with ReadModels
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bifrost.Read.IReadModelRepositoryFor`1.Insert(`0)">
            <summary>
            Insert a newly created <see cref="T:Bifrost.Read.IReadModel"/>
            </summary>
            <param name="readModel"><see cref="T:Bifrost.Read.IReadModel"/> to insert</param>
        </member>
        <member name="M:Bifrost.Read.IReadModelRepositoryFor`1.Update(`0)">
            <summary>
            Update an existing <see cref="T:Bifrost.Read.IReadModel"/>
            </summary>
            <param name="readModel"><see cref="T:Bifrost.Read.IReadModel"/> to update</param>
        </member>
        <member name="M:Bifrost.Read.IReadModelRepositoryFor`1.Delete(`0)">
            <summary>
            Delete an existing <see cref="T:Bifrost.Read.IReadModel"/>
            </summary>
            <param name="readModel"><see cref="T:Bifrost.Read.IReadModel"/> to delete</param>
        </member>
        <member name="M:Bifrost.Read.IReadModelRepositoryFor`1.GetById(System.Object)">
            <summary>
            Get a <see cref="T:Bifrost.Read.IReadModel"/> by its id
            </summary>
            <param name="id">Id to lookup</param>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Read.IReadModelRepositoryFor`1.Query">
            <summary>
            Gets a queryable to use for querying
            </summary>
        </member>
        <member name="M:Bifrost.Read.ReadModelRepositoryFor`1.#ctor(Bifrost.Entities.IEntityContext{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Read.ReadModelRepositoryFor`1"/>
            </summary>
            <param name="entityContext"><see cref="T:Bifrost.Entities.IEntityContext`1"/> used by the repository</param>
        </member>
        <member name="T:Bifrost.Rules.And`1">
            <summary>
            Composes a rule that will be satisfied if both the first rule and the second rule are satisfied
            </summary>
            <typeparam name="T">Type that the rule is to be evaluated for.</typeparam>
            <remarks>Based on http://bloggingabout.net/blogs/dries/archive/2011/09/29/specification-pattern-continued.aspx </remarks>
        </member>
        <member name="T:Bifrost.Rules.Rule`1">
            <summary>
            Base class for expressing a complex rule in code.  Utilising the Specification pattern. 
            </summary>
            <typeparam name="T">Type that the rule applies to</typeparam>
            <remarks>Based on http://bloggingabout.net/blogs/dries/archive/2011/09/29/specification-pattern-continued.aspx 
            </remarks>
        </member>
        <member name="F:Bifrost.Rules.Rule`1.evalCompiled">
            <summary>
            Compiled predicate for use against an instance
            </summary>
        </member>
        <member name="F:Bifrost.Rules.Rule`1.evalExpression">
            <summary>
            Predicate as an expression for use against IQueryable collection
            </summary>
        </member>
        <member name="M:Bifrost.Rules.Rule`1.IsSatisfiedBy(`0)">
            <summary>
            Evalutes the rule against a single instance of type T.
            </summary>
            <param name="instance">The instance to evaluation the rule against.</param>
            <returns>true if the rule is satisfied, false if the rule is broken</returns>
        </member>
        <member name="M:Bifrost.Rules.Rule`1.SatisfyingElementsFrom(System.Linq.IQueryable{`0})">
            <summary>
            Evaluates the rule against each instance of an IQueryable[T]
            </summary>
            <param name="candidates">The IQueryable[T] that will have the rule evaluated against each of its instances</param>
            <returns>An IQueryable[T] containing only instances that satisfy the rule</returns>
        </member>
        <member name="P:Bifrost.Rules.Rule`1.Predicate">
            <summary>
            Predicate rule to be evaluated
            </summary>
        </member>
        <member name="T:Bifrost.Rules.CompositeRule`1">
            <summary>
            Composes two rules into a single rule that can be evaluated atomically.
            </summary>
            <typeparam name="T">Type that the rule is to be evaluated for.</typeparam>
            <remarks>Based on http://bloggingabout.net/blogs/dries/archive/2011/09/29/specification-pattern-continued.aspx </remarks>
        </member>
        <member name="T:Bifrost.Rules.Negative`1">
            <summary>
            Negates a rule.  Rule is satisfied if the provided rule is not satisfied.
            </summary>
            <typeparam name="T">Type that the rule is to be evalued for.</typeparam>
            <remarks>Based on http://bloggingabout.net/blogs/dries/archive/2011/09/29/specification-pattern-continued.aspx </remarks>
        </member>
        <member name="T:Bifrost.Rules.Or`1">
            <summary>
            Composes a rule that will be satisfied if either the first rule or second rule is satisfied
            </summary>
            <typeparam name="T">Type that the rule is to be evaluated for.</typeparam>
            <remarks>Based on http://bloggingabout.net/blogs/dries/archive/2011/09/29/specification-pattern-continued.aspx </remarks>
        </member>
        <member name="T:Bifrost.Rules.ParameterRebinder">
            <summary>
            Helper for combining Lambdas.
            Ensures that the combined expression points at the same parameters where these are common.
            </summary>
             <remarks>Based on http://bloggingabout.net/blogs/dries/archive/2011/09/29/specification-pattern-continued.aspx </remarks>
        </member>
        <member name="T:Bifrost.Rules.RuleExtensions">
            <summary>
            Extensions to help chain simple rules into complex rules
            </summary>
        </member>
        <member name="M:Bifrost.Rules.RuleExtensions.Compose``1(Bifrost.Rules.Rule{``0},Bifrost.Rules.Rule{``0},System.Func{System.Linq.Expressions.Expression,System.Linq.Expressions.Expression,System.Linq.Expressions.Expression})">
            <summary>
            Combines two atomic rules into a single rule
            </summary>
            <typeparam name="T">Type of the instance that the rule is to be evaluated against</typeparam>
            <param name="lhs">The rule being extended</param>
            <param name="rhs">The second rule to be merged into the first</param>
            <param name="merge">Expression for merging the two rules</param>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Rules.RuleExtensions.And``1(Bifrost.Rules.Rule{``0},Bifrost.Rules.Rule{``0})">
            <summary>
            Combines two rules in to an "And" rule
            </summary>
            <typeparam name="T">Type of the instance that the rule is to be evaluated against</typeparam>
            <param name="lhs">The rule being extended</param>
            <param name="rhs">The second rule to be merged into the first</param>
            <returns>An And{T} rule"></returns>
        </member>
        <member name="M:Bifrost.Rules.RuleExtensions.AndNot``1(Bifrost.Rules.Rule{``0},Bifrost.Rules.Rule{``0})">
            <summary>
            Combines two rules in to an "And" rul, where the second rule is negated.
            </summary>
            <typeparam name="T">Type of the instance that the rule is to be evaluated against</typeparam>
            <param name="lhs">The rule being extended</param>
            <param name="rhs">The second rule to be merged into the first</param>
            <returns>An And{T} rule"></returns>
        </member>
        <member name="M:Bifrost.Rules.RuleExtensions.Or``1(Bifrost.Rules.Rule{``0},Bifrost.Rules.Rule{``0})">
            <summary>
            Combines two rules in to an "Or" rule
            </summary>
            <typeparam name="T">Type of the instance that the rule is to be evaluated against</typeparam>
            <param name="lhs">The rule being extended</param>
            <param name="rhs">The second rule to be merged into the first</param>
            <returns>An Or{T} rule"></returns>
        </member>
        <member name="M:Bifrost.Rules.RuleExtensions.OrNot``1(Bifrost.Rules.Rule{``0},Bifrost.Rules.Rule{``0})">
            <summary>
            Combines two rules into an Or, where the second rule is negated.
            </summary>
            <typeparam name="T">Type of the instance that the rule is to be evaluated against</typeparam>
            <param name="rhs">The rule being extended</param>
            <param name="lhs">The second rule to be merged into the first</param>
            <returns>An And{T} rule"></returns>
        </member>
        <member name="T:Bifrost.Rules.Is">
            <summary>
            Helps chain simple <see cref="T:Bifrost.Rules.Rule`1"/> together
            </summary>
        </member>
        <member name="M:Bifrost.Rules.Is.Not``1(Bifrost.Rules.Rule{``0})">
            <summary>
            Creates a Not rule based on the rule passed in.
            </summary>
            <typeparam name="T">Type of the instance that the rule is to be evaluated against</typeparam>
            <param name="rule">The rule being extended</param>
            <returns>A Not{T} rule"></returns>
        </member>
        <member name="T:Bifrost.Sagas.Constants">
            <summary>
            Constants that are used within Bifrost.Sagas
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.Constants.NEW">
            <summary>
            Represents the <see cref="T:Bifrost.Sagas.SagaState"/> of "new"
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.Constants.BEGUN">
            <summary>
            Represents the <see cref="T:Bifrost.Sagas.SagaState"/> of "begun"
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.Constants.CONTINUING">
            <summary>
            Represents the <see cref="T:Bifrost.Sagas.SagaState"/> of "continuing"
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.Constants.CONCLUDED">
            <summary>
            Represents the <see cref="T:Bifrost.Sagas.SagaState"/> of "concluded"
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">
            <summary>
            Exception indicating that the transition between two <see cref="T:Bifrost.Sagas.SagaState">SagaStates</see> is invalid.
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException.#ctor">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">InvalidSagaStateTransitionException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException.#ctor(System.String)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">InvalidSagaStateTransitionException</see>
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">InvalidSagaStateTransitionException</see>
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">InvalidSagaStateTransitionException</see> for serialization
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Sagas.ISaga">Saga</see> is in an unknown <see cref="T:Bifrost.Sagas.SagaState">State</see>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.UnknownSagaStateException.#ctor">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">UnknownSagaStateException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.UnknownSagaStateException.#ctor(System.String)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">UnknownSagaStateException</see>
            </summary>
            <param name="message">Error message</param>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.UnknownSagaStateException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">UnknownSagaStateException</see>
            </summary>
            <param name="message">Error message</param>
            <param name="inner">Inner exception</param>
        </member>
        <member name="M:Bifrost.Sagas.Exceptions.UnknownSagaStateException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException">UnknownSagaStateException</see> for serialization
            </summary>
            <param name="info">Serialization Info</param>
            <param name="context">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Sagas.ISagaConverter">
            <summary>
            Defines a converter for converting a <see cref="T:Bifrost.Sagas.ISaga"/> to a <see cref="T:Bifrost.Sagas.SagaHolder"/> and back
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISagaConverter.ToSaga(Bifrost.Sagas.SagaHolder)">
            <summary>
            Convert a <see cref="T:Bifrost.Sagas.SagaHolder"/> to a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="sagaHolder"><see cref="T:Bifrost.Sagas.SagaHolder"/> to convert from</param>
            <returns>Converter <see cref="T:Bifrost.Sagas.ISaga"/> in the correct type</returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaConverter.ToSagaHolder(Bifrost.Sagas.ISaga)">
            <summary>
            Convert a <see cref="T:Bifrost.Sagas.ISaga"/> to a <see cref="T:Bifrost.Sagas.SagaHolder"/>
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to convert from</param>
            <returns>A <see cref="T:Bifrost.Sagas.SagaHolder"/> with the <see cref="T:Bifrost.Sagas.ISaga"/> and its data serialized</returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaConverter.Populate(Bifrost.Sagas.SagaHolder,Bifrost.Sagas.ISaga)">
            <summary>
            Populate an existing <see cref="T:Bifrost.Sagas.SagaHolder"/> from a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="sagaHolder"><see cref="T:Bifrost.Sagas.SagaHolder"/> to populate into</param>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to populate the <see cref="T:Bifrost.Sagas.SagaHolder"/> with</param>
        </member>
        <member name="T:Bifrost.Sagas.NullSagaLibrarian">
            <summary>
            Represents a null implementation of <see cref="T:Bifrost.Sagas.ISagaLibrarian"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ISagaLibrarian">
            <summary>
            Defines a librarian for handling sagas
            
            The purpose of the librarian is to persist and get a <see cref="T:Bifrost.Sagas.ISaga"/> or multiple
            sagas
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.Close(Bifrost.Sagas.ISaga)">
            <summary>
            Close a <see cref="T:Bifrost.Sagas.ISaga"/> permanently
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to close</param>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.Catalogue(Bifrost.Sagas.ISaga)">
            <summary>
            Catalogue saga to the library
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to record</param>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.Get(System.Guid)">
            <summary>
            Get a <see cref="T:Bifrost.Sagas.ISaga"/> based on its id
            </summary>
            <param name="id">Id of saga to get</param>
            <returns>An instance of the <see cref="T:Bifrost.Sagas.ISaga"/></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.Get(System.String,System.String)">
            <summary>
            Get a <see cref="T:Bifrost.Sagas.ISaga"/> based on the partition its in and key
            </summary>
            <param name="partition">Partition identifier</param>
            <param name="key">Unique partition key</param>
            <returns>An instance of the <see cref="T:Bifrost.Sagas.ISaga"/></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaLibrarian.GetForPartition(System.String)">
            <summary>
            Get all sagas within a given partition
            </summary>
            <param name="partition">Partition identifier</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Bifrost.Sagas.ISaga"/> with all sagas in the given partition</returns>
        </member>
        <member name="T:Bifrost.Sagas.SagaConverter">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.ISagaConverter"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaConverter.#ctor(Bifrost.Execution.IContainer,Bifrost.Serialization.ISerializer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaConverter"/>
            </summary>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> for creating instances of types</param>
            <param name="serializer">A <see cref="T:Bifrost.Serialization.ISerializer"/> to use for serialization</param>
        </member>
        <member name="T:Bifrost.Sagas.SagaState">
            <summary>
            Represents the state of a saga
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.SagaState.CONCLUDED">
            <summary>
            The <see cref="T:Bifrost.Sagas.SagaState.Concluded"/> state of a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.SagaState.CONTINUING">
            <summary>
            The <see cref="T:Bifrost.Sagas.SagaState.Continuing"/> state of a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.SagaState.BEGUN">
            <summary>
            The <see cref="T:Bifrost.Sagas.SagaState.Begun"/> state of a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.SagaState.NEW">
            <summary>
            The <see cref="T:Bifrost.Sagas.SagaState.New"/> state of a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.#ctor(Bifrost.Sagas.State)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaState"/> with a current state
            </summary>
            <param name="currentState"><see cref="T:Bifrost.Sagas.State">Current state</see> to set</param>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaState"/> with the current state set to <see cref="T:Bifrost.Sagas.SagaState.New"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.CanTransitionTo(Bifrost.Sagas.State)">
            <summary>
            Check if a transition is allowed
            </summary>
            <param name="newState"><see cref="T:Bifrost.Sagas.State"/> to check if is allowed</param>
            <returns>true if transition is allowed, false if not</returns>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.TransitionTo(Bifrost.Sagas.State)">
            <summary>
            Transition to a given state
            </summary>
            <param name="newState"><see cref="T:Bifrost.Sagas.State"/> to transition to</param>
            <exception cref="T:Bifrost.Sagas.Exceptions.InvalidSagaStateTransitionException">Thrown if transition is not allowed</exception>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.op_Implicit(System.String)~Bifrost.Sagas.SagaState">
            <summary>
            Implicit operator for converting a <see cref="T:System.String"/> to a <see cref="T:Bifrost.Sagas.SagaState"/>
            </summary>
            <param name="state"><see cref="T:System.String"/> containing state - see remarks</param>
            <returns><see cref="T:Bifrost.Sagas.SagaState"/> for the state string</returns>
            <remarks>
            Supported strings : 
            new
            begun
            continuing
            concluded
            
            Any other strings will cause a <see cref="T:Bifrost.Sagas.Exceptions.UnknownSagaStateException"/>
            </remarks>
        </member>
        <member name="M:Bifrost.Sagas.SagaState.ToString">
            <summary>
            Outputs the current state as string
            </summary>
            <returns>A string representing the current state</returns>
        </member>
        <member name="P:Bifrost.Sagas.SagaState.IsNew">
            <summary>
            Get wether or not the current state is <see cref="T:Bifrost.Sagas.SagaState.New"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaState.IsContinuing">
            <summary>
            Get wether or not the current state is <see cref="T:Bifrost.Sagas.SagaState.Continuing"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaState.IsBegun">
            <summary>
            Get wether or not the current state is <see cref="T:Bifrost.Sagas.SagaState.Begun"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaState.IsConcluded">
            <summary>
            Get wether or not the current state is <see cref="T:Bifrost.Sagas.SagaState.Concluded"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.State">
            <summary>
            Represents a state used in a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="F:Bifrost.Sagas.State._canTransitionTo">
            <summary>
            Holds all states it can transition to
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.State.#ctor(System.Collections.Generic.ICollection{Bifrost.Sagas.State})">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.State"/>
            </summary>
            <param name="canTransitionTo">Collection of states it can transition to</param>
        </member>
        <member name="M:Bifrost.Sagas.State.CanTransitionTo(Bifrost.Sagas.State)">
            <summary>
            Check if this state can transition to a specified state
            </summary>
            <param name="state"><see cref="T:Bifrost.Sagas.State"/> to check if can transition to</param>
            <returns>true if it can transition, false if not</returns>
        </member>
        <member name="T:Bifrost.Security.AuthorizeDescriptorResult">
            <summary>
            Represents the result of an authorization attempt
            </summary>
        </member>
        <member name="M:Bifrost.Security.AuthorizeDescriptorResult.ProcessAuthorizeActionResult(Bifrost.Security.AuthorizeActionResult)">
            <summary>
            Processes instance of an <see cref="T:Bifrost.Security.AuthorizeActionResult"/>, adding failed authorizations to the AuthorizationFailures collection
            </summary>
            <param name="result">Result to process</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeDescriptorResult.BuildFailedAuthorizationMessages">
            <summary>
            Gets all the broken <see cref="T:Bifrost.Security.ISecurityRule">rules</see> for this authorization attempt
            </summary>
            <returns>A string describing each broken rule or an empty enumerable if there are none</returns>
        </member>
        <member name="P:Bifrost.Security.AuthorizeDescriptorResult.AuthorizationFailures">
            <summary>
            Gets any <see cref="T:Bifrost.Security.AuthorizeActionResult"> results</see> that were not authorized
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeDescriptorResult.IsAuthorized">
            <summary>
            Gets the result of the Authorization attempt for this action and <see cref="T:Bifrost.Security.ISecurityDescriptor"/>
            </summary>
        </member>
        <member name="T:Bifrost.Security.AuthorizationResult">
            <summary>
            Contains the result of an attempt to authorize an action.
            </summary>
        </member>
        <member name="M:Bifrost.Security.AuthorizationResult.ProcessAuthorizeDescriptorResult(Bifrost.Security.AuthorizeDescriptorResult)">
            <summary>
            Processes instance of an <see cref="T:Bifrost.Security.AuthorizeDescriptorResult"/>, adding failed authorizations to the AuthorizationFailures collection
            </summary>
            <param name="result">Result to process</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizationResult.BuildFailedAuthorizationMessages">
            <summary>
            Gets all the broken <see cref="T:Bifrost.Security.ISecurityRule">rules</see> for this authorization attempt
            </summary>
            <returns>A string describing each broken rule or an empty enumerable if there are none</returns>
        </member>
        <member name="P:Bifrost.Security.AuthorizationResult.AuthorizationFailures">
            <summary>
            Gets any <see cref="T:Bifrost.Security.AuthorizeDescriptorResult"> results</see> that were not authorized
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizationResult.IsAuthorized">
            <summary>
            Gets the result of the Authorization attempt for this action and <see cref="T:Bifrost.Security.ISecurityDescriptor"/>
            </summary>
        </member>
        <member name="T:Bifrost.Security.AuthorizeActionResult">
            <summary>
            Represents the result of an authorization of a <see cref="T:Bifrost.Security.ISecurityAction"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.AuthorizeActionResult.#ctor(Bifrost.Security.ISecurityAction)">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Security.AuthorizeActionResult"/> for the specificed <see cref="T:Bifrost.Security.ISecurityAction"/>
            </summary>
            <param name="action"><see cref="T:Bifrost.Security.ISecurityAction"/> that this <see cref="T:Bifrost.Security.AuthorizeActionResult"/> pertains to.</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeActionResult.ProcessAuthorizeTargetResult(Bifrost.Security.AuthorizeTargetResult)">
            <summary>
            Processes an <see cref="T:Bifrost.Security.AuthorizeTargetResult"/> for an <see cref="T:Bifrost.Security.ISecurityTarget"> Actor</see> adding it to the AuthorizationFailures collection if appropriate
            </summary>
            <param name="result">Result to process</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeActionResult.BuildFailedAuthorizationMessages">
            <summary>
            Builds a collection of strings that show Action/Target for each broken or erroring rule in <see cref="T:Bifrost.Security.AuthorizeActionResult"/>
            </summary>
            <returns>A collection of strings</returns>
        </member>
        <member name="P:Bifrost.Security.AuthorizeActionResult.Action">
            <summary>
            Gets the <see cref="T:Bifrost.Security.ISecurityAction"/> that this <see cref="T:Bifrost.Security.AuthorizeTargetResult"/> pertains to.
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeActionResult.AuthorizationFailures">
            <summary>
            Gets the <see cref="T:Bifrost.Security.AuthorizeTargetResult"/> for all failed <see cref="T:Bifrost.Security.ISecurityTarget"> Actors </see> on the <see cref="T:Bifrost.Security.ISecurable"/>
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeActionResult.IsAuthorized">
            <summary>
            Gets the result of the Authorization for the <see cref="T:Bifrost.Security.ISecurityTarget"/>
            </summary>
        </member>
        <member name="T:Bifrost.Security.AuthorizeActorResult">
            <summary>
            Represents the result of an authorization of a <see cref="T:Bifrost.Security.ISecurityActor"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.AuthorizeActorResult.#ctor(Bifrost.Security.ISecurityActor)">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Security.AuthorizeActorResult"/>
            </summary>
            <param name="actorThatResultIsFor">The <see cref="T:Bifrost.Security.ISecurityActor"/> that this <see cref="T:Bifrost.Security.AuthorizeActorResult"/> pertains to.</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeActorResult.AddBrokenRule(Bifrost.Security.ISecurityRule)">
            <summary>
            Add an instance of an <see cref="T:Bifrost.Security.ISecurityRule"/> that was broken during Authorization
            </summary>
            <param name="rule">An instance of a broken <see cref="T:Bifrost.Security.ISecurityRule"/></param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeActorResult.AddErrorRule(Bifrost.Security.ISecurityRule,System.Exception)">
            <summary>
            Add an instance of an <see cref="T:Bifrost.Security.ISecurityRule"/> that was unable to be evaluted because it encountered an exception
            </summary>
            <param name="rule">The instance of the <see cref="T:Bifrost.Security.ISecurityRule"/> that could not be evaluted.</param>
            <param name="exception">The exception that prevented the <see cref="T:Bifrost.Security.ISecurityRule"/> from being evaluated.</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeActorResult.BuildFailedAuthorizationMessages">
            <summary>
            Builds a collection of strings that show Actor/Rule for each broken or erroring rule <see cref="T:Bifrost.Security.AuthorizeActorResult"/>
            </summary>
            <returns>A collection of strings</returns>
        </member>
        <member name="P:Bifrost.Security.AuthorizeActorResult.Actor">
            <summary>
            Gets the <see cref="T:Bifrost.Security.ISecurityActor"/> that this <see cref="T:Bifrost.Security.AuthorizeActorResult"/> pertains to.
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeActorResult.BrokenRules">
            <summary>
            Gets any <see cref="T:Bifrost.Security.ISecurityRule"/> that were broken in the Authorization attempt.
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeActorResult.RulesThatEncounteredAnErrorWhenEvaluating">
            <summary>
            Gets any <see cref="T:Bifrost.Security.RuleEvaluationError"/> that were encountered in the Authorization attempt.
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeActorResult.IsAuthorized">
            <summary>
            Indicates whether the Authorization attempt was successful or not
            </summary>
        </member>
        <member name="T:Bifrost.Security.AuthorizeSecurableResult">
            <summary>
            Represents the result of an authorization of a <see cref="T:Bifrost.Security.ISecurable"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.AuthorizeSecurableResult.#ctor(Bifrost.Security.ISecurable)">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Security.AuthorizeSecurableResult"/> for the specificed <see cref="T:Bifrost.Security.ISecurable"/>
            </summary>
            <param name="securable"><see cref="T:Bifrost.Security.ISecurable"/> that this <see cref="T:Bifrost.Security.AuthorizeSecurableResult"/> pertains to.</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeSecurableResult.ProcessAuthorizeActorResult(Bifrost.Security.AuthorizeActorResult)">
            <summary>
            Processes an <see cref="T:Bifrost.Security.AuthorizeActorResult"/> for an <see cref="T:Bifrost.Security.ISecurityActor"> Actor</see>, adding it to the AuthorizationFailures collection if appropriate
            </summary>
            <param name="authorizeActorResult">Result to process</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeSecurableResult.BuildFailedAuthorizationMessages">
            <summary>
            Builds a collection of strings that show Securable/Actor for each broken or erroring rule in <see cref="T:Bifrost.Security.AuthorizeSecurableResult"/>
            </summary>
            <returns>A collection of strings</returns>
        </member>
        <member name="P:Bifrost.Security.AuthorizeSecurableResult.Securable">
            <summary>
            Gets the <see cref="T:Bifrost.Security.ISecurable"/> that this <see cref="T:Bifrost.Security.AuthorizeSecurableResult"/> pertains to.
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeSecurableResult.AuthorizationFailures">
            <summary>
            Gets the <see cref="T:Bifrost.Security.AuthorizeActorResult"/> for all failed <see cref="T:Bifrost.Security.ISecurityActor"> Actors </see> on the <see cref="T:Bifrost.Security.ISecurable"/>
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeSecurableResult.IsAuthorized">
            <summary>
            Gets the result of the Authorization for the <see cref="T:Bifrost.Security.ISecurable"/>
            </summary>
        </member>
        <member name="T:Bifrost.Security.AuthorizeTargetResult">
            <summary>
            Represents the result of an authorization of a <see cref="T:Bifrost.Security.ISecurityTarget"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.AuthorizeTargetResult.#ctor(Bifrost.Security.ISecurityTarget)">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Security.AuthorizeTargetResult"/> for the specificed <see cref="T:Bifrost.Security.ISecurityTarget"/>
            </summary>
            <param name="target"><see cref="T:Bifrost.Security.ISecurityTarget"/> that this <see cref="T:Bifrost.Security.AuthorizeTargetResult"/> pertains to.</param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeTargetResult.ProcessAuthorizeSecurableResult(Bifrost.Security.AuthorizeSecurableResult)">
            <summary>
            Processes an <see cref="T:Bifrost.Security.AuthorizeSecurableResult"/>, adding it to the collection of AuthorizationFailures if appropriate
            </summary>
            <param name="result">An <see cref="T:Bifrost.Security.AuthorizeSecurableResult"/> for a <see cref="T:Bifrost.Security.ISecurable"/></param>
        </member>
        <member name="M:Bifrost.Security.AuthorizeTargetResult.BuildFailedAuthorizationMessages">
            <summary>
            Builds a collection of strings that show Target/Securable for each broken or erroring rule in<see cref="T:Bifrost.Security.AuthorizeTargetResult"/>
            </summary>
            <returns>A collection of strings</returns>
        </member>
        <member name="P:Bifrost.Security.AuthorizeTargetResult.Target">
            <summary>
            Gets the <see cref="T:Bifrost.Security.ISecurityTarget"/> that this <see cref="T:Bifrost.Security.AuthorizeTargetResult"/> pertains to.
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeTargetResult.AuthorizationFailures">
            <summary>
            Gets the <see cref="T:Bifrost.Security.AuthorizeSecurableResult"/> for each failed <see cref="T:Bifrost.Security.ISecurable"/> on the <see cref="T:Bifrost.Security.ISecurityTarget"/>
            </summary>
        </member>
        <member name="P:Bifrost.Security.AuthorizeTargetResult.IsAuthorized">
            <summary>
            Indicates if the action instance has been authorized by the <see cref="T:Bifrost.Security.ISecurityTarget"/>
            </summary>
        </member>
        <member name="T:Bifrost.Security.ICanResolvePrincipal">
            <summary>
            Defines a resolver for <see cref="T:System.Security.Principal.IIdentity"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.ICanResolvePrincipal.Resolve">
            <summary>
            Resolve current <see cref="T:System.Security.Principal.IPrincipal"/>
            </summary>
            <returns>The resolved <see cref="T:System.Security.Principal.IPrincipal"/></returns>
        </member>
        <member name="T:Bifrost.Security.ISecurityCondition">
            <summary>
            Defines a condition that must be met in order for a set of rules can be run
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurityContext">
            <summary>
            Defines a security context
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurityDescriptor">
            <summary>
            Defines a security descriptor
            </summary>
        </member>
        <member name="M:Bifrost.Security.ISecurityDescriptor.AddAction(Bifrost.Security.ISecurityAction)">
            <summary>
            Add a <see cref="T:Bifrost.Security.ISecurityAction"/> to the <see cref="T:Bifrost.Security.ISecurityDescriptor"/>
            </summary>
            <param name="securityAction"><see cref="T:Bifrost.Security.ISecurityAction"/> to add</param>
        </member>
        <member name="M:Bifrost.Security.ISecurityDescriptor.CanAuthorize``1(System.Object)">
            <summary>
            Indicates whether this security descriptor can authorize this particular object
            </summary>
            <typeparam name="T">The type of <see cref="T:Bifrost.Security.ISecurityAction"/> that we wish to authorize</typeparam>
            <param name="instanceToAuthorize">Instance of the object that we wish to authorize</param>
            <returns>True if this descriptor can authorize, False otherwise</returns>
        </member>
        <member name="M:Bifrost.Security.ISecurityDescriptor.Authorize(System.Object)">
            <summary>
            Authorizes an object that represents a particular action being undertaken
            </summary>
            <param name="instanceToAuthorize">instance of the action being undertaken</param>
            <returns>An <see cref="T:Bifrost.Security.AuthorizeDescriptorResult"/> indicating the result of the authorization attempt</returns>
        </member>
        <member name="P:Bifrost.Security.ISecurityDescriptor.When">
            <summary>
            Get the entry point for builidng a <see cref="T:Bifrost.Security.ISecurityDescriptor"/>
            </summary>
        </member>
        <member name="P:Bifrost.Security.ISecurityDescriptor.Actions">
            <summary>
            Get the <see cref="T:Bifrost.Security.ISecurityAction">action builders</see>
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurityDescriptorBuilder">
            <summary>
            Defines the builder for building a <see cref="T:Bifrost.Security.ISecurityDescriptor"/>
            </summary>
        </member>
        <member name="P:Bifrost.Security.ISecurityDescriptorBuilder.Descriptor">
            <summary>
            Gets the <see cref="T:Bifrost.Security.ISecurityDescriptor"/> that is used by the builder
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurityManager">
            <summary>
            Defines a manager for dealing with security for types and namespaces
            </summary>
        </member>
        <member name="M:Bifrost.Security.ISecurityManager.Authorize``1(System.Object)">
            <summary>
            Ask if an instance of a action is authorized
            </summary>
            <typeparam name="T">The type of <see cref="T:Bifrost.Security.ISecurityAction"/> that we with to authorize</typeparam>
            <param name="target">Object that is subject of security</param>
            <returns><see cref="T:Bifrost.Security.AuthorizationResult"/> that contains the result</returns>
        </member>
        <member name="T:Bifrost.Security.ISecurityActor">
            <summary>
            Defines the security object that defines the security
            </summary>
        </member>
        <member name="M:Bifrost.Security.ISecurityActor.IsAuthorized(System.Object)">
            <summary>
            Authorizes an instance of an action
            </summary>
            <param name="actionToAuthorize">An instance of the action to authorize</param>
            <returns>A <see cref="T:Bifrost.Security.AuthorizeActorResult"/> which encapsulates the result of the authorization attempt of this instance of an action</returns>
        </member>
        <member name="P:Bifrost.Security.ISecurityActor.Description">
            <summary>
            Gets a description of the SecurityActor.
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurable">
            <summary>
            Defines something that can be secured
            </summary>
        </member>
        <member name="M:Bifrost.Security.ISecurable.AddActor(Bifrost.Security.ISecurityActor)">
            <summary>
            Add a <see cref="T:Bifrost.Security.ISecurityActor"/> as context for rules
            </summary>
            <param name="securityObject">The <see cref="T:Bifrost.Security.ISecurityActor"/> providing context for the rule</param>
        </member>
        <member name="M:Bifrost.Security.ISecurable.CanAuthorize(System.Object)">
            <summary>
            Indicates whether this securable can authorize the action 
            </summary>
            <param name="actionToAuthorize">Instance of an action to be authorized</param>
            <returns>True for can authorize, False for cannot</returns>
        </member>
        <member name="M:Bifrost.Security.ISecurable.Authorize(System.Object)">
            <summary>
            Result of the authorization of this securable
            </summary>
            <param name="actionToAuthorize">Instance of an action to be authorized</param>
            <returns>An <see cref="T:Bifrost.Security.AuthorizeSecurableResult"/> </returns>
        </member>
        <member name="P:Bifrost.Security.ISecurable.Actors">
            <summary>
            Gets a collection of <see cref="T:Bifrost.Security.ISecurityActor">security objects</see>
            </summary>
        </member>
        <member name="P:Bifrost.Security.ISecurable.Description">
            <summary>
            Gets a description of the Securable.
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurityRule">
            <summary>
            Defines a rule for security
            </summary>
        </member>
        <member name="M:Bifrost.Security.ISecurityRule.IsAuthorized(System.Object)">
            <summary>
            Check if a securable instance is authorized
            </summary>
            <param name="securable">The securable instance to check</param>
            <returns>True if has access, false if not</returns>
        </member>
        <member name="P:Bifrost.Security.ISecurityRule.Description">
            <summary>
            Returns a description of the rule
            </summary>
        </member>
        <member name="T:Bifrost.Security.ISecurityRuleBuilder">
            <summary>
            Defines a builder for building <see cref="T:Bifrost.Security.ISecurityRule">security rules</see>
            </summary>
        </member>
        <member name="T:Bifrost.Security.NamespaceSecurable">
            <summary>
            Represents a <see cref="T:Bifrost.Security.Securable"/> that applies to a specific namespace
            </summary>
        </member>
        <member name="T:Bifrost.Security.Securable">
            <summary>
            Represents a base implementation of<see cref="T:Bifrost.Security.ISecurable"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.Securable.#ctor(System.String)">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Security.Securable"/>
            </summary>
            <param name="securableDescription">Description of the Securable</param>
        </member>
        <member name="M:Bifrost.Security.NamespaceSecurable.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Security.NamespaceSecurable"/>
            </summary>
            <param name="namespace">Namespace to secure</param>
        </member>
        <member name="P:Bifrost.Security.NamespaceSecurable.Namespace">
            <summary>
            Gets the namespace that is secured
            </summary>
        </member>
        <member name="T:Bifrost.Security.RoleRule">
            <summary>
            Represents a specific <see cref="T:Bifrost.Security.ISecurityRule"/> for roles
            </summary>
        </member>
        <member name="M:Bifrost.Security.RoleRule.#ctor(Bifrost.Security.UserSecurityActor,System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Security.RoleRule"/>
            </summary>
            <param name="userToAuthorize">The <see cref="T:Bifrost.Security.UserSecurityActor"/> to check the role against.</param>
            <param name="role">The role to check for</param>
        </member>
        <member name="P:Bifrost.Security.RoleRule.Role">
            <summary>
            Gets the role for the rule
            </summary>
        </member>
        <member name="T:Bifrost.Security.RuleEvaluationError">
            <summary>
            Encapsulates a <see cref="T:Bifrost.Security.ISecurityRule"/> that encountered an Exception when evaluating
            </summary>
        </member>
        <member name="M:Bifrost.Security.RuleEvaluationError.#ctor(Bifrost.Security.ISecurityRule,System.Exception)">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Security.RuleEvaluationError"/>
            </summary>
            <param name="rule"><see cref="T:Bifrost.Security.ISecurityRule"/> that encounted the error when evaluating.</param>
            <param name="error">The error that was encountered</param>
        </member>
        <member name="M:Bifrost.Security.RuleEvaluationError.BuildErrorMessage">
            <summary>
            Returns a descriptive message describing the rule
            </summary>
            <returns>String descibing the rule</returns>
        </member>
        <member name="P:Bifrost.Security.RuleEvaluationError.Error">
            <summary>
            Gets the Exception that was encountered when evaluation the rule
            </summary>
        </member>
        <member name="P:Bifrost.Security.RuleEvaluationError.Rule">
            <summary>
            Gets the rule instance that encountered the exception when evaluation
            </summary>
        </member>
        <member name="T:Bifrost.Security.SecurableExtensions">
            <summary>
            Extensions for <see cref="T:Bifrost.Security.ISecurable"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.SecurableExtensions.User(Bifrost.Security.ISecurable)">
            <summary>
            Define a user actor for a <see cref="T:Bifrost.Security.ISecurable">securable</see>
            </summary>
            <param name="securable"><see cref="T:Bifrost.Security.ISecurable"/> to secure</param>
            <returns>The <see cref="T:Bifrost.Security.UserSecurityActor"/></returns>
        </member>
        <member name="T:Bifrost.Security.SecurityContext">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Security.ISecurityContext"/>
            </summary>
        </member>
        <member name="T:Bifrost.Security.SecurityContextExtensions">
            <summary>
            Extensions for a <see cref="T:Bifrost.Security.ISecurityContext"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.SecurityContextExtensions.TenantIs(Bifrost.Security.ISecurityContext,Bifrost.Tenancy.Tenant)">
            <summary>
            Add a tenant condition for a <see cref="T:Bifrost.Security.ISecurityContext"/> 
            </summary>
            <param name="context"><see cref="T:Bifrost.Security.ISecurityContext"/> to add for</param>
            <param name="tenant">The <see cref="!:Tentant"/> criteria that must be met</param>
            <returns>The <see cref="T:Bifrost.Security.ISecurityContext"/> to continue the chain</returns>
        </member>
        <member name="M:Bifrost.Security.SecurityContextExtensions.ExecutionContextValue(Bifrost.Security.ISecurityContext,System.Linq.Expressions.Expression{System.Func{Bifrost.Execution.ExecutionContext,System.Object}})">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Bifrost.Security.BaseSecurityDescriptor">
            <summary>
            Represents a <see cref="T:Bifrost.Security.ISecurityDescriptor"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.BaseSecurityDescriptor.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Security.BaseSecurityDescriptor"/>
            </summary>
        </member>
        <member name="T:Bifrost.Security.SecurityDescriptorBuilder">
            <summary>
            Defines a builder for building a <see cref="T:Bifrost.Security.ISecurityDescriptor"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.SecurityDescriptorBuilder.#ctor(Bifrost.Security.ISecurityDescriptor)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Security.SecurityDescriptorBuilder"/>
            </summary>
            <param name="descriptor">The <see cref="T:Bifrost.Security.ISecurityDescriptor"/> we are building</param>
        </member>
        <member name="T:Bifrost.Security.SecurityManager">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Security.ISecurityManager"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.SecurityManager.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Security.SecurityManager"/>
            </summary>
            <param name="typeDiscoverer"><see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to discover any <see cref="T:Bifrost.Security.BaseSecurityDescriptor">security descriptors</see></param>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to instantiate instances of <see cref="T:Bifrost.Security.ISecurityDescriptor"/></param>
        </member>
        <member name="T:Bifrost.Security.SecurityActor">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Security.ISecurityActor"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.SecurityActor.#ctor(System.String)">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Security.SecurityActor"/>
            </summary>
            <param name="description">String that describes this actor type</param>
        </member>
        <member name="T:Bifrost.Security.DefaultPrincipalResolver">
            <summary>
            Represents a principal resolver that resolves from current thread;
            </summary>
        </member>
        <member name="T:Bifrost.Security.TypeSecurable">
            <summary>
            Represents a <see cref="T:Bifrost.Security.Securable"/> that applies to a specific <see cref="T:System.Type"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.TypeSecurable.#ctor(System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Security.TypeSecurable"/>
            </summary>
            <param name="type"><see cref="T:System.Type"/> to secure</param>
        </member>
        <member name="P:Bifrost.Security.TypeSecurable.Type">
            <summary>
            Gets the type that is secured
            </summary>
        </member>
        <member name="T:Bifrost.Security.UserSecurityActor">
            <summary>
            Represents a concrete <see cref="T:Bifrost.Security.SecurityActor"/> for a user
            </summary>
        </member>
        <member name="F:Bifrost.Security.UserSecurityActor.USER">
            <summary>
            Description of the <see cref="T:Bifrost.Security.UserSecurityActor"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.UserSecurityActor.#ctor">
            <summary>
            Instantiates an instance of <see cref="T:Bifrost.Security.UserSecurityActor"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.UserSecurityActor.IsInRole(System.String)">
            <summary>
            Checks whether the Current user has the requested role.
            </summary>
            <param name="role">Role to check for</param>
            <returns>True is the user has the role, False otherwise</returns>
        </member>
        <member name="T:Bifrost.Security.UserSecurityActorExtensions">
            <summary>
            Extensions for <see cref="T:Bifrost.Security.UserSecurityActor"/>
            </summary>
        </member>
        <member name="M:Bifrost.Security.UserSecurityActorExtensions.MustBeInRole(Bifrost.Security.UserSecurityActor,System.String)">
            <summary>
            Declares that the <see cref="T:Bifrost.Security.UserSecurityActor"/> must be in a specific role
            </summary>
            <param name="securityActor"><see cref="T:Bifrost.Security.UserSecurityActor"/> to declare it for</param>
            <param name="role">Role</param>
            <returns><see cref="T:Bifrost.Security.UserSecurityActor"/> to continue the chain with</returns>
        </member>
        <member name="M:Bifrost.Security.UserSecurityActorExtensions.MustBeInRoles(Bifrost.Security.UserSecurityActor,System.String[])">
            <summary>
            Declares that the <see cref="T:Bifrost.Security.UserSecurityActor"/> must be in set of specific roles
            </summary>
            <param name="securityActor"><see cref="T:Bifrost.Security.UserSecurityActor"/> to declare it for</param>
            <param name="roles">Roles to specify</param>
            <returns><see cref="T:Bifrost.Security.UserSecurityActor"/> to continue the chain with</returns>
        </member>
        <member name="T:Bifrost.Serialization.SerializationOptions">
            <summary>
            Represents the options for serialization
            </summary>
        </member>
        <member name="F:Bifrost.Serialization.SerializationOptions.ShouldSerializeProperty">
            <summary>
            A func that gets called during serialization of properties to decide 
            </summary>
        </member>
        <member name="P:Bifrost.Serialization.SerializationOptions.UseCamelCase">
            <summary>
            Gets or sets wether or not to use camel case for naming of properties
            </summary>
        </member>
        <member name="P:Bifrost.Serialization.SerializationOptions.IncludeTypeNames">
            <summary>
            Gets or sets wether or not to include type names during serialization
            </summary>
        </member>
        <member name="T:Bifrost.Globalization.ILocalizer">
            <summary>
            Defines a localizer for entering in and out of a <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
        </member>
        <member name="M:Bifrost.Globalization.ILocalizer.BeginScope">
            <summary>
            Begin a <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
            <returns><see cref="T:Bifrost.Globalization.LocalizationScope"/></returns>
        </member>
        <member name="M:Bifrost.Globalization.ILocalizer.EndScope(Bifrost.Globalization.LocalizationScope)">
            <summary>
            End a <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
            <param name="scope"><see cref="T:Bifrost.Globalization.LocalizationScope"/> to end</param>
        </member>
        <member name="T:Bifrost.Globalization.LocalizationScope">
            <summary>
            Represents a scope for localization, when exiting the scope, cultures will be reset back to the cultures given at construction.
            The scopes purpose is to enable one to change cultures within a given scope but have it gracefully reset back to the previous
            or a given culture when disposed
            </summary>
        </member>
        <member name="M:Bifrost.Globalization.LocalizationScope.#ctor(System.Globalization.CultureInfo,System.Globalization.CultureInfo)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
            <param name="culture"><see cref="T:System.Globalization.CultureInfo"/> to initialize the scope with</param>
            <param name="uiCulture"><see cref="T:System.Globalization.CultureInfo"/> to initialize the scope as the UI culture with</param>
        </member>
        <member name="M:Bifrost.Globalization.LocalizationScope.FromCurrentThread">
            <summary>
            Get current <see cref="T:Bifrost.Globalization.LocalizationScope"/> from the current thread
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Globalization.LocalizationScope.Dispose">
            <summary>
            Dispose the scope, resetting the culture back to the cultures given at construction
            </summary>
        </member>
        <member name="P:Bifrost.Globalization.LocalizationScope.Culture">
            <summary>
            Gets the culture for the <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
        </member>
        <member name="P:Bifrost.Globalization.LocalizationScope.UICulture">
            <summary>
            Gets the UI culture for the <see cref="T:Bifrost.Globalization.LocalizationScope"/>
            </summary>
        </member>
        <member name="T:Bifrost.Globalization.Localizer">
            <summary>
            Represents a <see cref="T:Bifrost.Globalization.ILocalizer"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ChapterDoesNotExistException">
            <summary>
            The exception that is thrown if a <see cref="T:Bifrost.Sagas.IChapter"/> does not exist in a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ChapterTransition">
            <summary>
            Represents the result of a transition between <see cref="T:Bifrost.Sagas.IChapter">chapters</see> 
            </summary>
            <remarks>
            Since chapters work with commands, this result is inheriting from <see cref="T:Bifrost.Commands.CommandResult"/>
            </remarks>
        </member>
        <member name="T:Bifrost.Commands.CommandResult">
            <summary>
            Represents the result from the <see cref="T:Bifrost.Commands.ICommandCoordinator">CommandCoordinator</see>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandResult.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Commands.CommandResult"/>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandResult.MergeWith(Bifrost.Commands.CommandResult)">
            <summary>
            Merges another CommandResult instance into the current instance
            </summary>
            <param name="commandResultToMerge">The source <see cref="T:Bifrost.Commands.CommandResult"/> to merge into current instance</param>
        </member>
        <member name="M:Bifrost.Commands.CommandResult.ForCommand(Bifrost.Commands.ICommand)">
            <summary>
            Create a <see cref="T:Bifrost.Commands.CommandResult"/> for a given <see cref="T:Bifrost.Commands.ICommand"/> instance
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand"/> to create from</param>
            <returns>A <see cref="T:Bifrost.Commands.CommandResult"/> with <see cref="T:Bifrost.Commands.ICommand"/> details populated</returns>
        </member>
        <member name="M:Bifrost.Commands.CommandResult.ToString">
            <summary>
            Returns a string that represents the state of the <see cref="T:Bifrost.Commands.CommandResult"/>
            </summary>
            <returns><see cref="T:System.String"/> with full detail from the <see cref="T:Bifrost.Commands.CommandResult"/></returns>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.CommandName">
            <summary>
            Gets or sets the name of command that this result is related to
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.CommandId">
            <summary>
            Gets or sets the Id of the command that this result is related to
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.ValidationResults">
            <summary>
            Gets or sets the ValidationResults generated during handling of a command
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.CommandValidationMessages">
            <summary>
            Gets the error messages that are related to full command during validation
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.SecurityMessages">
            <summary>
            Gets the messages that are related to broken security rules
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.AllValidationMessages">
            <summary>
            Gets any validation errors (for properties or for the full command) as a simple string enumerbale.
            To relate property validation errors to the relevant property, use the <see cref="T:System.ComponentModel.DataAnnotations.ValidationResult">ValidationResults</see> property.
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.Exception">
            <summary>
            Gets or sets the exception, if any, that occured during a handle
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.ExceptionMessage">
            <summary>
            Gets or sets the exception message, if any
            </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.Success">
             <summary>
             Gets the success state of the result
            
             If there are invalid validationresult or command validattion messages, this is false.
             If an exception occured, this is false.
             Otherwise, its true
             </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.Invalid">
             <summary>
             Gets the validation state of the result
            
             If there are any validationresults or command validation messages this returns false, true if not
             </summary>
        </member>
        <member name="P:Bifrost.Commands.CommandResult.PassedSecurity">
            <summary>
            Gets or sets wether or not command passed security
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ChapterTransition.TransitionedTo">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Sagas.IChapter"/> that was transitioned to, if succeeded
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ChapterHolder">
            <summary>
            Represents a holder for a <see cref="T:Bifrost.Sagas.IChapter"/>, typically used for serializing a chapter
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ChapterHolder.Type">
            <summary>
            Gets or sets the type of the chapter
            </summary>
            <remarks>
            Fully Assembly qualified name
            </remarks>
        </member>
        <member name="P:Bifrost.Sagas.ChapterHolder.SerializedChapter">
            <summary>
            Gets or sets the serialized version of the <see cref="T:Bifrost.Sagas.IChapter"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.SagaCommandContext">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandContext"/> as a <see cref="T:Bifrost.Lifecycle.ITransaction"/> for a <see cref="T:Bifrost.Commands.ICommand"/> applied to a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandContext">
            <summary>
            Defines a context for a <see cref="T:Bifrost.Commands.ICommand">command</see> passing through
            the system
            </summary>
        </member>
        <member name="T:Bifrost.Lifecycle.ITransaction">
            <summary>
            Defines a logical transaction
            </summary>
        </member>
        <member name="M:Bifrost.Lifecycle.ITransaction.Commit">
            <summary>
            Commits the transaction
            </summary>
        </member>
        <member name="M:Bifrost.Lifecycle.ITransaction.Rollback">
            <summary>
            Rollback to the state before the transaction started
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandContext.RegisterForTracking(Bifrost.Domain.IAggregateRoot)">
            <summary>
            Register an aggregated root for tracking
            </summary>
            <param name="aggregatedRoot">Aggregated root to track</param>
        </member>
        <member name="M:Bifrost.Commands.ICommandContext.GetObjectsBeingTracked">
            <summary>
            Get objects that are being tracked
            </summary>
            <returns>All tracked objects</returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandContext.GetCommittedEventsFor(Bifrost.Events.EventSource,System.Guid)">
            <summary>
            Get commmitted events for a specific <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.EventSource"/> to get from</param>
            <param name="eventSourceId"><see cref="T:System.Guid">Id</see> of <see cref="T:Bifrost.Events.EventSource"/> to get from</param>
            <returns><see cref="T:Bifrost.Events.CommittedEventStream"/> for the <see cref="T:Bifrost.Events.EventSource"/></returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandContext.GetLastCommittedVersion(Bifrost.Events.EventSource,System.Guid)">
            <summary>
            Returns the last committed <see cref="T:Bifrost.Events.EventSourceVersion">Event Source Version</see> for the <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.EventSource"/> to get <see cref="T:Bifrost.Events.EventSourceVersion">version</see> for</param>
            <param name="eventSourceId"><see cref="T:System.Guid">Id</see> of the specific <see cref="T:Bifrost.Events.EventSource"/></param>
            <returns>The last committed <see cref="T:Bifrost.Events.EventSourceVersion">version</see></returns>
        </member>
        <member name="P:Bifrost.Commands.ICommandContext.Command">
            <summary>
            Gets the <see cref="T:Bifrost.Commands.ICommand">command</see> the context is for
            </summary>
        </member>
        <member name="P:Bifrost.Commands.ICommandContext.ExecutionContext">
            <summary>
            Gets the <see cref="T:Bifrost.Execution.IExecutionContext"/> for the command
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaCommandContext.#ctor(Bifrost.Sagas.ISaga,Bifrost.Commands.ICommand,Bifrost.Execution.IExecutionContext,Bifrost.Events.IEventStore,Bifrost.Events.IUncommittedEventStreamCoordinator,Bifrost.Events.IProcessMethodInvoker,Bifrost.Sagas.ISagaLibrarian)">
            <summary>
            Initializes an instance of the <see cref="T:Bifrost.Sagas.SagaCommandContext"/> for a saga
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to start the context for</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand"/> that will be applied </param>
            <param name="executionContext">A <see cref="T:Bifrost.Execution.IExecutionContext"/> that is the context of execution for the <see cref="T:Bifrost.Commands.ICommand"/></param>
            <param name="eventStore">A <see cref="T:Bifrost.Events.IEventStore"/> that will receive any events generated</param>
            <param name="uncommittedEventStreamCoordinator">A <see cref="T:Bifrost.Events.IUncommittedEventStreamCoordinator"/> to use for coordinating a <see cref="T:Bifrost.Events.UncommittedEventStream"/></param>
            <param name="processMethodInvoker">A <see cref="T:Bifrost.Events.IProcessMethodInvoker"/> for processing events on the <see cref="T:Bifrost.Sagas.ISaga"/></param>
            <param name="sagaLibrarian">A <see cref="T:Bifrost.Sagas.ISagaLibrarian"/> for dealing with the <see cref="T:Bifrost.Sagas.ISaga"/> and persistence</param>
        </member>
        <member name="T:Bifrost.Sagas.SagaHolder">
            <summary>
            Represents a holder for a <see cref="T:Bifrost.Sagas.ISaga"/> for persisting purposes
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Id">
            <summary>
            Gets or sets the Id of the actual <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Partition">
            <summary>
            Gets or sets the Partition in which the <see cref="T:Bifrost.Sagas.ISaga"/> belongs to
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Key">
            <summary>
            Gets or sets the Key that represents the <see cref="T:Bifrost.Sagas.ISaga"/> within a partition
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Name">
            <summary>
            Gets or sets the name of the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.Type">
            <summary>
            Gets or sets the type of the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <remarks>
            Fully qualified type string
            </remarks>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.State">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Sagas.SagaState"/> represented as string
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.SerializedSaga">
            <summary>
            Gets or sets the serialized version of the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.CurrentChapterType">
            <summary>
            Gets or sets the current chapters type
            </summary>
            <remarks>
            Fully qualified type string
            </remarks>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.SerializedChapters">
            <summary>
            Gets or sets the chapters as serialized data
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.SagaHolder.UncommittedEvents">
            <summary>
            Gets or sets the uncommited events as serialized data
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.SagaLibrarian">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.ISagaLibrarian"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaLibrarian.#ctor(Bifrost.Entities.IEntityContext{Bifrost.Sagas.SagaHolder},Bifrost.Sagas.ISagaConverter)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaLibrarian"/>
            </summary>
            <param name="entityContext">A <see cref="T:Bifrost.Entities.IEntityContext`1"/> to use for working with persisting and resuming <see cref="T:Bifrost.Sagas.ISaga">Sagas</see></param>
            <param name="sagaConverter">A <see cref="T:Bifrost.Sagas.ISagaConverter"/> for converting a <see cref="T:Bifrost.Sagas.ISaga"/> to a <see cref="T:Bifrost.Sagas.SagaHolder"/> and back</param>
        </member>
        <member name="T:Bifrost.Serialization.ISerializer">
            <summary>
            Defines a serializer
            </summary>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.FromJson``1(System.String,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Deserialize Json to a specific type from a <see cref="T:System.String"/>
            </summary>
            <typeparam name="T">Type to deserialize to</typeparam>
            <param name="json"><see cref="T:System.String"/> containing the Json</param>
            <param name="options">Options for the serializer</param>
            <returns>An deserialized</returns>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.FromJson(System.Type,System.String,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Deserialize Json to a specific type from a <see cref="T:System.String"/>
            </summary>
            <param name="type">Type to deserialize to</param>
            <param name="json"><see cref="T:System.String"/> containing the Json</param>
            <param name="options">Options for the serializer</param>
            <returns>A deserialized instance</returns>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.FromJson(System.Object,System.String,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Deserialize Json into a specific instance
            </summary>
            <param name="instance">Instance to deserialize into</param>
            <param name="json"><see cref="T:System.String"/> containing the Json</param>
            <param name="options">Options for the serializer</param>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.ToJson(System.Object,Bifrost.Serialization.SerializationOptions)">
            <summary>
            Serialize an object to Json as a string
            </summary>
            <param name="instance">Instance to serialize</param>
            <param name="options">Options for the serializer</param>
            <returns><see cref="T:System.String"/> containing the serialized instance</returns>
        </member>
        <member name="M:Bifrost.Serialization.ISerializer.GetKeyValuesFromJson(System.String)">
            <summary>
            Deserialize Json into a key/value dictionary
            </summary>
            <param name="json">Json to deserialize</param>
            <returns>A dictionary holding all properties and values in the Json</returns>
        </member>
        <member name="T:Bifrost.Tasks.ITaskScheduler">
            <summary>
            Defines an executor for executing <see cref="T:Bifrost.Tasks.Task">tasks</see>
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.ITaskScheduler.Start(Bifrost.Tasks.Task,System.Action{Bifrost.Tasks.Task})">
            <summary>
            Start a <see cref="T:Bifrost.Tasks.Task"/> and its <see cref="T:Bifrost.Tasks.TaskOperation">operations</see>
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> to execute</param>
            <param name="taskDone">Optional <see cref="T:System.Action`1"/> that gets called when the task is done</param>
        </member>
        <member name="M:Bifrost.Tasks.ITaskScheduler.Stop(Bifrost.Tasks.Task)">
            <summary>
            Stops a <see cref="T:Bifrost.Tasks.Task"/> that is executing
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> to stop</param>
        </member>
        <member name="T:Bifrost.Tasks.ITaskManager">
            <summary>
            Defines a manager for working with <see cref="T:Bifrost.Tasks.Task">Tasks</see>
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.ITaskManager.Resume``1(Bifrost.Tasks.TaskId)">
            <summary>
            Resume a task with given <see cref="T:Bifrost.Tasks.TaskId"/>
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Tasks.Task"/> to resume</typeparam>
            <param name="taskId">The <see cref="T:Bifrost.Tasks.TaskId"/> that identifies the task</param>
            <returns>The <see cref="T:Bifrost.Tasks.Task"/>that is resumed</returns>
        </member>
        <member name="M:Bifrost.Tasks.ITaskManager.Start``1">
            <summary>
            Start a given task
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Tasks.Task"/> to start</typeparam>
            <returns>The <see cref="T:Bifrost.Tasks.Task"/> that was started</returns>
        </member>
        <member name="M:Bifrost.Tasks.ITaskManager.Stop(Bifrost.Tasks.TaskId)">
            <summary>
            Stop a task by its <see cref="T:Bifrost.Tasks.TaskId"/>
            </summary>
            <param name="taskId"><see cref="T:Bifrost.Tasks.TaskId"/> of the task to stop</param>
        </member>
        <member name="M:Bifrost.Tasks.ITaskManager.Pause(Bifrost.Tasks.TaskId)">
            <summary>
            Pause a task by its <see cref="T:Bifrost.Tasks.TaskId"/>
            </summary>
            <param name="taskId"><see cref="T:Bifrost.Tasks.TaskId"/> of the task to stop</param>
        </member>
        <member name="T:Bifrost.Tasks.ITaskRepository">
            <summary>
            Defines a repository for working with <see cref="T:Bifrost.Tasks.Task">tasks</see>
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.ITaskRepository.LoadAll">
            <summary>
            Load all tasks
            </summary>
            <returns>A collection of <see cref="T:Bifrost.Tasks.Task">Tasks</see></returns>
        </member>
        <member name="M:Bifrost.Tasks.ITaskRepository.Load(Bifrost.Tasks.TaskId)">
            <summary>
            Load a specific <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
            <param name="taskId"><see cref="T:Bifrost.Tasks.TaskId"/> of the task</param>
            <returns>The loaded <see cref="T:Bifrost.Tasks.Task"/></returns>
        </member>
        <member name="M:Bifrost.Tasks.ITaskRepository.Save(Bifrost.Tasks.Task)">
            <summary>
            Save a <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> to save</param>
        </member>
        <member name="M:Bifrost.Tasks.ITaskRepository.Delete(Bifrost.Tasks.Task)">
            <summary>
            Delete a task <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> to delete</param>
        </member>
        <member name="M:Bifrost.Tasks.ITaskRepository.DeleteById(Bifrost.Tasks.TaskId)">
            <summary>
            Delete a <see cref="T:Bifrost.Tasks.Task"/> by its <see cref="T:Bifrost.Tasks.TaskId">identifier</see>
            </summary>
            <param name="taskId"><see cref="T:Bifrost.Tasks.TaskId"/> of the task</param>
        </member>
        <member name="T:Bifrost.Tasks.ITaskStatusReporter">
            <summary>
            Defines a interface for receiving status reports for tasks
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.ITaskStatusReporter.Started(Bifrost.Tasks.Task)">
            <summary>
            Gets called when a task has been started
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> that was started</param>
        </member>
        <member name="M:Bifrost.Tasks.ITaskStatusReporter.Stopped(Bifrost.Tasks.Task)">
            <summary>
            Gets called when a task has been stopped
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> that was stopped</param>
        </member>
        <member name="M:Bifrost.Tasks.ITaskStatusReporter.Paused(Bifrost.Tasks.Task)">
            <summary>
            Gets called when a task has been paused
            </summary>
            <param name="task"></param>
        </member>
        <member name="M:Bifrost.Tasks.ITaskStatusReporter.Resumed(Bifrost.Tasks.Task)">
            <summary>
            Gets called when a task has been resumed
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> that was resumed</param>
        </member>
        <member name="M:Bifrost.Tasks.ITaskStatusReporter.StateChanged(Bifrost.Tasks.Task)">
            <summary>
            Gets called when a task changes state
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> that was changed</param>
        </member>
        <member name="T:Bifrost.Tasks.Task">
            <summary>
            Defines a task that can run and can potentially be paused, resumed and persisted
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.Task.Begin">
            <summary>
            Gets called when the task is about to begin
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.Task.End">
            <summary>
            Gets called when the task is ended, meaning when all the operations are done
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.Task.Progress">
            <summary>
            Progress the state, causes a <see cref="T:Bifrost.Tasks.TaskStateChange"/> event
            </summary>
        </member>
        <member name="E:Bifrost.Tasks.Task.StateChange">
            <summary>
            The event that gets called when a state change has occured on the <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
        </member>
        <member name="P:Bifrost.Tasks.Task.CurrentOperation">
            <summary>
            Gets or sets the current operation the task is on
            </summary>
        </member>
        <member name="P:Bifrost.Tasks.Task.Id">
            <summary>
            <see cref="T:Bifrost.Tasks.TaskId">Identifier</see> of the task
            </summary>
        </member>
        <member name="P:Bifrost.Tasks.Task.Operations">
            <summary>
            Get the operations for the task
            </summary>
        </member>
        <member name="P:Bifrost.Tasks.Task.CanRunOperationsAsynchronously">
            <summary>
            Gets wether or not operations can run asynchronously, default is true
            </summary>
            <remarks>
            Override this to change the default behavior of it running everything asynchronously
            </remarks>
        </member>
        <member name="P:Bifrost.Tasks.Task.IsDone">
            <summary>
            Gets a boolean telling if the task is done or not
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bifrost.Tasks.TaskEntity">
            <summary>
            Represents an enity of a <see cref="T:Bifrost.Tasks.Task"/> that can be persisted
            </summary>
        </member>
        <member name="P:Bifrost.Tasks.TaskEntity.Id">
            <summary>
            Gets or sets the Id of the <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
        </member>
        <member name="P:Bifrost.Tasks.TaskEntity.Type">
            <summary>
            Gets or sets the type of the <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
        </member>
        <member name="P:Bifrost.Tasks.TaskEntity.CurrentOperation">
            <summary>
            Gets or sets the current operation within the <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
        </member>
        <member name="P:Bifrost.Tasks.TaskEntity.State">
            <summary>
            Gets or sets any state that exists explicitly on the custom <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
        </member>
        <member name="T:Bifrost.Tasks.TaskRepository">
            <summary>
            Represents a <see cref="T:Bifrost.Tasks.ITaskRepository"/>
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.TaskRepository.#ctor(Bifrost.Entities.IEntityContext{Bifrost.Tasks.TaskEntity},Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Tasks.TaskRepository"/>
            </summary>
            <param name="entityContext"><see cref="T:Bifrost.Entities.IEntityContext`1"/> that is used for persisting <see cref="T:Bifrost.Tasks.Task">tasks</see></param>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to use for creating instances of <see cref="T:Bifrost.Tasks.Task">tasks</see></param>
        </member>
        <member name="T:Bifrost.Tasks.TaskScheduler">
            <summary>
            Represents a <see cref="T:Bifrost.Tasks.ITaskScheduler"/>
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.TaskScheduler.#ctor(Bifrost.Concurrency.IScheduler)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Tasks.TaskScheduler"/>
            </summary>
            <param name="scheduler"><see cref="T:Bifrost.Concurrency.IScheduler"/> used to schedule operations from tasks</param>
        </member>
        <member name="T:Bifrost.Tasks.TaskId">
            <summary>
            Defines an identifier for <see cref="T:Bifrost.Tasks.Task">Tasks</see>
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.TaskId.New">
            <summary>
            Create a new <see cref="T:Bifrost.Tasks.TaskId"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Tasks.TaskId.op_Implicit(Bifrost.Tasks.TaskId)~System.Guid">
            <summary>
            Implicitly convert from <see cref="T:Bifrost.Tasks.TaskId"/> to <see cref="T:System.Guid"/>
            </summary>
            <param name="taskId"><see cref="T:Bifrost.Tasks.TaskId"/> to convert from</param>
            <returns>The <see cref="T:System.Guid"/> from the <see cref="T:Bifrost.Tasks.TaskId"/></returns>
        </member>
        <member name="M:Bifrost.Tasks.TaskId.op_Implicit(System.Guid)~Bifrost.Tasks.TaskId">
            <summary>
            Implicitly convert from <see cref="T:System.Guid"/> to <see cref="T:Bifrost.Tasks.TaskId"/>
            </summary>
            <param name="taskId"><see cref="T:System.Guid"/> to convert from</param>
            <returns>The <see cref="T:Bifrost.Tasks.TaskId"/> created from the <see cref="T:System.Guid"/> </returns>
        </member>
        <member name="P:Bifrost.Tasks.TaskId.Value">
            <summary>
            Gets or sets the actual value
            </summary>
        </member>
        <member name="T:Bifrost.Tasks.TaskManager">
            <summary>
            Represents a <see cref="T:Bifrost.Tasks.ITaskManager"/>
            </summary>
        </member>
        <member name="M:Bifrost.Tasks.TaskManager.#ctor(Bifrost.Tasks.ITaskRepository,Bifrost.Tasks.ITaskScheduler,Bifrost.Execution.ITypeImporter,Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Bifrost.Tasks.TaskManager"/>
            </summary>
            <param name="taskRepository">A <see cref="T:Bifrost.Tasks.ITaskRepository"/> to load / save <see cref="T:Bifrost.Tasks.Task">tasks</see></param>
            <param name="taskScheduler">A <see cref="T:Bifrost.Tasks.ITaskScheduler"/> for executing tasks and their operations</param>
            <param name="typeImporter">A <see cref="T:Bifrost.Execution.ITypeImporter"/> used for importing <see cref="T:Bifrost.Tasks.ITaskStatusReporter"/></param>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> to use for getting instances</param>
        </member>
        <member name="T:Bifrost.Tasks.TaskOperation">
            <summary>
            Represents the method that gets called to handle a operation within a <see cref="T:Bifrost.Tasks.Task"/>
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> that owns the operation</param>
            <param name="operationIndex">The index of the operation within its declaring task</param>
        </member>
        <member name="T:Bifrost.Tasks.TaskStateChange">
            <summary>
            Represents the method that gets called from a <see cref="T:Bifrost.Tasks.Task"/> when it has progress or state change
            </summary>
            <param name="task"><see cref="T:Bifrost.Tasks.Task"/> that changed</param>
        </member>
        <member name="T:Bifrost.Tenancy.ICanPopulateTenant">
            <summary>
            Defines a visitor that takes part in populating all the details for a tenant
            </summary>
        </member>
        <member name="M:Bifrost.Tenancy.ICanPopulateTenant.Visit(Bifrost.Tenancy.Tenant,System.Object)">
            <summary>
            Method that gets called when the <see cref="T:Bifrost.Tenancy.Tenant"/> is being set up
            </summary>
            <param name="tenant"><see cref="T:Bifrost.Tenancy.Tenant"/> that is being populated</param>
            <param name="details">Details for the <see cref="T:Bifrost.Tenancy.Tenant"/> - can be expanded on</param>
        </member>
        <member name="T:Bifrost.Tenancy.ITenant">
            <summary>
            Defines a tenant in the system
            </summary>
        </member>
        <member name="P:Bifrost.Tenancy.ITenant.Details">
            <summary>
            Gets the details for the tenant
            </summary>
        </member>
        <member name="T:Bifrost.Tenancy.ITenantManager">
            <summary>
            Defines a manager for <see cref="T:Bifrost.Tenancy.Tenant"/>
            </summary>
        </member>
        <member name="P:Bifrost.Tenancy.ITenantManager.Current">
            <summary>
            Gets the current <see cref="T:Bifrost.Tenancy.ITenant"/>
            </summary>
        </member>
        <member name="T:Bifrost.Tenancy.Tenant">
            <summary>
            Represents a <see cref="T:Bifrost.Tenancy.ITenant"/> in the system
            </summary>
        </member>
        <member name="T:Bifrost.Tenancy.TenantManager">
            <summary>
            Represents a <see cref="T:Bifrost.Tenancy.ITenantManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.ChapterValidationService">
            <summary>
            Represents a <see cref="T:Bifrost.Validation.IChapterValidationService">IChapterValidationService</see>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.IChapterValidationService">
            <summary>
            Validates that the chapter is valid and conforms to specified business rules
            </summary>
        </member>
        <member name="M:Bifrost.Validation.IChapterValidationService.Validate(Bifrost.Sagas.IChapter)">
            <summary>
            Validate the chapter
            </summary>
            <param name="chapter">Instance to be validated</param>
            <returns>A collection of ValidationResults that indicate any invalid properties / rules</returns>
        </member>
        <member name="M:Bifrost.Validation.ChapterValidationService.#ctor(Bifrost.Validation.IChapterValidatorProvider)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.ChapterValidationService"/>
            </summary>
            <param name="chapterValidatorProvider">A <see cref="T:Bifrost.Validation.IChapterValidatorProvider"/> to use for getting validators from</param>
        </member>
        <member name="T:Bifrost.Sagas.ICanTransitionTo`1">
            <summary>
            Defines a marker interface to allow transitions between chapters
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Sagas.IChapter"/> that can be transitioned to</typeparam>
        </member>
        <member name="T:Bifrost.Sagas.ISaga">
            <summary>
            Defines a saga
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.SetCurrentChapter(Bifrost.Sagas.IChapter)">
            <summary>
            Set the current chapter
            </summary>
            <param name="chapter"><see cref="T:Bifrost.Sagas.IChapter"/> to set as current</param>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.SetCurrentChapter``1">
            <summary>
            Set the current chapter
            </summary>
            <typeparam name="T"><see cref="T:Bifrost.Sagas.IChapter"/> to set as current</typeparam>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.AddChapter(Bifrost.Sagas.IChapter)">
            <summary>
            Add a chapter to the saga
            </summary>
            <param name="chapter"><see cref="T:Bifrost.Sagas.IChapter"/> to add</param>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Contains``1">
            <summary>
            Check if the saga contains a chapter based on the type of the chapter
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Sagas.IChapter"/> to check if saga contains</typeparam>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Contains(System.Type)">
            <summary>
            Check if the saga contains a chapter based on the type of the chapter
            </summary>
            <param name="type">Chapter type</param>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Get``1">
            <summary>
            Get a specific chapter by type
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Sagas.IChapter"/> to get</typeparam>
            <returns>Instance of chapter</returns>
            <exception cref="T:Bifrost.Sagas.ChapterDoesNotExistException">Thrown if chapter not in saga</exception>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Begin">
            <summary>
            Begins the Saga
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Continue">
            <summary>
            Continues the Saga
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.Conclude">
            <summary>
            Concludes the Saga
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.OnBegin">
            <summary>
            Method that is executed when the Saga is beginning.
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.OnContinue">
            <summary>
            Method that is executed when the Saga is continuing.
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.OnConclude">
            <summary>
            Method that is executed when the Saga is concludiung.
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.GetUncommittedEvents">
            <summary>
            Get uncommitted events from the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.SetUncommittedEvents(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Set any uncommitted into the <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:Bifrost.Sagas.ISaga.SaveUncommittedEventsToEventStore(Bifrost.Events.IEventStore)">
            <summary>
            Save any uncommitted events to a given <see cref="T:Bifrost.Events.IEventStore"/>
            </summary>
            <param name="eventStore"><see cref="T:Bifrost.Events.IEventStore"/> to save the events to</param>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.Id">
            <summary>
            Gets or sets the unique identifier of a saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.Partition">
            <summary>
            Gets or sets what partition the saga belongs to
            </summary>
            <remarks>
            Partitions are used to group sagas into logical partitions
            </remarks>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.Key">
            <summary>
            Gets or sets the unique key within a partition for a saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.Chapters">
            <summary>
            Gets the chapters in the saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.CurrentChapter">
            <summary>
            Gets the current chapter in the saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.ChapterProperties">
            <summary>
            Gets an array of PropertyInfo objects that reflect any Chapter instances that are available
            as properties on the Saga
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.CurrentState">
            <summary>
            Gets and sets the SagaState.  Only to be used directly by serialization.
            </summary>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.IsNew">
            <summary>
            Indicates whether the saga is continuing
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.IsBegun">
            <summary>
            Indicates whether the saga has Begun
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.IsContinuing">
            <summary>
            Indicates whether the saga is continuing
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Sagas.ISaga.IsConcluded">
            <summary>
            Indicates whether the saga is concluded
            </summary>
            <returns></returns>
        </member>
        <member name="T:Bifrost.Sagas.IChapter">
            <summary>
            Defines a chapter in a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.IChapter.OnCreated">
            <summary>
            Lifecycle method for a <see cref="T:Bifrost.Sagas.IChapter"/>, gets called when the <see cref="T:Bifrost.Sagas.IChapter"/> is created
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.IChapter.OnSetCurrent">
            <summary>
            Lifecycle method for a <see cref="T:Bifrost.Sagas.IChapter"/>, gets called when the <see cref="T:Bifrost.Sagas.IChapter"/> is set as current
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.IChapter.OnTransitionedTo">
            <summary>
            Lifecycle method for a <see cref="T:Bifrost.Sagas.IChapter"/>, gets called when the <see cref="T:Bifrost.Sagas.IChapter"/> is transitioned to
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ISagaNarrator">
            <summary>
            Defines the recorder for <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ISagaNarrator.Begin``1">
            <summary>
            Begin a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <typeparam name="T">Type of saga to begin</typeparam>
            <returns>An instance of the new saga</returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaNarrator.Continue(System.Guid)">
            <summary>
            Continue a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="id">Identifier of the saga</param>
            <returns>An instance of the <see cref="T:Bifrost.Sagas.ISaga"/></returns>
        </member>
        <member name="M:Bifrost.Sagas.ISagaNarrator.Conclude(Bifrost.Sagas.ISaga)">
            <summary>
            Conclude a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
            <param name="saga"></param>
            <returns></returns>
            <remarks>
            Conclusion means that the saga is in fact not available any more
            </remarks>
        </member>
        <member name="M:Bifrost.Sagas.ISagaNarrator.TransitionTo``1(Bifrost.Sagas.ISaga)">
            <summary>
            Transition to a <see cref="T:Bifrost.Sagas.IChapter"/> by type
            </summary>
            <typeparam name="T">Type of <see cref="T:Bifrost.Sagas.IChapter"/> to transition to</typeparam>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to transition</param>
            <returns><see cref="T:Bifrost.Sagas.ChapterTransition"/> Result of the transition attempt.  If successful, this will contain instance of the target <see cref="T:Bifrost.Sagas.IChapter"/> that was transitioned to.  Else, the validation errors.</returns>
            <remarks>
            If the chapter does not exist it will create it
            </remarks>
        </member>
        <member name="T:Bifrost.Sagas.Saga">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.Saga.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.Saga"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.CommandsConfiguration">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.ICommandsConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ICommandsConfiguration">
            <summary>
            Defines configuration for commands
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.ICommandsConfiguration.CommandCoordinatorType">
            <summary>
            Gets or sets the type <see cref="T:Bifrost.Commands.ICommandCoordinator"/> to use
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.ConfigurationExtensions">
            <summary>
            Provides Configuration extensions
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationExtensions.WithSystemName(Bifrost.Configuration.IConfigure,System.String)">
            <summary>
            Configures the running system with a name
            </summary>
            <param name="configure"><see cref="T:Bifrost.Configuration.IConfigure"/> instance to configure</param>
            <param name="name">Name of the system</param>
            <returns>Chained <see cref="T:Bifrost.Configuration.IConfigure"/> instance</returns>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationExtensions.Asynchronous(Bifrost.Configuration.IEventsConfiguration,System.Action{Bifrost.Configuration.IEventsConfiguration})">
            <summary>
            Configures events to be persisted asynchronously
            </summary>
            <param name="configuration"><see cref="T:Bifrost.Configuration.IEventsConfiguration"/> instance to configure</param>
            <param name="configurationAction">Callback for further configuring the <see cref="T:Bifrost.Configuration.IEventsConfiguration"/></param>
            <returns>Chained <see cref="T:Bifrost.Configuration.IConfigure"/> instance</returns>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationExtensions.BindEntityContextTo``1(Bifrost.Configuration.IEntityContextConfiguration,Bifrost.Execution.IContainer)">
            <summary>
            Binds given entity context for a specific type (IEntityContext of T)
            </summary>
            <typeparam name="T">The Type that this vbinding will work for</typeparam>
            <param name="configuration">EntityContextConfiguration instance</param>
            <param name="container">Container</param>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationExtensions.BindDefaultEntityContext(Bifrost.Configuration.IEntityContextConfiguration,Bifrost.Execution.IContainer)">
            <summary>
            Binds given entity context as default IEntityContext
            </summary>
            <param name="configuration">EntityContextConfiguration instance</param>
            <param name="container">Container</param>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationExtensions.ResolvePrincipalsUsing``1(Bifrost.Configuration.ISecurityConfiguration)">
            <summary>
            Configure what <see cref="T:Bifrost.Security.ICanResolvePrincipal"/> to use for resolving principals
            </summary>
            <typeparam name="T">Type to use for resolving the principal</typeparam>
            <param name="securityConfiguration"><see cref="T:Bifrost.Configuration.ISecurityConfiguration"/> to configure</param>
        </member>
        <member name="M:Bifrost.Configuration.ConfigurationExtensions.WithCallContextTypeOf``1(Bifrost.Configuration.ICallContextConfiguration)">
            <summary>
            Configure what <see cref="T:Bifrost.Execution.ICallContext"/> to use
            </summary>
            <typeparam name="T">Type of use as <see cref="T:Bifrost.Execution.ICallContext"/></typeparam>
            <param name="callContextConfiguration"><see cref="T:Bifrost.Configuration.ICallContextConfiguration"/> to configure</param>
        </member>
        <member name="T:Bifrost.Configuration.Configure">
            <summary>
            Represents the default <see cref="T:Bifrost.Configuration.IConfigure"/> type
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Configure.DiscoverAndConfigure">
            <summary>
            Configure by letting Bifrost discover anything that implements the discoverable configuration interfaces
            </summary>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Configuration.Configure.With(Bifrost.Execution.IContainer)">
            <summary>
            Configure with a specific <see cref="T:Bifrost.Execution.IContainer"/> and the <see cref="T:Bifrost.Execution.BindingLifecycle">Lifecycle</see> of objects set to none
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to configure with</param>
            <returns>Configuration object to continue configuration on</returns>
        </member>
        <member name="M:Bifrost.Configuration.Configure.With(Bifrost.Execution.IContainer,Bifrost.Execution.BindingLifecycle)">
            <summary>
            Configure with a specific <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to configure with</param>
            <param name="defaultObjectLifecycle">Default <see cref="T:Bifrost.Execution.BindingLifecycle"/> for object creation/management</param>
            <returns>Configuration object to continue configuration on</returns>
        </member>
        <member name="M:Bifrost.Configuration.Configure.Reset">
            <summary>
            Reset configuration
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Configure.With(Bifrost.Execution.IContainer,Bifrost.Configuration.Defaults.IDefaultConventions,Bifrost.Configuration.Defaults.IDefaultBindings)">
            <summary>
            Configure with a specific <see cref="T:Bifrost.Execution.IContainer"/>, <see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> and <see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to configure with</param>
            <param name="defaultConventions"><see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> to use</param>
            <param name="defaultBindings"><see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/> to use</param>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Configuration.Configure.With(Bifrost.Execution.IContainer,Bifrost.Execution.BindingLifecycle,Bifrost.Configuration.Defaults.IDefaultConventions,Bifrost.Configuration.Defaults.IDefaultBindings)">
            <summary>
            Configure with a specific <see cref="T:Bifrost.Execution.IContainer"/>, <see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> and <see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to configure with</param>
            <param name="defaultObjectLifecycle">Default <see cref="T:Bifrost.Execution.BindingLifecycle"/> for object creation/management</param>
            <param name="defaultConventions"><see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> to use</param>
            <param name="defaultBindings"><see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/> to use</param>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Configuration.Configure.Instance">
            <summary>
            Gets the static instance of <see cref="T:Bifrost.Configuration.Configure"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Defaults.DefaultBindings">
            <summary>
            Represents a <see cref="T:Bifrost.Configuration.Defaults.IDefaultBindings"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Defaults.IDefaultBindings">
            <summary>
            Defines a system that sets up default bindings
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Defaults.IDefaultBindings.Initialize(Bifrost.Execution.IContainer)">
            <summary>
            Initialize the bindings with the given container
            </summary>
            <param name="container">The <see cref="T:Bifrost.Execution.IContainer"/> to define the bindings with</param>
        </member>
        <member name="T:Bifrost.Configuration.Defaults.DefaultConventions">
            <summary>
            Represents a <see cref="T:Bifrost.Configuration.Defaults.IDefaultConventions"/> implementation
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.Defaults.IDefaultConventions">
            <summary>
            Defines the default conventions setup
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Defaults.IDefaultConventions.Initialize">
            <summary>
            Initialize the default conventions
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.Defaults.DefaultConventions.#ctor(Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of the <see cref="T:Bifrost.Configuration.Defaults.DefaultConventions"/> class.
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.EventsConfiguration">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.IEventsConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.IEventsConfiguration">
            <summary>
            Defines the configuration for events
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.IEventsConfiguration.AddEventStoreChangeNotifier(System.Type)">
            <summary>
            Add a <see cref="T:Bifrost.Events.IEventStoreChangeNotifier"/> type for the configuration
            </summary>
            <param name="type"></param>
        </member>
        <member name="P:Bifrost.Configuration.IEventsConfiguration.UncommittedEventStreamCoordinatorType">
            <summary>
            Gets or sets the type of <see cref="T:Bifrost.Events.IUncommittedEventStreamCoordinator"/> used for coordinating events that will be committed
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IEventsConfiguration.EventStoreType">
            <summary>
            Gets or sets the type of <see cref="T:Bifrost.Events.IEventStore"/> to use for handling events
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IEventsConfiguration.EventSubscriptionsType">
            <summary>
            Gets or sets the type of <see cref="T:Bifrost.Events.IEventSubscriptions"/> to use for handling event subscriptions
            </summary>
        </member>
        <member name="M:Bifrost.Configuration.EventsConfiguration.#ctor(Bifrost.Events.IEventStoreChangeManager)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Configuration.EventsConfiguration"/>
            </summary>
            <param name="eventStoreChangeManager">An instance of <see cref="T:Bifrost.Events.IEventStoreChangeManager"/></param>
        </member>
        <member name="T:Bifrost.Configuration.IStorageConfiguration">
            <summary>
            Defines a generic storage configuration
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IStorageConfiguration.Storage">
            <summary>
            Gets or sets the configuration for storage
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSourceExtensions">
            <summary>
            Extensions for <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSourceExtensions.GetOnMethod(Bifrost.Events.EventSource,Bifrost.Events.IEvent)">
            <summary>
            Get handle method from an <see cref="T:Bifrost.Events.EventSource"/> for a specific <see cref="T:Bifrost.Events.IEvent"/>, if any
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.EventSource"/> to get method from</param>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> to get method for</param>
            <returns><see cref="T:System.Reflection.MethodInfo"/> containing information about the handle method, null if none exists</returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceExtensions.IsStateless(Bifrost.Events.EventSource)">
            <summary>
            Indicates whether the Event Source maintains state and requires to handles events to restore that state
            </summary>
            <param name="eventSource"><see cref="T:Bifrost.Events.EventSource"/> to test for state</param>
            <returns>true if the Event Source does not maintain state</returns>
        </member>
        <member name="T:Bifrost.Execution.BindingConventionManager">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IBindingConventionManager"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IBindingConventionManager">
            <summary>
            Defines a manager for binding conventions
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IBindingConventionManager.Add(System.Type)">
            <summary>
            Add a convention by type
            </summary>
            <param name="type">Type of convention to add</param>
            <remarks>
            The type must implement the <see cref="T:Bifrost.Execution.IBindingConvention"/>
            </remarks>
        </member>
        <member name="M:Bifrost.Execution.IBindingConventionManager.Add``1">
            <summary>
            Add a convention by type generically
            </summary>
            <typeparam name="T">Type of convention to add</typeparam>
        </member>
        <member name="M:Bifrost.Execution.IBindingConventionManager.Initialize">
            <summary>
            Initialize system
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IBindingConventionManager.DiscoverAndInitialize">
            <summary>
            Discover bindings and initialize
            </summary>
        </member>
        <member name="M:Bifrost.Execution.BindingConventionManager.#ctor(Bifrost.Execution.IContainer,Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes a new instance <see cref="T:Bifrost.Execution.BindingConventionManager"/>
            </summary>
            <param name="container">The <see cref="T:Bifrost.Execution.IContainer"/> that bindings are resolved to</param>
            <param name="typeDiscoverer"><see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to discover binding conventions with</param>
        </member>
        <member name="T:Bifrost.Execution.DefaultConvention">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IBindingConvention">IBindingConvention</see>
            that will apply default conventions
            </summary>
            <remarks>
            Any interface being resolved and is prefixed with I and have an implementation
            with the same name in the same namespace but without the prefix I, will automatically
            be resolved with this convention.
            </remarks>
        </member>
        <member name="T:Bifrost.Execution.BaseConvention">
            <summary>
            Defines a base abstract class for Binding conventions for any <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IBindingConvention">
            <summary>
            Defines the basic functionality for a convention that can be applied
            to bindings for a <see cref="T:Bifrost.Execution.IContainer"/>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IBindingConvention.CanResolve(Bifrost.Execution.IContainer,System.Type)">
            <summary>
            Checks wether or not a given <see cref="T:System.Type">Service</see> can be resolved by the convention
            </summary>
            <param name="container">Container to resolve binding for</param>
            <param name="service">Service that needs to be resolved</param>
            <returns>True if it can resolve it, false if not</returns>
        </member>
        <member name="M:Bifrost.Execution.IBindingConvention.Resolve(Bifrost.Execution.IContainer,System.Type)">
            <summary>
            Resolve a <see cref="T:System.Type">Service</see>
            </summary>
            <param name="container">Container to resolve binding for</param>
            <param name="service">Service that needs to be resolved</param>
        </member>
        <member name="M:Bifrost.Execution.BaseConvention.GetScopeForTarget(System.Type)">
            <summary>
            Handle scope for a target type
            </summary>
            <param name="targetType">Target type</param>
            <returns><see cref="T:Bifrost.Execution.BindingLifecycle"/> for the target type</returns>
            <remarks>
            If the target is marked with the <see cref="T:Bifrost.Execution.SingletonAttribute">Singleton</see> attribute, it will use
            that scope instead, as that is a explicit implementation information.
            
            Otherwise it will use the DefaultScope
            </remarks>
        </member>
        <member name="P:Bifrost.Execution.BaseConvention.DefaultScope">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Execution.BindingLifecycle">ActivationScope</see> that will be used as default
            </summary>
        </member>
        <member name="M:Bifrost.Execution.DefaultConvention.#ctor">
            <summary>
            Initializes a new instance of <see creF="DefaultConvention">DefaultConvention</see>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IContainer">
            <summary>
            Defines a container for resolving types
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Get``1">
            <summary>
            Get an instance of a specific type
            </summary>
            <typeparam name="T">Type to get instance of</typeparam>
            <returns>Instance of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Get``1(System.Boolean)">
            <summary>
            Get an instance of a specific type
            </summary>
            <typeparam name="T">Type to get instance of</typeparam>
            <param name="optional">If the binding is optional, return null and not throw an exception</param>
            <returns>Instance of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Get(System.Type)">
            <summary>
            Get an instance of a specific type
            </summary>
            <param name="type">Type to get instance of</param>
            <returns>Instance of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Get(System.Type,System.Boolean)">
            <summary>
            Get an instance of a specific type
            </summary>
            <param name="type">Type to get instance of</param>
            <param name="optional">If the binding is optional, return null and not throw an exception</param>
            <returns>Instance of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.GetAll``1">
            <summary>
            Get all instances of a specific type
            </summary>
            <typeparam name="T">Type to get instances of</typeparam>
            <returns>Instances of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.HasBindingFor(System.Type)">
            <summary>
            Gets wether or not a specific service has a binding 
            </summary>
            <param name="type">Type of service to check</param>
            <returns>True if service has binding, false if not</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.HasBindingFor``1">
            <summary>
            Gets wether or not a specific service has a binding 
            </summary>
            <typeparam name="T">Type of service to check</typeparam>
            <returns>True if service has binding, false if not</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.GetAll(System.Type)">
            <summary>
            Get all instances of a specific type
            </summary>
            <param name="type">Type to get instances for</param>
            <returns>Instances of the type</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.GetBoundServices">
            <summary>
            Get all services that have been bound
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> containing all bound services</returns>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Func{System.Type})">
            <summary>
            Bind a service type to a callback that can resolve it
            </summary>
            <param name="service">Service to bind</param>
            <param name="resolveCallback">Callback that gets called to resolve it</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Func{System.Type})">
            <summary>
            Bind a service type to a callback that can resolve it
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="resolveCallback">Callback that gets called to resolve it</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Func{System.Type},Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service type to a callback that can resolve it with given lifecycle
            </summary>
            <param name="service">Service to bind</param>
            <param name="resolveCallback">Callback that gets called to resolve it</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Func{System.Type},Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service type to a callback that can resolve it with given lifecycle
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="resolveCallback">Callback that gets called to resolve it</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Func{``0})">
            <summary>
            Bind a service type to a callback that can resolve the instance
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="resolveCallback">Callback that gets called to resolve the instance</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Func{System.Object})">
            <summary>
            Bind a service type to a callback that can resolve the instance
            </summary>
            <param name="service">Service to bind</param>
            <param name="resolveCallback">Callback that gets called to resolve the instance</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Func{``0},Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service type to a callback that can resolve the instance
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="resolveCallback">Callback that gets called to resolve the instance</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Func{System.Object},Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service type to a callback that can resolve the instance
            </summary>
            <param name="service">Service to bind</param>
            <param name="resolveCallback">Callback that gets called to resolve the instance</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Type)">
            <summary>
            Bind a service to a specific type 
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="type">Target type to bind to</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Type)">
            <summary>
            Bind a service to a specific type 
            </summary>
            <param name="service">Service to bind</param>
            <param name="type">Target type to bind to</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(System.Type,Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service to a specific type with given lifecycle
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="type">Target type to bind to</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Type,Bifrost.Execution.BindingLifecycle)">
            <summary>
            Bind a service to a specific type with given lifecycle
            </summary>
            <param name="service">Service to bind</param>
            <param name="type">Target type to bind to</param>
            <param name="lifecycle">Lifecycle of the service</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind``1(``0)">
            <summary>
            Bind a service to a specific instance
            </summary>
            <typeparam name="T">Service to bind</typeparam>
            <param name="instance">Instance to bind to</param>
        </member>
        <member name="M:Bifrost.Execution.IContainer.Bind(System.Type,System.Object)">
            <summary>
            Bind a service to a specific instance
            </summary>
            <param name="service">Service to bind</param>
            <param name="instance">Instance to bind to</param>
        </member>
        <member name="P:Bifrost.Execution.IContainer.DefaultLifecycle">
            <summary>
            Gets or sets the <see cref="T:Bifrost.Execution.BindingLifecycle"/> for objects.
            This property usually guides the implementing container for default bindings it may create for types that 
            does not have an explicit binding and is not abstract or an interface
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.SagaConclusion">
            <summary>
            Represents the conclusion of a saga
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.SagaNotInChapterException">
            <summary>
            The exception that is thrown when a <see cref="T:Bifrost.Sagas.ISaga"/> is not in a <see cref="T:Bifrost.Sagas.IChapter"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.Chapter">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.IChapter"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ChapterAlreadyExistException">
            <summary>
            The exception that is thrown if a <see cref="T:Bifrost.Sagas.IChapter"/> already exists within a <see cref="T:Bifrost.Sagas.ISaga"/>
            </summary>
        </member>
        <member name="T:Bifrost.Sagas.ChapterTransitionNotAllowedException">
            <summary>
            The exception that is thrown if a transition between two chapters are not allowed
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ChapterTransitionNotAllowedException.#ctor(System.Type,System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Sagas.ChapterTransitionNotAllowedException"/>
            </summary>
            <param name="from">From <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <param name="to">To <see cref="T:Bifrost.Sagas.IChapter"/></param>
        </member>
        <member name="T:Bifrost.Sagas.ChapterTransitionHelper">
            <summary>
            Provides helper methods for chapters and transitions
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.ChapterTransitionHelper.CanTransition``2">
            <summary>
            Check if a transition is allowed between to chapters by type
            </summary>
            <typeparam name="TF">From <see cref="T:Bifrost.Sagas.IChapter"/></typeparam>
            <typeparam name="TT">To <see cref="T:Bifrost.Sagas.IChapter"/></typeparam>
            <returns>True if transition is allowed, false if not</returns>
        </member>
        <member name="M:Bifrost.Sagas.ChapterTransitionHelper.CanTransition(Bifrost.Sagas.IChapter,Bifrost.Sagas.IChapter)">
            <summary>
            Check if a transition is allowed between to chapters by instance of chapters
            </summary>
            <param name="fromChapter">From <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <param name="toChapter">To <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <returns>True if transition is allowed, false if not</returns>
        </member>
        <member name="M:Bifrost.Sagas.ChapterTransitionHelper.CanTransition(System.Type,System.Type)">
            <summary>
            Check if a transition is allowed between to chapters by type
            </summary>
            <param name="fromChapterType">From <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <param name="toChapterType">To <see cref="T:Bifrost.Sagas.IChapter"/></param>
            <returns>True if transition is allowed, false if not</returns>
        </member>
        <member name="T:Bifrost.Sagas.SagaNarrator">
            <summary>
            Represents a <see cref="T:Bifrost.Sagas.ISagaNarrator"/>
            </summary>
        </member>
        <member name="M:Bifrost.Sagas.SagaNarrator.#ctor(Bifrost.Sagas.ISagaLibrarian,Bifrost.Execution.IContainer,Bifrost.Validation.IChapterValidationService,Bifrost.Events.IEventStore)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Sagas.SagaNarrator"/>
            </summary>
            <param name="librarian"><see cref="T:Bifrost.Sagas.ISagaLibrarian"/> to use for handling sagas</param>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> for creating instances</param>
            <param name="chapterValidationService"><see cref="T:Bifrost.Validation.IChapterValidationService"/> for validating chapters</param>
            <param name="eventStore"></param>
        </member>
        <member name="T:Bifrost.Validation.ChapterValidator`1">
            <summary>
            Base class to inherit from for validation of a Chapter.
            </summary>
            <remarks>
            Chapter validators inherting from this base class will be automatically registered.
            </remarks>
            <typeparam name="T">Concrete type of the Chapter to validate</typeparam>
        </member>
        <member name="T:Bifrost.Validation.ICanValidate`1">
            <summary>
            Defines the behavior of being able to do validation
            </summary>
            <typeparam name="T">Type it can validate</typeparam>
        </member>
        <member name="T:Bifrost.Validation.ICanValidate">
            <summary>
            Defines the behavior of being able to do validation
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ICanValidate.ValidateFor(System.Object)">
            <summary>
            Validates that the object is in a valid state.
            </summary>
            <param name="target">The target to validate</param>
            <returns>A collection of ValidationResults.  An empty collection indicates a valid command.</returns>
        </member>
        <member name="M:Bifrost.Validation.ICanValidate`1.ValidateFor(`0)">
            <summary>
            Validates that the object is in a valid state.
            </summary>
            <param name="target">The target to validate</param>
            <returns>A collection of ValidationResults.  An empty collection indicates a valid command.</returns>
        </member>
        <member name="T:Bifrost.Validation.IChapterValidator">
            <summary>
            Marker interface for a Saga <see href="IChapter">Chapter</see> validator
            </summary>
        </member>
        <member name="T:Bifrost.Validation.ChapterValidatorProvider">
            <summary>
            Represents a <see cref="T:Bifrost.Validation.IChapterValidatorProvider"/> for providing chapter validators
            </summary>
        </member>
        <member name="T:Bifrost.Validation.IChapterValidatorProvider">
            <summary>
            Defines a provider that returns chapter-specific validators
            </summary>
        </member>
        <member name="M:Bifrost.Validation.IChapterValidatorProvider.GetValidatorFor(Bifrost.Sagas.IChapter)">
            <summary>
            Retrieves an validator specific to the chapter
            </summary>
            <param name="chapter">Chapter to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.IChapterValidatorProvider.GetValidatorFor(System.Type)">
            <summary>
            Retrieves an validator specific to the chapter type
            </summary>
            <param name="type">Type of the Chapter to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.ChapterValidatorProvider.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.ChapterValidatorProvider"/> ChapterValidatorProvider
            </summary>
            <param name="typeDiscoverer">An instance of ITypeDiscoverer to help identify and register <see cref="T:Bifrost.Validation.IChapterValidator"> IChapterValidator</see> implementations
            </param>
            <param name="container">An instance of <see cref="T:Bifrost.Execution.IContainer"/> to create concrete instances of validators</param>
        </member>
        <member name="T:Bifrost.Validation.CommandBusinessValidator`1">
            <summary>
            Base class to inherit from for basic business-rule validation of a command.
            </summary>
            <remarks>
            Commands inherting from this base class will be automatically registered.
            </remarks>
            <typeparam name="T">Concrete type of the Command to validate</typeparam>
        </member>
        <member name="T:Bifrost.Validation.Validator`1">
            <summary>
            Base class to inherit from for basic validation rules
            </summary>
            <typeparam name="T">Type to add validation rules for</typeparam>
        </member>
        <member name="M:Bifrost.Validation.Validator`1.ModelRule">
            <summary>
            Start building rules for the model
            </summary>
            <returns><see cref="!:IRuleBuilderInitial(T, T)"/> that can be used to fluently set up rules</returns>
        </member>
        <member name="T:Bifrost.Validation.ICommandBusinessValidator">
            <summary>
            Marker interface for business validators
            </summary>
        </member>
        <member name="M:Bifrost.Validation.CommandBusinessValidator`1.AddRule(System.Func{`0,System.Boolean})">
            <summary>
            Add a predicate rule based on a Func that will be called when validation occurs
            </summary>
            <param name="validateFor"><see cref="!:Func(T, bool)"/> that will be called for validation</param>
            <returns><see cref="!:IRuleBuilderOptions(T, object)"/> that can be used to fluently configure options for the rule</returns>
        </member>
        <member name="T:Bifrost.Commands.CommandHandlerInvoker">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandHandlerInvoker">ICommandHandlerInvoker</see> for handling
            command handlers that have methods called Handle() and takes specific <see cref="T:Bifrost.Commands.ICommand">commands</see>
            in as parameters
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandHandlerInvoker">
            <summary>
            Invokes a command for a command handler type
            </summary>
            <remarks>
            Typically, the default invoker handles the generic
            <see cref="T:Bifrost.Commands.IHandleCommands">command handlers</see>
            </remarks>
        </member>
        <member name="M:Bifrost.Commands.ICommandHandlerInvoker.TryHandle(Bifrost.Commands.ICommand)">
            <summary>
            Try to handle a command
            
            If it can handle it, it should handle it - and return true
            if it handled it and false if not
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command to handle</see></param>
            <returns>True if it handled it, false if not</returns>
        </member>
        <member name="M:Bifrost.Commands.CommandHandlerInvoker.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.CommandHandlerInvoker">CommandHandlerInvoker</see>
            </summary>
            <param name="discoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to use for discovering <see cref="T:Bifrost.Commands.IHandleCommands">command handlers</see></param>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> to use for getting instances of objects</param>
        </member>
        <member name="M:Bifrost.Commands.CommandHandlerInvoker.Register(System.Type)">
            <summary>
            Register a command handler explicitly 
            </summary>
            <param name="handlerType"></param>
            <remarks>
            The registration process will look into the handler and find methods that 
            are called Handle() and takes a command as parameter
            </remarks>
        </member>
        <member name="T:Bifrost.Validation.CommandInputValidator`1">
            <summary>
            Base class to inherit from for basic input validation of a command.
            </summary>
            <remarks>
            Commands inherting from this base class will be automatically registered.
            </remarks>
            <typeparam name="T">Concrete type of the Command to validate</typeparam>
        </member>
        <member name="T:Bifrost.Validation.ICommandInputValidator">
            <summary>
            Defines a marker interface for input level validator for a <see cref="T:Bifrost.Commands.ICommand"/>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.CommandPredicateRule`1">
            <summary>
            Represents the rule for a predicate in the form of a Func that will be called for validation
            </summary>
            <typeparam name="T">Type of command the validation applies to</typeparam>
        </member>
        <member name="M:Bifrost.Validation.CommandPredicateRule`1.#ctor(System.Func{`0,System.Boolean})">
            <summary>
            Creates an instance of the <see cref="!:CommandPredicateRule(T)"/>
            </summary>
            <param name="validateFor"><see cref="!:Func(T,bool)"/> that will be called for validation</param>
        </member>
        <member name="M:Bifrost.Validation.CommandPredicateRule`1.Create(System.Func{`0,System.Boolean})">
            <summary>
            Create a <see cref="!:CommandPredicateRule(T)"/> from a <see cref="!:Func(T, bool)"/> to use for validation
            </summary>
            <param name="validateFor"><see cref="!:Func(T, bool)"/> to use for validation</param>
            <returns>A <see cref="!:CommandPredicateRule(T)"/></returns>
        </member>
        <member name="T:Bifrost.Validation.CommandValidationResult">
            <summary>
            Represents the result of validation for a <see cref="T:Bifrost.Commands.ICommand"/>
            </summary>
        </member>
        <member name="M:Bifrost.Validation.CommandValidationResult.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.CommandValidationResult"/>
            </summary>
        </member>
        <member name="P:Bifrost.Validation.CommandValidationResult.CommandErrorMessages">
            <summary>
            Gets or sets the error messages related to a command, typically as a result of a failing ModelRule used from the <see cref="T:System.ComponentModel.DataAnnotations.Validator"/>
            </summary>
        </member>
        <member name="P:Bifrost.Validation.CommandValidationResult.ValidationResults">
            <summary>
            Gets or sets the validation results from any validator
            </summary>
        </member>
        <member name="T:Bifrost.Validation.CommandValidationService">
            <summary>
            Represents a <see cref="T:Bifrost.Validation.ICommandValidationService">ICommandValidationService</see>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.ICommandValidationService">
            <summary>
            Validates that a command is valid and conforms to simple business rules
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidationService.Validate(Bifrost.Commands.ICommand)">
            <summary>
            Validate the command
            </summary>
            <param name="command">Instance to be validated</param>
            <returns>Validation results for a <see cref="T:Bifrost.Commands.ICommand">Command</see></returns>
        </member>
        <member name="M:Bifrost.Validation.CommandValidationService.#ctor(Bifrost.Validation.ICommandValidatorProvider)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.CommandValidationService"/> CommandValidationService
            </summary>
            <param name="commandValidatorProvider"></param>
        </member>
        <member name="T:Bifrost.Validation.CommandValidatorProvider">
            <summary>
            Represents an instance of an <see cref="T:Bifrost.Validation.ICommandValidatorProvider">ICommandValidatorProvider.</see>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.ICommandValidatorProvider">
            <summary>
            Defines a provider that returns command-specific input and business rule validators
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidatorProvider.GetInputValidatorFor(Bifrost.Commands.ICommand)">
            <summary>
            Retrieves an input validator specific to the command
            </summary>
            <param name="command">Command to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidatorProvider.GetBusinessValidatorFor(Bifrost.Commands.ICommand)">
            <summary>
            Retrieves an business-rule validator specific to the command
            </summary>
            <param name="command">Command to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidatorProvider.GetInputValidatorFor(System.Type)">
            <summary>
            Retrieves an input validator specific to the command type
            </summary>
            <param name="type">Type of the Command to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.ICommandValidatorProvider.GetBusinessValidatorFor(System.Type)">
            <summary>
            Retrieves an business-rule validator specific to the command type
            </summary>
            <param name="type">Type of the Command to be validates</param>
            <returns>Returns specific validator or a NullValidator if no validator is available</returns>
        </member>
        <member name="M:Bifrost.Validation.CommandValidatorProvider.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.CommandValidatorProvider"/> CommandValidatorProvider
            </summary>
            <param name="typeDiscoverer">
            An instance of ITypeDiscoverer to help identify and register <see cref="T:Bifrost.Validation.ICommandInputValidator"/> implementations
            and  <see cref="T:Bifrost.Validation.ICommandBusinessValidator"/> implementations
            </param>
            <param name="container">An instance of <see cref="T:Bifrost.Execution.IContainer"/> to manage instances of any <see cref="T:Bifrost.Validation.ICommandInputValidator"/></param>
        </member>
        <member name="P:Bifrost.Validation.CommandValidatorProvider.RegisteredInputValidators">
            <summary>
            Gets a list of registered input validator types
            </summary>
        </member>
        <member name="P:Bifrost.Validation.CommandValidatorProvider.RegisteredBusinessValidators">
            <summary>
             Gets a list of registered business validator types
            </summary>
        </member>
        <member name="T:Bifrost.Validation.DefaultValidatorFactory">
            <summary>
            Represents the default <see cref="T:FluentValidation.IValidatorFactory"/> implementation used for validators
            </summary>
        </member>
        <member name="M:Bifrost.Validation.DefaultValidatorFactory.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Validation.DefaultValidatorFactory"/>
            </summary>
            <param name="typeDiscoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer"/> used for discovering validators</param>
            <param name="container">A <see cref="T:Bifrost.Execution.IContainer"/> to use for creating instances of the different validators</param>
        </member>
        <member name="T:Bifrost.Validation.DynamicState">
            <summary>
            Represents state used by <see cref="!:DynamicStateRuleBuilder"/>
            </summary>
        </member>
        <member name="M:Bifrost.Validation.DynamicState.#ctor(System.Object)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Validation.DynamicState"/>
            </summary>
            <param name="model">Model to use as base for representing the state</param>
        </member>
        <member name="M:Bifrost.Validation.DynamicState.#ctor(System.Object,System.Collections.Generic.IEnumerable{System.Reflection.PropertyInfo})">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Validation.DynamicState"/>
            </summary>
            <param name="model">Model to use as base for representing the state</param>
            <param name="properties">Properties that are supported</param>
        </member>
        <member name="T:Bifrost.Commands.ICommandContextStore">
            <summary>
            Defines the store for getting and saving <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see> from its persistent data store
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextStore.Get(System.Guid)">
            <summary>
            Get a specific <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see> based on its Id
            </summary>
            <param name="id">The Id of the <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see> to get</param>
            <returns>The actual <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see></returns>
        </member>
        <member name="T:Bifrost.Validation.InvalidValidatorTypeException">
            <summary>
            Exception that is thrown if a validator type is of wrong type
            </summary>
        </member>
        <member name="M:Bifrost.Validation.InvalidValidatorTypeException.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.InvalidValidatorTypeException"/>
            </summary>
        </member>
        <member name="M:Bifrost.Validation.InvalidValidatorTypeException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.InvalidValidatorTypeException"/> with a message
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.Regex">
            <summary>
            Represents the validation meta data for the Regex rule
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.Rule">
            <summary>
            Represents the base class of a rule
            </summary>
        </member>
        <member name="P:Bifrost.Validation.MetaData.Rule.Message">
            <summary>
            Gets or sets the message that will be used when rule is not valid
            </summary>
        </member>
        <member name="P:Bifrost.Validation.MetaData.Regex.Expression">
            <summary>
            Gets or sets the expression that the rule represents
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.RegexGenerator">
            <summary>
            Represents the generator for generating a <see cref="T:Bifrost.Validation.MetaData.Regex"/> rule from a <see cref="T:FluentValidation.Validators.IRegularExpressionValidator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.ICanGenerateRule">
            <summary>
            Defines a system that can generate rule from a Fluent Validations property validator
            </summary>
        </member>
        <member name="M:Bifrost.Validation.MetaData.ICanGenerateRule.GeneratorFrom(FluentValidation.Validators.IPropertyValidator)">
            <summary>
            Generate from a specific <see cref="T:FluentValidation.Validators.IPropertyValidator"/>
            </summary>
            <param name="propertyValidator"><see cref="!:IProperty"/></param>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Validation.MetaData.ICanGenerateRule.From">
            <summary>
            Types that are supported by the generator
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.RequiredGenerator">
            <summary>
            Represents the generater that can generate a <see cref="T:Bifrost.Validation.MetaData.GreaterThan"/> rule from
            a <see cref="T:FluentValidation.Validators.GreaterThanValidator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.LessThanGenerator">
            <summary>
            Represents the generater that can generate a <see cref="T:Bifrost.Validation.MetaData.LessThan"/> rule from
            a <see cref="T:FluentValidation.Validators.LessThanValidator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.Email">
            <summary>
            Represents the metadata for the Email rule
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.EmailGenerator">
            <summary>
            Represents the generater that can generate a <see cref="T:Bifrost.Validation.MetaData.Email"/> rule from
            a <see cref="T:FluentValidation.Validators.IEmailValidator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.GreaterThan">
            <summary>
            Represents the metadata for the GreaterThan validation rule
            </summary>
        </member>
        <member name="P:Bifrost.Validation.MetaData.GreaterThan.Value">
            <summary>
            Gets or sets the value that values validated up against must be greater than
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.GreaterThanGenerator">
            <summary>
            Represents the generater that can generate a <see cref="T:Bifrost.Validation.MetaData.GreaterThan"/> rule from
            a <see cref="T:FluentValidation.Validators.GreaterThanValidator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.IValidationMetaDataGenerator">
            <summary>
            Defines the generator that generates metadata for a validator
            </summary>
        </member>
        <member name="M:Bifrost.Validation.MetaData.IValidationMetaDataGenerator.GenerateFrom(FluentValidation.IValidator)">
            <summary>
            Generate metadata from a specific validator
            </summary>
            <param name="validator">Validator to generate from</param>
            <returns>The actual metadata</returns>
        </member>
        <member name="T:Bifrost.Validation.MetaData.LessThan">
            <summary>
            Represents the metadata for the LessThan validation rule
            </summary>
        </member>
        <member name="P:Bifrost.Validation.MetaData.LessThan.Value">
            <summary>
            Gets or sets the value that values validated up against must be less than
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.ValidationMetaData">
            <summary>
            Represents the validation metadata for a type
            </summary>
        </member>
        <member name="P:Bifrost.Validation.MetaData.ValidationMetaData.Item(System.String)">
            <summary>
            Gets the ruleset for a specific property
            </summary>
            <param name="property"></param>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Validation.MetaData.ValidationMetaData.Properties">
            <summary>
            Gets the properties with rulesets
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.Required">
            <summary>
            Represents the metadata for the Required rule
            </summary>
        </member>
        <member name="T:Bifrost.Validation.MetaData.ValidationMetaDataGenerator">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Validation.MetaData.IValidationMetaDataGenerator"/>
            </summary>
        </member>
        <member name="M:Bifrost.Validation.MetaData.ValidationMetaDataGenerator.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Validation.MetaData.ValidationMetaDataGenerator"/>
            </summary>
            <param name="typeDiscoverer"><see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to use for discovering generators</param>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to use for activation of generators</param>
        </member>
        <member name="T:Bifrost.Validation.ModelRule`1">
            <summary>
            Represents the rule for a model of any type
            </summary>
            <typeparam name="T">Type the rule represents</typeparam>
        </member>
        <member name="M:Bifrost.Validation.ModelRule`1.#ctor">
            <summary>
            Creates an instance of <see cref="!:ModelRule(T)"/>
            </summary>
        </member>
        <member name="T:Bifrost.Validation.NullChapterValidator">
            <summary>
            Represent a null or non-existant validator.
            </summary>
            <remarks>
            Always returns an empty validation result collection.
            </remarks>
        </member>
        <member name="T:Bifrost.Validation.NullCommandBusinessValidator">
            <summary>
            Represent a null or non-existant validator.
            </summary>
            <remarks>
            Always returns an empty validation result collection.
            </remarks>
        </member>
        <member name="T:Bifrost.Validation.NullCommandInputValidator">
            <summary>
            Represent a null or non-existant validator.
            </summary>
            <remarks>
            Always returns an empty validation result collection.
            </remarks>
        </member>
        <member name="T:Bifrost.Commands.UnhandledCommandException">
            <summary>
            The exception that is thrown when a command is not handled by any <see cref="T:Bifrost.Commands.IHandleCommands"/>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.UnhandledCommandException.#ctor(Bifrost.Commands.ICommand)">
            <summary>
            Initializes a new instance <see cref="T:Bifrost.Commands.UnhandledCommandException"/>
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand"/> that wasn't handled</param>
        </member>
        <member name="P:Bifrost.Commands.UnhandledCommandException.Command">
            <summary>
            Gets the <see cref="T:Bifrost.Commands.ICommand"/> that wasn't handled
            </summary>
        </member>
        <member name="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException">
            <summary>
            Represents an exceptional situation where an event in an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see>
            has more than one migration path.
            </summary>
        </member>
        <member name="M:Bifrost.Events.DuplicateInEventMigrationHierarchyException.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.DuplicateInEventMigrationHierarchyException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException"/>
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="M:Bifrost.Events.DuplicateInEventMigrationHierarchyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException"/>
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
            <param name="innerException">The inner exception that is causing the exception</param>
        </member>
        <member name="M:Bifrost.Events.DuplicateInEventMigrationHierarchyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.DuplicateInEventMigrationHierarchyException"/> for serialization
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Events.EventMigrationHierarchy">
            <summary>
            Represents a migration hierarchy for a logical event, containing the concrete type for each step in the chain.
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchy.#ctor(System.Type)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventMigrationHierarchy"/>
            </summary>
            <param name="logicalEvent">Logical event that the hierarchy relates to.</param>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchy.AddMigrationLevel(System.Type)">
            <summary>
            Adds a new concrete type as the next level in the migration hierarchy
            </summary>
            <param name="type">Concrete type of the logical event</param>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchy.GetConcreteTypeForLevel(System.Int32)">
            <summary>
            Gets the concrete type of the logical event at the specified migration level
            </summary>
            <param name="level">The migration level</param>
            <returns>Concrete type of the logical event at the specified migration level</returns>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchy.GetLevelForConcreteType(System.Type)">
            <summary>
            Gets the level which the concrete type occupies in the migration hierarchy
            </summary>
            <param name="type">Concrete type of the logical event</param>
            <returns>The migration level</returns>
        </member>
        <member name="P:Bifrost.Events.EventMigrationHierarchy.LogicalEvent">
            <summary>
            Gets the logical event type
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventMigrationHierarchy.MigrationLevel">
            <summary>
            Gets the migration level of the hierarchy
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventMigrationHierarchy.MigratedTypes">
            <summary>
            Gets the types in the migration hierarchy
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventMigrationHierarchyDiscoverer">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventMigrationHierarchyDiscoverer">IEventMigrationHierarchyDiscoverer</see>
            </summary>
            <remarks>
            The discoverer will automatically build an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see> for all events.
            </remarks>
        </member>
        <member name="T:Bifrost.Events.IEventMigrationHierarchyDiscoverer">
            <summary>
            Defines a discoverer that is able to detect all events and group them into <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchies</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyDiscoverer.GetMigrationHierarchies">
            <summary>
            Gets all the <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchies</see> for events
            </summary>
            <returns>Event Migration Hierarchies</returns>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchyDiscoverer.#ctor(Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventMigrationHierarchyDiscoverer"/>
            </summary>
            <param name="typeDiscoverer"></param>
        </member>
        <member name="T:Bifrost.Events.EventMigrationHierarchyManager">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventMigrationHierarchyManager">IEventMigrationHierarchyManager</see>
            </summary>
            <remarks>
            The manager will automatically build an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see> for all events and
            allow clients to query for the current migration level for a specific logical event or the concrete type of a particular link
            in the migration chain for a logical event.
            </remarks>
        </member>
        <member name="T:Bifrost.Events.IEventMigrationHierarchyManager">
            <summary>
            Defines a manager that is able to determine what the current migration level for an <see cref="T:Bifrost.Events.IEvent">Event</see>
            and what the <see cref="T:System.Type">concrete type</see> of any specified migration level.
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyManager.GetCurrentMigrationLevelForLogicalEvent(System.Type)">
            <summary>
            Gets the number of generations (migrations) that the logical event has gone through.
            </summary>
            <param name="logicalEvent">The logical event (initial generation)</param>
            <returns>migration level</returns>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyManager.GetConcreteTypeForLogicalEventMigrationLevel(System.Type,System.Int32)">
            <summary>
            Gets the concrete type that the logical event took at the specified migration level
            </summary>
            <param name="logicalEvent">The logical event</param>
            <param name="level">The level we wish the concrete type for</param>
            <returns>The concrete type</returns>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyManager.GetLogicalTypeForEvent(System.Type)">
            <summary>
            Gets the logical event type of the migration hierarchy of which the passed in event is part
            </summary>
            <param name="event">Event for which you want to know the logical event </param>
            <returns>Type of the logical event</returns>
        </member>
        <member name="M:Bifrost.Events.IEventMigrationHierarchyManager.GetLogicalTypeFromName(System.String)">
            <summary>
            Gets the logical event type of the migration hierarchy from the name of the logical event
            </summary>
            <param name="logicalEventName">Name of the logical event</param>
            <returns>Type of the logical event</returns>
        </member>
        <member name="M:Bifrost.Events.EventMigrationHierarchyManager.#ctor(Bifrost.Events.IEventMigrationHierarchyDiscoverer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventMigrationHierarchyManager">EventMigrationHierarchyManager</see>
            </summary>
            <param name="eventMigrationHierarchyDiscoverer">IEventMigrationHierarchyDiscoverer</param>
        </member>
        <member name="T:Bifrost.Events.EventMigratorManager">
            <summary>
            Represents a <see cref="T:Bifrost.Events.IEventMigratorManager">IEventMigratorManager</see>
            </summary>
            <remarks>
            The manager will automatically import any <see cref="T:Bifrost.Events.IEventMigrator`2">IEventMigrator</see>
            and use them when migrating
            </remarks>
        </member>
        <member name="T:Bifrost.Events.IEventMigratorManager">
             <summary>
             Defines the functionality for a manager that handles the migration of events from older generations to newer generations.
            
             Migrates an <see cref="T:Bifrost.Events.IEvent">Event</see> to the current generation
             </summary>
        </member>
        <member name="M:Bifrost.Events.IEventMigratorManager.Migrate(Bifrost.Events.IEvent)">
            <summary>
            Migrates an event from the particular generation to the current generation of the event
            </summary>
            <param name="source">A previous generation of the event</param>
            <returns>The current generation of the event</returns>
        </member>
        <member name="M:Bifrost.Events.EventMigratorManager.#ctor(Bifrost.Execution.ITypeDiscoverer,Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventMigratorManager">EventMigratorManager</see>
            </summary>
            <param name="typeDiscoverer"><see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to use for discovering <see cref="!:IEventMigrator">Event migrators</see></param>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to use for instantiation of <see cref="!:IEventMigrator">Event migrators</see></param>
        </member>
        <member name="M:Bifrost.Events.EventMigratorManager.RegisterMigrator(System.Type)">
            <summary>
            Register a migrator
            </summary>
            <param name="migratorType">Type of migrator to register</param>
        </member>
        <member name="T:Bifrost.Events.EventOutOfSequenceException">
            <summary>
            The exception that is thrown when an <see cref="T:Bifrost.Events.IEvent"/> is out of sequence in an <see cref="T:Bifrost.Events.EventStream"/>
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSourceVersion">
            <summary>
            Represents the versioning for an <see cref="T:Bifrost.Events.EventSource"/>
            </summary>
        </member>
        <member name="F:Bifrost.Events.EventSourceVersion.Zero">
            <summary>
            Zero/null version
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.FromCombined(System.Double)">
            <summary>
            Creates an <see cref="T:Bifrost.Events.EventSourceVersion"/> from a combined floating point
            </summary>
            <param name="combined"></param>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.EventSourceVersion"/>
            </summary>
            <param name="commit">Commit part of the version (major)</param>
            <param name="sequence">Sequence part of the version, within the commit (minor) </param>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.NextCommit">
            <summary>
            Increase the commit number and return a new version
            </summary>
            <returns><see cref="T:Bifrost.Events.EventSourceVersion"/> with the new version</returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.NextSequence">
            <summary>
            Increase the sequence number and return a new version
            </summary>
            <returns><see cref="T:Bifrost.Events.EventSourceVersion"/> with the new version</returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.PreviousCommit">
            <summary>
            Decrease the commit number and return a new version
            </summary>
            <returns><see cref="T:Bifrost.Events.EventSourceVersion"/> with the new version</returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.CompareTo(Bifrost.Events.EventSourceVersion)">
            <summary>
            Compare this version with another version
            </summary>
            <param name="other">The other version to compare to</param>
            <returns>
            Less than zero - this instance is less than the other version
            Zero - this instance is equal to the other version
            Greater than zero - this instance is greater than the other version
            </returns>
        </member>
        <member name="M:Bifrost.Events.EventSourceVersion.Combine">
            <summary>
            Combines the Major / Minor number of Commit and Sequence into a single floating point number
            where the Commit is before the decimal place and Sequence is after.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Events.EventSourceVersion.Commit">
            <summary>
            Gets the commit number of the version
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSourceVersion.Sequence">
            <summary>
            Gets the sequence number of the version
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSubscriber`1">
            <summary>
            Represents a base class implementation of an <see cref="T:Bifrost.Events.IProcessEvents"/>
            </summary>
            <typeparam name="T">Type of view object the subscriber is working on</typeparam>
        </member>
        <member name="T:Bifrost.Events.IProcessEvents">
            <summary>
            Defines an event subscriber
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.EventSubscriber`1"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.InsertEntity(`0)">
            <summary>
            Insert an entity into the datasource
            </summary>
            <param name="entity">Entity to insert</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.DeleteEntity(Bifrost.Events.IEvent)">
            <summary>
            Delete an entity based upon an incoming <see cref="T:Bifrost.Events.IEvent"/>
            </summary>
            <param name="event">Event to delete based upon</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.DeleteEntity(`0)">
            <summary>
            Delete a specific entity
            </summary>
            <param name="entity">Entity to delete</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.Exists(`0)">
            <summary>
            Check if an entity already exists
            </summary>
            <param name="entity">Entity to check if exists</param>
            <returns>True if exists, false if not</returns>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.SaveEntity(`0)">
            <summary>
            Saves an entity - if it doesn't already exist, it inserts else it updates it
            </summary>
            <param name="entity">Entity to save</param>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.GetEntity(System.Guid)">
            <summary>
            Get an entity based upon its ID (<see cref="T:System.Guid"/>)
            </summary>
            <param name="id">Id of the entity to get</param>
            <returns>An instance of the entity</returns>
        </member>
        <member name="M:Bifrost.Events.EventSubscriber`1.UpdateProperty(Bifrost.Events.IEvent,System.Action{`0})">
            <summary>
            Update a property on an entity and commit the change
            </summary>
            <param name="event"><see cref="T:Bifrost.Events.IEvent"/> event that will be used to get the entity</param>
            <param name="propertyAction">Action to call that will do the changes it needs</param>
            <remarks>
            This method gets the entity, calls the action provided that will modify one or more properties
            and then updates the entity and commits it to the datasource
            </remarks>
        </member>
        <member name="P:Bifrost.Events.EventSubscriber`1.Repository">
            <summary>
            Gets the <see cref="T:Bifrost.Views.IView`1"/> for the type for querying
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventSubscriber`1.EntityContext">
            <summary>
            Gets the full <see cref="T:Bifrost.Entities.IEntityContext`1"/> for CRUD operations for the type
            </summary>
        </member>
        <member name="T:Bifrost.Events.IAmNextGenerationOf`1">
            <summary>
            Defines an event which is the subsequent generation of the <see cref="T:Bifrost.Events.IEvent">Event</see>
            </summary>
            <typeparam name="T">The previous generation of this event which this event supercedes</typeparam>
        </member>
        <member name="T:Bifrost.Events.IEventMigrator`2">
            <summary>
            Defines the functionality for a migrator that migrates from an older generation of <see cref="T:Bifrost.Events.IEvent">Event</see> to a newer generation
            </summary>
            <typeparam name="TIn">Older generation of the <see cref="T:Bifrost.Events.IEvent">Event</see> to migrate from</typeparam>
            <typeparam name="TOut">Newer generation of the <see cref="T:Bifrost.Events.IEvent">Event</see> to migrate to</typeparam>
        </member>
        <member name="M:Bifrost.Events.IEventMigrator`2.Migrate(`0)">
            <summary>
            Migrates from the incoming <see cref="T:Bifrost.Events.IEvent">Event</see> to the outgoing <see cref="T:Bifrost.Events.IEvent">Event</see>
            </summary>
            <param name="source">Older version of the <see cref="T:Bifrost.Events.IEvent">Event</see></param>
            <returns>Newer version of the <see cref="T:Bifrost.Events.IEvent">Event</see></returns>
        </member>
        <member name="T:Bifrost.Events.InvalidMigrationTypeException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Events.IEvent">Event</see> in an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see>
            has does not migrate from the previous event in the migration hierarchy.
            </summary>
        </member>
        <member name="M:Bifrost.Events.InvalidMigrationTypeException.#ctor">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.InvalidMigrationTypeException">InvalidMigrationTypeException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.InvalidMigrationTypeException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.InvalidMigrationTypeException">InvalidMigrationTypeException</see>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.InvalidMigrationTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.InvalidMigrationTypeException">InvalidMigrationTypeException</see>
            </summary>
            <param name="message">Error Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.InvalidMigrationTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.InvalidMigrationTypeException">InvalidMigrationTypeException</see> for serialization
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Events.NotAMigratedEventTypeException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Events.IEvent">Event</see> in an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see>
            has not implemented the correct <see cref="T:Bifrost.Events.IAmNextGenerationOf`1">interface</see>.
            </summary>
        </member>
        <member name="M:Bifrost.Events.NotAMigratedEventTypeException.#ctor">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.NotAMigratedEventTypeException">NotAMigratedEventTypeException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.NotAMigratedEventTypeException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.NotAMigratedEventTypeException">NotAMigratedEventTypeException</see>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.NotAMigratedEventTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.NotAMigratedEventTypeException">NotAMigratedEventTypeException</see>
            </summary>
            <param name="message">Error Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.NotAMigratedEventTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.NotAMigratedEventTypeException">NotAMigratedEventTypeException</see> for serialization
            </summary>
            <param name="serializationInfo"></param>
            <param name="streamingContext"></param>
        </member>
        <member name="T:Bifrost.Events.MigrationLevelOutOfRangeException">
            <summary>
            Represents an exception situation where a <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see> is
            asked for a concrete type at a level that does not exist.
            
            This could be a level less than 0, or a level greater than the hierarchy depth.
            </summary>
        </member>
        <member name="M:Bifrost.Events.MigrationLevelOutOfRangeException.#ctor">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.MigrationLevelOutOfRangeException">MigrationLevelOutOfRangeException</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.MigrationLevelOutOfRangeException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.MigrationLevelOutOfRangeException">MigrationLevelOutOfRangeException</see>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.MigrationLevelOutOfRangeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.MigrationLevelOutOfRangeException">MigrationLevelOutOfRangeException</see>
            </summary>
            <param name="message">Error Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.MigrationLevelOutOfRangeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.MigrationLevelOutOfRangeException">MigrationLevelOutOfRangeException</see> for serialization
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Events.UnregisteredEventException">
            <summary>
            Represents an exceptional situation where an <see cref="T:Bifrost.Events.IEvent">Event</see> in an <see cref="T:Bifrost.Events.EventMigrationHierarchy">EventMigrationHierarchy</see>
            has not been registered as an <see cref="T:Bifrost.Events.IEvent">Event</see>.
            </summary>
        </member>
        <member name="M:Bifrost.Events.UnregisteredEventException.#ctor">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.UnregisteredEventException"/>
            </summary>
        </member>
        <member name="M:Bifrost.Events.UnregisteredEventException.#ctor(System.String)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.UnregisteredEventException"/>
            </summary>
            <param name="message">Error Message</param>
        </member>
        <member name="M:Bifrost.Events.UnregisteredEventException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.UnregisteredEventException"/>
            </summary>
            <param name="message">Error Message</param>
            <param name="innerException">Inner Exception</param>
        </member>
        <member name="M:Bifrost.Events.UnregisteredEventException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a <see cref="T:Bifrost.Events.UnregisteredEventException"/> for serialization
            </summary>
            <param name="serializationInfo">Serialization Info</param>
            <param name="streamingContext">Streaming Context</param>
        </member>
        <member name="T:Bifrost.Execution.AssemblyLocator">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.IAssemblyLocator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.IAssemblyLocator">
            <summary>
            Defines a locator for locating assemblies for current application
            </summary>
        </member>
        <member name="M:Bifrost.Execution.IAssemblyLocator.GetAll">
            <summary>
            Gets all assemblies for current application
            </summary>
            <returns>Array of assemblies</returns>
        </member>
        <member name="M:Bifrost.Execution.IAssemblyLocator.GetWithFullName(System.String)">
            <summary>
            Gets an assembly for the current application by its fully qualified name 
            </summary>
            <param name="fullName">Fully qualified name of the assembly</param>
            <returns>Instance of the assembly, null if it was not found</returns>
        </member>
        <member name="M:Bifrost.Execution.IAssemblyLocator.GetWithName(System.String)">
            <summary>
            Gets an assembly based upon a friendly name of the assembly
            </summary>
            <param name="name">Name to get with</param>
            <returns>Instance of the assembly, null if it was not found</returns>
        </member>
        <member name="M:Bifrost.Execution.AssemblyLocator.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.AssemblyLocator"/>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.MultipleTypesFoundException">
            <summary>
            The exception that is thrown when multiple types are found and not allowed
            </summary>
        </member>
        <member name="M:Bifrost.Execution.MultipleTypesFoundException.#ctor">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Execution.MultipleTypesFoundException"/>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.MultipleTypesFoundException.#ctor(System.String)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Execution.MultipleTypesFoundException"/>
            </summary>
            <param name="message">Message with details about the exception</param>
        </member>
        <member name="T:Bifrost.Validation.PropertyValidatorWithDynamicState">
            <summary>
            Represents a <see cref="T:FluentValidation.Validators.PropertyValidator"/> that can hold dynamic state
            </summary>
        </member>
        <member name="M:Bifrost.Validation.PropertyValidatorWithDynamicState.AddExpression``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Add an expression that resolve to a property
            </summary>
            <param name="expression">Expression to add</param>
        </member>
        <member name="P:Bifrost.Validation.PropertyValidatorWithDynamicState.Properties">
            <summary>
            Properties representing the dynamic state
            </summary>
        </member>
        <member name="T:Bifrost.Validation.RuleBuilderExtensions">
            <summary>
            Validation extensions for building validation rules
            </summary>
        </member>
        <member name="M:Bifrost.Validation.RuleBuilderExtensions.WithDynamicStateFrom``2(FluentValidation.IRuleBuilderOptions{``0,``1},System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            
            </summary>
            <typeparam name="T"></typeparam>
            <typeparam name="TProperty"></typeparam>
            <param name="builder"></param>
            <param name="expression"></param>
            <returns></returns>
        </member>
        <member name="T:Bifrost.Views.IHaveId">
            <summary>
            Defines the behavior of having an Id - typically used by objects during querying
            </summary>
        </member>
        <member name="P:Bifrost.Views.IHaveId.Id">
            <summary>
            Get the Id of the object
            </summary>
        </member>
        <member name="T:Bifrost.Views.ObjectDoesNotHaveIdException">
            <summary>
            The exception that is thrown when an object does not have Id and a system requires it
            </summary>
        </member>
        <member name="T:Bifrost.Commands.CommandContext">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandContext">ICommandContext</see>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandContext.#ctor(Bifrost.Commands.ICommand,Bifrost.Execution.IExecutionContext,Bifrost.Events.IEventStore,Bifrost.Events.IUncommittedEventStreamCoordinator)">
            <summary>
            Initializes a new <see cref="T:Bifrost.Commands.CommandContext">CommandContext</see>
            </summary>
            <param name="command">The <see cref="T:Bifrost.Commands.ICommand">command</see> the context is for</param>
            <param name="executionContext">The <see cref="T:Bifrost.Execution.IExecutionContext"/> for the command</param>
            <param name="eventStore">A <see cref="T:Bifrost.Events.IEventStore"/> that will receive any events generated</param>
            <param name="uncommittedEventStreamCoordinator">The <see cref="T:Bifrost.Events.IUncommittedEventStreamCoordinator"/> to use for coordinating the committing of events</param>
        </member>
        <member name="M:Bifrost.Commands.CommandContext.Dispose">
            <summary>
            Disposes the CommandContext by Committing
            </summary>
        </member>
        <member name="T:Bifrost.Commands.CommandContextManager">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandContextManager">Command context manager</see>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandContextManager">
            <summary>
            Manages command contexts
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextManager.GetCurrent">
            <summary>
            Gets the current <see cref="T:Bifrost.Commands.ICommandContext">command context</see>, if any
            </summary>
            <returns>
            The current <see cref="T:Bifrost.Commands.ICommandContext">command context</see>.
            If there is no current context, it will throw an InvalidOperationException
            </returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextManager.EstablishForCommand(Bifrost.Commands.ICommand)">
            <summary>
            Establish a <see cref="T:Bifrost.Commands.ICommandContext">command context</see> for a specific <see cref="T:Bifrost.Commands.ICommand">command</see>.
            This will be the current command context, unless something else establishes a new context
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command</see> to establish for</param>
            <returns>Established context</returns>
            <remarks>
            The contexts are not stacked. So establishing two contexts after one another does not give you a chance to
            go back up the "stack".
            </remarks>
        </member>
        <member name="M:Bifrost.Commands.ICommandContextManager.EstablishForSaga(Bifrost.Sagas.ISaga,Bifrost.Commands.ICommand)">
            <summary>
            Establish a <see cref="T:Bifrost.Commands.ICommandContext">command context</see> for a specific <see cref="T:Bifrost.Commands.ICommand">command</see> in the
            context of a Saga.
            This will be the current command context, unless something else establishes a new context
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to be in context of</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command</see> to establish for</param>
            <returns>Established context</returns>
            <remarks>
            The contexts are not stacked. So establishing two contexts after one another does not give you a chance to
            go back up the "stack".
            </remarks>
        </member>
        <member name="P:Bifrost.Commands.ICommandContextManager.HasCurrent">
            <summary>
            Gets whether or not we have a current command context
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandContextManager.ResetContext">
            <summary>
            Reset context
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandContextManager.#ctor(Bifrost.Commands.ICommandContextFactory)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.CommandContextManager">CommandContextManager</see>
            </summary>
            <param name="factory">A <see cref="T:Bifrost.Commands.ICommandContextFactory"/> to use for building an <see cref="T:Bifrost.Commands.ICommandContext"/></param>
        </member>
        <member name="T:Bifrost.Commands.CommandHandlerManager">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandHandlerManager">ICommandHandlerManager</see>
            </summary>
            <remarks>
            The manager will automatically import any <see cref="T:Bifrost.Commands.ICommandHandlerInvoker">ICommandHandlerInvoker</see>
            and use them when handling
            </remarks>
        </member>
        <member name="T:Bifrost.Commands.ICommandHandlerManager">
            <summary>
            Defines the functionality for a manager that handles commands
            
            Handles a <see cref="T:Bifrost.Commands.ICommand">command</see> by calling any
            command handlers that can handle the specific command
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandHandlerManager.Handle(Bifrost.Commands.ICommand)">
            <summary>
            Handle a command
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">Command</see> to handle</param>
        </member>
        <member name="M:Bifrost.Commands.CommandHandlerManager.#ctor(Bifrost.Execution.ITypeImporter)">
            <summary>
            Initializes a new instance of a <see cref="T:Bifrost.Commands.CommandHandlerManager">CommandHandlerManager</see>
            </summary>
            <param name="importer">
            <see cref="T:Bifrost.Execution.ITypeImporter">TypeImporter</see> to use for discovering the 
            <see cref="T:Bifrost.Commands.ICommandHandlerInvoker">ICommandHandlerInvoker</see>'s to use
            </param>
        </member>
        <member name="T:Bifrost.Configuration.IEntityContextConfiguration">
            <summary>
            Defines a configuration set for an <see cref="T:Bifrost.Entities.IEntityContext`1">EntityContext</see> implementation
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IEntityContextConfiguration.EntityContextType">
            <summary>
            Gets the EntityContext type
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.IEntityContextConfiguration.Connection">
            <summary>
            Gets or sets the connection information for the entity context
            </summary>
        </member>
        <member name="T:Bifrost.Domain.InvalidAggregateException">
            <summary>
            The exception that is thrown when there is something invalid with
            an <see cref="T:Bifrost.Domain.AggregateRoot">AggregatedRoot</see>
            </summary>
        </member>
        <member name="M:Bifrost.Domain.InvalidAggregateException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Bifrost.Domain.InvalidAggregateException">InvalidAggregateException</see> class
            </summary>
            <param name="message">The error message that explains the reason for the exception</param>
        </member>
        <member name="T:Bifrost.Domain.AggregateRoot">
            <summary>
            Represents the base class used for aggregated roots in your domain
            </summary>
        </member>
        <member name="T:Bifrost.Events.EventSource">
             <summary>
             Represents a <see cref="T:Bifrost.Events.IEventSource">IEventSource</see>
            
             This is a base abstract class for any EventSource
             </summary>
        </member>
        <member name="T:Bifrost.Events.IEventSource">
            <summary>
            An EventSource is a domain object that is capable of generating and applying events.  It is an AggregateRoot in the context
            of event sourcing.
            </summary>
        </member>
        <member name="M:Bifrost.Events.IEventSource.Apply(Bifrost.Events.IEvent)">
            <summary>
            Apply a new event to the EventSource.  This will be applied and added to the <see cref="P:Bifrost.Events.IEventSource.UncommittedEvents">UncommitedEvents</see>.
            </summary>
            <param name="event">The event that is to be applied</param>
        </member>
        <member name="M:Bifrost.Events.IEventSource.Apply(System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Apply a new event based upon a method to the EventSource. This will applied and added to the <see cref="P:Bifrost.Events.IEventSource.UncommittedEvents">UncommitedEvents</see>
            </summary>
            <param name="expression">Expression pointing to a method to use for applying the event</param>
        </member>
        <member name="M:Bifrost.Events.IEventSource.ReApply(Bifrost.Events.CommittedEventStream)">
            <summary>
            Reapply an event from a stream
            </summary>
            <param name="eventStream">Stream that contains the events to reapply</param>
        </member>
        <member name="M:Bifrost.Events.IEventSource.FastForward(Bifrost.Events.EventSourceVersion)">
            <summary>
            Fast forward to the specified version of the <seealso cref="T:Bifrost.Events.EventSource">EventSource</seealso>
            </summary>
            <param name="lastVersion">Version to fast foward to</param>
        </member>
        <member name="P:Bifrost.Events.IEventSource.Id">
            <summary>
            The Id of the Event Source.  
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEventSource.Version">
            <summary>
            Gets the version of this EventSource
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEventSource.UncommittedEvents">
            <summary>
            A stream of events that have been applied to the <seealso cref="T:Bifrost.Events.EventSource">EventSource</seealso> but have not yet been committed to the EventStore.
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventSource.#ctor(System.Guid)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Events.EventSource">EventSource</see>
            </summary>
            <param name="id">Id of the event source</param>
        </member>
        <member name="P:Bifrost.Events.EventSource.EventSourceType">
            <summary>
            Get the event source type
            </summary>
        </member>
        <member name="T:Bifrost.Domain.IAggregateRoot">
            <summary>
            Defines the very basic functionality needed for an aggregated root
            </summary>
        </member>
        <member name="M:Bifrost.Domain.AggregateRoot.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of an <see cref="T:Bifrost.Domain.AggregateRoot">AggregatedRoot</see>
            </summary>
            <param name="id">Id of the AggregatedRoot</param>
        </member>
        <member name="T:Bifrost.Domain.AggregateRootRepository`1">
            <summary>
            Defines a concrete implementation of <see cref="T:Bifrost.Domain.IAggregateRootRepository`1">IAggregatedRootRepository</see>
            </summary>
            <typeparam name="T">Type the repository is for</typeparam>
        </member>
        <member name="T:Bifrost.Domain.IAggregateRootRepository`1">
            <summary>
            Defines the basic functionality for finding and getting aggregated roots
            </summary>
            <typeparam name="T">Type of aggregated root</typeparam>
        </member>
        <member name="T:Bifrost.Domain.IAggregateRootRepository">
            <summary>
            Defines the basic functionality for finding and getting aggregated roots
            </summary>
        </member>
        <member name="M:Bifrost.Domain.IAggregateRootRepository.Get(System.Guid)">
            <summary>
            Get an aggregated root by id
            </summary>
            <returns>An instance of the aggregated root</returns>
            <exception cref="T:Bifrost.Domain.MissingAggregateRootException">Thrown if aggregated root does not exist</exception>
        </member>
        <member name="M:Bifrost.Domain.IAggregateRootRepository`1.Get(System.Guid)">
            <summary>
            Get an aggregated root by id
            </summary>
            <param name="id">Id of aggregated root to get</param>
            <returns>An instance of the aggregated root</returns>
            <exception cref="T:Bifrost.Domain.MissingAggregateRootException">Thrown if aggregated root does not exist</exception>
        </member>
        <member name="M:Bifrost.Domain.AggregateRootRepository`1.#ctor(Bifrost.Commands.ICommandContextManager)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Domain.AggregateRootRepository`1">AggregatedRootRepository</see>
            </summary>
            <param name="commandContextManager"> <see cref="T:Bifrost.Commands.ICommandContextManager"/> to use for tracking </param>
        </member>
        <member name="T:Bifrost.Domain.IDynamicOriginator">
            <summary>
            Defines an origin, typically for aggregated roots when needing to create mementos and set them
            
            This interface represents the mementos dynamically
            </summary>
        </member>
        <member name="M:Bifrost.Domain.IDynamicOriginator.CreateMemento">
            <summary>
            Create a memento
            </summary>
            <returns>Dynamic representation of the memento</returns>
        </member>
        <member name="M:Bifrost.Domain.IDynamicOriginator.SetMemento(System.Object)">
            <summary>
            Set a memento
            </summary>
            <param name="memento">Dynamic representation of the memento to set</param>
        </member>
        <member name="T:Bifrost.Domain.IMemento">
            <summary>
            Marker interface for mementos
            </summary>
        </member>
        <member name="T:Bifrost.Domain.IOriginator">
            <summary>
            Defines an origin, typically for aggregated roots when needing to create mementos and set them
            </summary>
        </member>
        <member name="M:Bifrost.Domain.IOriginator.CreateMemento">
            <summary>
            Create memento
            </summary>
            <returns>The actual memento</returns>
        </member>
        <member name="M:Bifrost.Domain.IOriginator.SetMemento(Bifrost.Domain.IMemento)">
            <summary>
            Set mememoty
            </summary>
            <param name="memento">The actual memento to set</param>
        </member>
        <member name="T:Bifrost.Domain.MissingAggregateRootException">
            <summary>
            The exception that is thrown when an AggregatedRoot is missing
            </summary>
        </member>
        <member name="T:Bifrost.Entities.IEntityContext`1">
            <summary>
            Defines a context for working with entities typically stored in a datastore
            </summary>
            <typeparam name="T">Type of entity the context works on</typeparam>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Attach(`0)">
            <summary>
            Attach an entity to the context
            </summary>
            <param name="entity">Entity to attach</param>
            <remarks>
            In some conditions you might have an untracked entity, in order for that
            entity to be state handled by some implementations; you need to attach it.
            </remarks>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Insert(`0)">
            <summary>
            Insert a newly created entity
            </summary>
            <param name="entity">Entity to insert</param>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Update(`0)">
            <summary>
            Update an existing entity
            </summary>
            <param name="entity">Entity to update</param>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Delete(`0)">
            <summary>
            Delete an existing entity
            </summary>
            <param name="entity">Entity to delete</param>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Save(`0)">
            <summary>
            Save en existing entity
            </summary>
            <param name="entity">Entity to save</param>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.Commit">
            <summary>
            Commit any changes in the context
            </summary>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.GetById``1(``0)">
            <summary>
            Get an entity by its id
            </summary>
            <typeparam name="TProperty">Property to compare</typeparam>
            <param name="id">Id to lookup</param>
            <returns></returns>
        </member>
        <member name="M:Bifrost.Entities.IEntityContext`1.DeleteById``1(``0)">
            <summary>
            Delete an entity by its id 
            </summary>
            <typeparam name="TProperty"></typeparam>
            <param name="id"></param>
        </member>
        <member name="P:Bifrost.Entities.IEntityContext`1.Entities">
            <summary>
            Gets a queryable that one can do queries against
            </summary>  
        </member>
        <member name="T:Bifrost.Entities.IEntityContextConnection">
            <summary>
            Marker interface for connection configuration for <see cref="T:Bifrost.Entities.IEntityContext`1">entity contexts</see>
            </summary>
        </member>
        <member name="M:Bifrost.Entities.IEntityContextConnection.Initialize(Bifrost.Execution.IContainer)">
            <summary>
            Initialize the specific EntityContextConnection
            </summary>
            <param name="container">Container</param>
        </member>
        <member name="T:Bifrost.Events.EventStream">
            <summary>
            Represents a collection of events in the order that they were applied.
            </summary>
        </member>
        <member name="F:Bifrost.Events.EventStream.Events">
            <summary>
            Gets a list of all the events in the stream
            </summary>
        </member>
        <member name="M:Bifrost.Events.EventStream.#ctor(System.Guid)">
            <summary>
            Initializes a new <see cref="T:Bifrost.Events.EventStream">EventStream</see>
            </summary>
            <param name="eventSourceId">Id of the event source - typically an <see cref="T:Bifrost.Domain.AggregateRoot">AggregatedRoot</see></param>
        </member>
        <member name="M:Bifrost.Events.EventStream.GetEnumerator">
            <summary>
            Get a generic enumerator to iterate over the events
            </summary>
            <returns>Enumerator</returns>
        </member>
        <member name="P:Bifrost.Events.EventStream.EventSourceId">
            <summary>
            Gets the Id of the Event Source (Aggregate Root) that this Event Stream relates to.
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventStream.HasEvents">
            <summary>
            Indicates whether there are any events in the Stream.
            </summary>
        </member>
        <member name="P:Bifrost.Events.EventStream.Count">
            <summary>
            The number of Events in the Stream.
            </summary>
        </member>
        <member name="T:Bifrost.Events.CommittedEventStream">
            <summary>
            Represents a special version of an <see cref="T:Bifrost.Events.EventStream">EventStream</see>
            that holds committed <see cref="T:Bifrost.Events.IEvent">events</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.CommittedEventStream.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.CommittedEventStream">CommittedEventStream</see>
            </summary>
            <param name="eventSourceId">Id of the event source - typically an <see cref="T:Bifrost.Domain.AggregateRoot">AggregatedRoot</see></param>
        </member>
        <member name="M:Bifrost.Events.CommittedEventStream.Append(System.Collections.Generic.IEnumerable{Bifrost.Events.IEvent})">
            <summary>
            Append a set of events to the stream.  Events will be applied in Sequence, not in the order they are passed in.
            </summary>
            <param name="events"><see cref="T:System.Collections.Generic.IEnumerable`1">IEnumerable</see> of <see cref="T:Bifrost.Events.IEvent">events</see> to append</param>
        </member>
        <member name="T:Bifrost.Events.Event">
            <summary>
            Represents an event
            </summary>
        </member>
        <member name="T:Bifrost.Events.IEvent">
            <summary>
            Defines the basics of an event
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Id">
            <summary>
            Gets or sets the id of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.CommandContext">
            <summary>
            Gets or sets the Id of CommandContext in which the event originated from
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.CommandName">
            <summary>
            Gets or sets the name of the command causing the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Name">
            <summary>
            Gets or sets the name of the event
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.EventSourceId">
            <summary>
            Gets the EventSource id (Aggregate Root) to which these events belong.
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.EventSource">
            <summary>
            Gets and sets the eventsource
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Version">
            <summary>
            Gets or sets the version of the event (ChangeSet or something)
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.CausedBy">
            <summary>
            Gets or sets who or what the event was caused by.
            
            Typically this would be the name of the user or system causing it
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Origin">
            <summary>
            Gets or sets the origin of the event.
            
            Typically this would be what part of the system the event indirectly is coming from
            </summary>
        </member>
        <member name="P:Bifrost.Events.IEvent.Occured">
            <summary>
            Gets or sets the time the event occured
            </summary>
        </member>
        <member name="M:Bifrost.Events.Event.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.Event">Event</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.Event.#ctor(System.Guid,System.Int64)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.Event">Event</see> setting the event id directly.  This is required for event versioning.
            </summary>
        </member>
        <member name="M:Bifrost.Events.Event.Equals(System.Object)">
            <summary>
            Compares the event with another event, but will skip properties that are on the <see cref="T:Bifrost.Events.IEvent"/> interface
            </summary>
            <param name="obj">The other event to compare to</param>
            <returns>True if equal, false if not</returns>
            <remarks>
            Passing in an event of a different type automatically result in false
            </remarks>
        </member>
        <member name="T:Bifrost.Events.MethodEvent">
            <summary>
            Represents an event that represents a method on a domain object
            </summary>
        </member>
        <member name="M:Bifrost.Events.MethodEvent.#ctor(System.Guid,System.Reflection.MethodInfo)">
            <summary>
            Constructs a MethodEvent based upon a MethodInfo
            </summary>
            <param name="eventSourceId">Id of the event source</param>
            <param name="methodInfo"></param>
        </member>
        <member name="P:Bifrost.Events.MethodEvent.Arguments">
            <summary>
            Gets the arguments for the method
            </summary>
        </member>
        <member name="T:Bifrost.Events.MethodEventArguments">
            <summary>
            Represents arguments for a <see cref="T:Bifrost.Events.MethodEvent">MethodEvent</see>
            </summary>
        </member>
        <member name="M:Bifrost.Events.MethodEventArguments.GetArgumentValues">
            <summary>
            Get all values for all arguments
            </summary>
            <returns></returns>
        </member>
        <member name="P:Bifrost.Events.MethodEventArguments.Item(System.String)">
            <summary>
            Gets or sets the value associated with a given argument for a method
            </summary>
            <param name="argument">Name of argument</param>
            <returns>Value for the argument</returns>
        </member>
        <member name="T:Bifrost.Events.MethodEventFactory">
            <summary>
            Provides functionality for creating method events
            </summary>
        </member>
        <member name="M:Bifrost.Events.MethodEventFactory.CreateMethodEventFromExpression(System.Guid,System.Linq.Expressions.Expression{System.Action})">
            <summary>
            Create a <see cref="T:Bifrost.Events.MethodEvent">MethodEvent</see> from a method <see cref="T:System.Linq.Expressions.Expression`1">expression</see>
            </summary>
            <param name="eventSourceId">Id of the event source</param>
            <param name="method">Expression holding the method to create from</param>
            <returns>A <see cref="T:Bifrost.Events.MethodEvent">MethodEvent</see></returns>
        </member>
        <member name="T:Bifrost.Events.UncommittedEventStream">
            <summary>
            Represents a stream of events that are uncommitted
            </summary>
        </member>
        <member name="M:Bifrost.Events.UncommittedEventStream.#ctor(System.Guid)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Events.UncommittedEventStream">UncommittedEventStream</see>
            </summary>
            <param name="eventSourceId">Id of the event source - typically an <see cref="T:Bifrost.Domain.AggregateRoot">AggregatedRoot</see></param>
        </member>
        <member name="M:Bifrost.Events.UncommittedEventStream.Append(Bifrost.Events.IEvent)">
            <summary>
            Appends an event to the uncommitted event stream, setting the correct EventSourceId and Sequence Number for the event.
            </summary>
            <param name="event">The event to be appended.</param>
        </member>
        <member name="T:Bifrost.ExceptionStrings">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.AmbiguousContainerCreationException">
            <summary>
              Looks up a localized string similar to Multiple implementations of ICanCreateContainer was found.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.CanCreateContainerNotFoundException">
            <summary>
              Looks up a localized string similar to Couldn&apos;t discover an implementation of &quot;ICanCreateContainer&quot;.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.CannotFastForwardEventSourceThatIsNotInitialVersion">
            <summary>
              Looks up a localized string similar to You cannot fast forward an event source that is not the initial version..
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.CannotFastForwardStatefulEventSource">
            <summary>
              Looks up a localized string similar to You cannot fast forward a stateful event source.  You need to replay events to restore state..
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.CommandNotEstablished">
            <summary>
              Looks up a localized string similar to Command has not been established.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.MissingDefaultConstructorException">
            <summary>
              Looks up a localized string similar to Type &apos;{0}&apos; is missing a default constructor and one is required.
            </summary>
        </member>
        <member name="P:Bifrost.ExceptionStrings.UnhandledCommandException">
            <summary>
              Looks up a localized string similar to Command of type &apos;{0}&apos; was not handled.
            </summary>
        </member>
        <member name="T:Bifrost.Execution.ITypeDiscoverer">
            <summary>
            Discovers types based upon basetypes
            </summary>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.GetAll">
            <summary>
            Returns all discovered types
            </summary>
            <returns><see cref="T:System.Collections.Generic.IEnumerable`1"/> with all the types discovered</returns>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.FindSingle``1">
            <summary>
            Find a single implementation of a basetype
            </summary>
            <typeparam name="T">Basetype to find for</typeparam>
            <returns>Type found</returns>
            <remarks>
            If the base type is an interface, it will look for any types implementing the interface.
            If it is a class, it will find anyone inheriting from that class
            </remarks>
            <exception cref="T:System.ArgumentException">If there is more than one instance found</exception>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.FindMultiple``1">
            <summary>
            Find multiple implementations of a basetype
            </summary>
            <typeparam name="T">Basetype to find for</typeparam>
            <returns>All types implementing or inheriting from the given basetype</returns>
            <remarks>
            If the base type is an interface, it will look for any types implementing the interface.
            If it is a class, it will find anyone inheriting from that class
            </remarks>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.FindSingle(System.Type)">
            <summary>
            Find a single implementation of a basetype
            </summary>
            <param name="type">Basetype to find for</param>
            <returns>Type found</returns>
            <remarks>
            If the base type is an interface, it will look for any types implementing the interface.
            If it is a class, it will find anyone inheriting from that class
            </remarks>
            <exception cref="T:System.ArgumentException">If there is more than one instance found</exception>
        </member>
        <member name="M:Bifrost.Execution.ITypeDiscoverer.FindMultiple(System.Type)">
            <summary>
            Find multiple implementations of a basetype
            </summary>
            <param name="type">Basetype to find for</param>
            <returns>All types implementing or inheriting from the given basetype</returns>
            <remarks>
            If the base type is an interface, it will look for any types implementing the interface.
            If it is a class, it will find anyone inheriting from that class
            </remarks>
        </member>
        <member name="T:Bifrost.Execution.ITypeImporter">
            <summary>
            Defines a container for importing types.
            </summary>
        </member>
        <member name="M:Bifrost.Execution.ITypeImporter.ImportMany``1">
            <summary>
            Import many instances of type
            </summary>
            <typeparam name="T">Basetype to import - any inheritors will be found and created</typeparam>
            <returns>An array of instances that implements or inherits from the given base type</returns>
        </member>
        <member name="M:Bifrost.Execution.ITypeImporter.Import``1">
            <summary>
            Import a single instance of a type
            </summary>
            <typeparam name="T">Basetype to import</typeparam>
            <returns>An instance of a type that implements the given base type</returns>
        </member>
        <member name="T:Bifrost.Execution.SingletonAttribute">
            <summary>
            Indicates that a class is Singleton and should be treated as such
            for any factory creating an instance of a class marked with this
            </summary>
        </member>
        <member name="T:Bifrost.Execution.TypeDiscoverer">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.ITypeDiscoverer">ITypeDiscoverer</see>
            
            Uses the current AppDomain / Deployment and discoveres all types loaded
            </summary>
        </member>
        <member name="M:Bifrost.Execution.TypeDiscoverer.ExcludeNamespaceStartingWith(System.String)">
            <summary>
            Exclude discovering of types in a specific namespace
            </summary>
            <param name="name">Namespace to exclude</param>
        </member>
        <member name="M:Bifrost.Execution.TypeDiscoverer.#ctor(Bifrost.Execution.IAssemblyLocator)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.TypeDiscoverer">TypeDiscoverer</see>
            </summary>
        </member>
        <member name="T:Bifrost.Execution.TypeImporter">
            <summary>
            Represents a <see cref="T:Bifrost.Execution.ITypeImporter">ITypeImporter</see>
            </summary>
        </member>
        <member name="M:Bifrost.Execution.TypeImporter.#ctor(Bifrost.Execution.IContainer,Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Execution.TypeImporter">TypeImporter</see>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> that used for creating types</param>
            <param name="typeDiscoverer">A <see cref="T:Bifrost.Execution.ITypeDiscoverer">ITypeDiscoverer</see> used for discovering types</param>
        </member>
        <member name="T:Bifrost.Commands.CommandCoordinator">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandCoordinator">ICommandCoordinator</see>
            </summary>
        </member>
        <member name="T:Bifrost.Commands.ICommandCoordinator">
            <summary>
            Defines a coordinator for coordinating commands coming into the system
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandCoordinator.Handle(Bifrost.Sagas.ISaga,Bifrost.Commands.ICommand)">
            <summary>
            Handle a command in the context of a saga
            </summary>
            <param name="saga"><see cref="T:Bifrost.Sagas.ISaga"/> to handle in context of</param>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">command</see> to handle</param>
            <returns>
            Result from the handle.
            Within the result one can check if the handling was success or not
            </returns>
        </member>
        <member name="M:Bifrost.Commands.ICommandCoordinator.Handle(Bifrost.Commands.ICommand)">
            <summary>
            Handle a command
            </summary>
            <param name="command"><see cref="T:Bifrost.Commands.ICommand">command</see> to handle</param>
            <returns>
            Result from the handle.
            Within the result one can check if the handling was success or not
            </returns>
        </member>
        <member name="M:Bifrost.Commands.CommandCoordinator.#ctor(Bifrost.Commands.ICommandHandlerManager,Bifrost.Commands.ICommandContextManager,Bifrost.Commands.ICommandSecurityManager,Bifrost.Validation.ICommandValidationService,Bifrost.Globalization.ILocalizer)">
            <summary>
            Initializes a new instance of the <see cref="T:Bifrost.Commands.CommandCoordinator">CommandCoordinator</see>
            </summary>
            <param name="commandHandlerManager">A <see cref="T:Bifrost.Commands.ICommandHandlerManager"/> for handling commands</param>
            <param name="commandContextManager">A <see cref="T:Bifrost.Commands.ICommandContextManager"/> for establishing a <see cref="T:Bifrost.Commands.CommandContext"/></param>
            <param name="commandSecurityManager">A <see cref="T:Bifrost.Commands.ICommandSecurityManager"/> for dealing with security and commands</param>
            <param name="commandValidationService">A <see cref="T:Bifrost.Validation.ICommandValidationService"/> for validating a <see cref="T:Bifrost.Commands.ICommand"/> before handling</param>
            <param name="localizer">A <see cref="T:Bifrost.Globalization.ILocalizer"/> to use for controlling localization of current thread when handling commands</param>
        </member>
        <member name="T:Bifrost.Commands.IHandleCommands">
            <summary>
            Marker interface for command handlers
            </summary>
            <remarks>
            A command handler must then implement a Handle method that takes the
            specific <see cref="T:Bifrost.Commands.ICommand">command</see> you want to be handled.
            
            The system will automatically detect your command handlers and methods
            and call it automatically when a <see cref="T:Bifrost.Commands.ICommand">command</see>
            comes into the system
            </remarks>
        </member>
        <member name="T:Bifrost.Extensions.ExpressionExtensions">
            <summary>
            Provides methods for working with expressions
            </summary>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetMethodInfo(System.Linq.Expressions.Expression)">
            <summary>
            Get <see cref="T:System.Reflection.MethodInfo">MethodInfo</see> from an <see cref="T:System.Linq.Expressions.Expression">expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get MethodInfo from</param>
            <returns>The <see cref="T:System.Reflection.MethodInfo">MethodInfo</see> found, null if did not find one</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetMethodArguments(System.Linq.Expressions.Expression)">
            <summary>
            Get all argument instances from a method expression
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression"/> to get argument instances from</param>
            <returns>Array of argument instances</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetMemberExpression(System.Linq.Expressions.Expression)">
            <summary>
            Get <see cref="T:System.Linq.Expressions.MemberExpression">MemberExpression</see> from an <see cref="T:System.Linq.Expressions.Expression">expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get <see cref="T:System.Linq.Expressions.MemberExpression">MemberExpression</see> from</param>
            <returns><see cref="T:System.Linq.Expressions.MemberExpression">MemberExpression</see> instance, null if there is none</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetFieldInfo(System.Linq.Expressions.Expression)">
            <summary>
            Get <see cref="T:System.Reflection.FieldInfo">FieldInfo</see> from an <see cref="T:System.Linq.Expressions.Expression">Expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get <see cref="T:System.Reflection.FieldInfo">FieldInfo</see> from</param>
            <returns><see cref="T:System.Reflection.FieldInfo">FieldInfo</see> instance, null if there is none</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetPropertyInfo(System.Linq.Expressions.Expression)">
            <summary>
            Get <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> from an <see cref="T:System.Linq.Expressions.Expression">Expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> from</param>
            <returns><see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instance, null if there is none</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetInstance(System.Linq.Expressions.Expression)">
            <summary>
            Get an instance reference from an <see cref="T:System.Linq.Expressions.Expression">Expression</see> - if any
            </summary>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get an instance from</param>
            <returns>The instance, null if there is none</returns>
        </member>
        <member name="M:Bifrost.Extensions.ExpressionExtensions.GetInstance``1(System.Linq.Expressions.Expression)">
            <summary>
            Get an instance reference from an <see cref="T:System.Linq.Expressions.Expression">Expression</see>, with a specific type - if any
            </summary>
            <typeparam name="T">Type of the instance</typeparam>
            <param name="expression"><see cref="T:System.Linq.Expressions.Expression">Expression</see> to get an instance from</param>
            <returns>The instance, null if there is none</returns>
        </member>
        <member name="T:Bifrost.Extensions.TypeExtensions">
            <summary>
            Provides a set of methods for working with <see cref="T:System.Type">types</see>
            </summary>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.HasAttribute``1(System.Type)">
            <summary>
            Check if a type has an attribute associated with it
            </summary>
            <typeparam name="T">Type to check</typeparam>
            <returns>True if there is an attribute, false if not</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.IsNullable(System.Type)">
            <summary>
            Check if a type is nullable or not
            </summary>
            <param name="type"><see cref="T:System.Type"/> to check</param>
            <returns>True if type is nullable, false if not</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.IsNumericType(System.Type)">
            <summary>
            Check if a type is a number or not
            </summary>
            <param name="type"><see cref="T:System.Type"/> to check</param>
            <returns>True if type is numeric, false if not</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.HasDefaultConstructor(System.Type)">
            <summary>
            Check if a type has a default constructor that does not take any arguments
            </summary>
            <param name="type">Type to check</param>
            <returns>true if it has a default constructor, false if not</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.HasNonDefaultConstructor(System.Type)">
            <summary>
            Check if a type has a non default constructor
            </summary>
            <param name="type">Type to check</param>
            <returns>true if it has a non default constructor, false if not</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.GetDefaultConstructor(System.Type)">
            <summary>
            Get the default constructor from a type
            </summary>
            <param name="type">Type to get from</param>
            <returns>The default <see cref="T:System.Reflection.ConstructorInfo"/></returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.GetNonDefaultConstructor(System.Type)">
            <summary>
            Get the non default constructor, assuming there is only one
            </summary>
            <param name="type">Type to get from</param>
            <returns>The <see cref="T:System.Reflection.ConstructorInfo"/> for the constructor</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.HasInterface``1(System.Type)">
            <summary>
            Check if a type implements a specific interface
            </summary>
            <typeparam name="T">Interface to check for</typeparam>
            <param name="type">Type to check</param>
            <returns>True if the type implements the interface, false if not</returns>
        </member>
        <member name="M:Bifrost.Extensions.TypeExtensions.HasInterface(System.Type,System.Type)">
            <summary>
            Check if a type implements a specific interface
            </summary>
            <param name="type">Type to check</param>
            <param name="interfaceType">Interface to check for</param>
            <returns>True if the type implements the interface, false if not</returns>
        </member>
        <member name="T:Bifrost.Views.IView`1">
            <summary>
            Defines a repository that can be queried against
            </summary>
            <typeparam name="T">Type that can be queried against</typeparam>
        </member>
        <member name="M:Bifrost.Views.IView`1.GetById(System.Guid)">
            <summary>
            Gets a single instance based on Id
            </summary>
            <param name="id">Id of instance to get</param>
            <returns>The instance found - null if not found</returns>
        </member>
        <member name="P:Bifrost.Views.IView`1.Query">
            <summary>
            Gets a queryable that can be queried against
            </summary>
        </member>
        <member name="T:Bifrost.Views.View`1">
            <summary>
            Represents a <see cref="T:Bifrost.Views.IView`1"/>
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Bifrost.Views.View`1.#ctor(Bifrost.Entities.IEntityContext{`0})">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Views.View`1">QueryRepository</see>
            </summary>
            <param name="entityContext">An <see cref="T:Bifrost.Entities.IEntityContext`1">IEntityContext</see> to use for querying</param>
        </member>
        <member name="T:Bifrost.Execution.BindingLifecycle">
            <summary>
            Scope for activation
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.Singleton">
            <summary>
            Scoped as a singleton within the Ninject kernel
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.Request">
            <summary>
            Scoped as per request - tied into the current WebRequest
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.Transient">
            <summary>
            Scoped to null
            </summary>
        </member>
        <member name="F:Bifrost.Execution.BindingLifecycle.Thread">
            <summary>
            Scoped to per thread 
            </summary>
        </member>
        <member name="T:Bifrost.Execution.MultipleApplicationsFoundException">
            <summary>
            The exception that is thrown if multiple <see cref="!:IApplication"/> types exist in the current AppDomain
            </summary>
        </member>
        <member name="T:Bifrost.Time.Month">
            <summary>
            Month in a Gregorian calendar based year
            </summary>
        </member>
        <member name="T:Bifrost.Time.SystemClock">
            <summary>
            Represents a clock that keeps track of the current system date and time.
            Current system date and time can be substituted for explicit DateTime for testing purposes.
            </summary>
        </member>
        <member name="F:Bifrost.Time.SystemClock.MinimumTime">
            <summary>
            Gets the minimum time supported by the <see cref="T:Bifrost.Time.SystemClock"/>
            </summary>
        </member>
        <member name="M:Bifrost.Time.SystemClock.GetCurrentTime">
            <summary>
            Retrieves the current system date and time
            </summary>
            <returns>The current system date and time</returns>
        </member>
        <member name="M:Bifrost.Time.SystemClock.SetNowTo(System.DateTime)">
            <summary>
            Allows the current date and time to be set to an explicit value.  SOLELY FOR TESTING PURPOSES.
            Use within a "using" block within your test so that the current time is reset on exiting the test.
            </summary>
            <param name="dateTime">The explicit datetime that you wish to set within the test</param>
            <returns>A new instance of the SystemClock class which will return the explicitly set current time when queried.</returns>
        </member>
        <member name="M:Bifrost.Time.SystemClock.Dispose">
            <summary>
            Will remove any explicitly set current time,
            </summary>
        </member>
        <member name="T:Bifrost.Validation.ConventionValidatorFactory">
            <summary>
            Represents a <see cref="T:FluentValidation.IValidatorFactory"/> that is based on conventions
            </summary>
        </member>
        <member name="M:Bifrost.Validation.ConventionValidatorFactory.#ctor(Bifrost.Execution.IContainer)">
            <summary>
            Initializes an instance of <see cref="T:Bifrost.Validation.ConventionValidatorFactory"/>
            </summary>
            <param name="container"><see cref="T:Bifrost.Execution.IContainer"/> to use for getting instances of <see cref="T:FluentValidation.IValidator">validators</see></param>
        </member>
        <member name="T:Bifrost.Commands.ICommandTypeManager">
            <summary>
            Defines a manager for dealing with <see cref="T:Bifrost.Commands.ICommand">commands</see> and their types
            </summary>
        </member>
        <member name="M:Bifrost.Commands.ICommandTypeManager.GetFromName(System.String)">
            <summary>
            Gets the type of <see cref="T:Bifrost.Commands.ICommand"/> from the name
            </summary>
            <returns>
            The type of <see cref="T:Bifrost.Commands.ICommand"/>
            </returns>
            <param name="name">Name of command - must be unique</param>
        </member>
        <member name="T:Bifrost.Commands.CommandTypeManager">
            <summary>
            Represents a <see cref="T:Bifrost.Commands.ICommandTypeManager"/>
            </summary>
        </member>
        <member name="M:Bifrost.Commands.CommandTypeManager.#ctor(Bifrost.Execution.ITypeDiscoverer)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.CommandTypeManager"/>
            </summary>
            <param name="typeDiscoverer"><see cref="T:Bifrost.Execution.ITypeDiscoverer"/> to use for discovering <see cref="T:Bifrost.Commands.ICommand">commands</see></param>
        </member>
        <member name="T:Bifrost.Commands.UnknownCommandException">
            <summary>
            The exception that is thrown when a command is not known by its name in the system
            </summary>
        </member>
        <member name="M:Bifrost.Commands.UnknownCommandException.#ctor(System.String)">
            <summary>
            Initializes a new instance of <see cref="T:Bifrost.Commands.UnknownCommandException"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="T:Bifrost.Configuration.ISerializationConfiguration">
            <summary>
            Defines the configuration for serialization
            </summary>
        </member>
        <member name="P:Bifrost.Configuration.ISerializationConfiguration.SerializerType">
            <summary>
            Gets or sets the type of serializer to use throughout the system
            </summary>
        </member>
        <member name="T:Bifrost.Configuration.SerializationConfiguration">
            <summary>
            Represents an implementation of <see cref="T:Bifrost.Configuration.ISerializationConfiguration"/>
            </summary>
        </member>
        <member name="T:Bifrost.Read.IReadModel">
            <summary>
            Represents the marker interface for a read model
            </summary>
        </member>
    </members>
</doc>
